<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>TEA加密与解密</title>
      <link href="/2022/10/07/TEA%E5%8A%A0%E5%AF%86%E4%B8%8E%E8%A7%A3%E5%AF%86/"/>
      <url>/2022/10/07/TEA%E5%8A%A0%E5%AF%86%E4%B8%8E%E8%A7%A3%E5%AF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="TEA加密解密流程"><a href="#TEA加密解密流程" class="headerlink" title="TEA加密解密流程"></a>TEA加密解密流程</h1><p>参考代码：(源自：<a href="https://ctf-wiki.org/reverse/identify-encode-encryption/introduction/">常见加密算法和编码识别 - CTF Wiki (ctf-wiki.org)</a>)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">encrypt</span> <span class="params">(<span class="type">uint32_t</span>* v, <span class="type">uint32_t</span>* k)</span> &#123;</span><br><span class="line">    <span class="type">uint32_t</span> v0=v[<span class="number">0</span>], v1=v[<span class="number">1</span>], sum=<span class="number">0</span>, i;           <span class="comment">/* set up */</span></span><br><span class="line">    <span class="type">uint32_t</span> delta=<span class="number">0x9e3779b9</span>;                     <span class="comment">/* a key schedule constant */</span></span><br><span class="line">    <span class="type">uint32_t</span> k0=k[<span class="number">0</span>], k1=k[<span class="number">1</span>], k2=k[<span class="number">2</span>], k3=k[<span class="number">3</span>];   <span class="comment">/* cache key */</span></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;                       <span class="comment">/* basic cycle start */</span></span><br><span class="line">        sum += delta;</span><br><span class="line">        v0 += ((v1&lt;&lt;<span class="number">4</span>) + k0) ^ (v1 + sum) ^ ((v1&gt;&gt;<span class="number">5</span>) + k1);</span><br><span class="line">        v1 += ((v0&lt;&lt;<span class="number">4</span>) + k2) ^ (v0 + sum) ^ ((v0&gt;&gt;<span class="number">5</span>) + k3);  </span><br><span class="line">    &#125;                                              <span class="comment">/* end cycle */</span></span><br><span class="line">    v[<span class="number">0</span>]=v0; v[<span class="number">1</span>]=v1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">decrypt</span> <span class="params">(<span class="type">uint32_t</span>* v, <span class="type">uint32_t</span>* k)</span> &#123;</span><br><span class="line">    <span class="type">uint32_t</span> v0=v[<span class="number">0</span>], v1=v[<span class="number">1</span>], sum=<span class="number">0xC6EF3720</span>, i;  <span class="comment">/* set up */</span></span><br><span class="line">    <span class="type">uint32_t</span> delta=<span class="number">0x9e3779b9</span>;                     <span class="comment">/* a key schedule constant */</span></span><br><span class="line">    <span class="type">uint32_t</span> k0=k[<span class="number">0</span>], k1=k[<span class="number">1</span>], k2=k[<span class="number">2</span>], k3=k[<span class="number">3</span>];   <span class="comment">/* cache key */</span></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">32</span>; i++) &#123;                         <span class="comment">/* basic cycle start */</span></span><br><span class="line">        v1 -= ((v0&lt;&lt;<span class="number">4</span>) + k2) ^ (v0 + sum) ^ ((v0&gt;&gt;<span class="number">5</span>) + k3);</span><br><span class="line">        v0 -= ((v1&lt;&lt;<span class="number">4</span>) + k0) ^ (v1 + sum) ^ ((v1&gt;&gt;<span class="number">5</span>) + k1);</span><br><span class="line">        sum -= delta;                                   </span><br><span class="line">    &#125;                                              <span class="comment">/* end cycle */</span></span><br><span class="line">    v[<span class="number">0</span>]=v0; v[<span class="number">1</span>]=v1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>在其他的TEA加密解密流程中，部分过程或许有偏差，但整体上还是大差不差的。</li><li>注意使用的变量是32位的unsigned int类型变量。</li></ul><h3 id="具体示例"><a href="#具体示例" class="headerlink" title="具体示例"></a>具体示例</h3><p>在此TEA加密流程中，v5、v6并不完全按照示例进行，但只要按照其反思路来做就可以了。</p><p><img src="/2022/10/07/TEA%E5%8A%A0%E5%AF%86%E4%B8%8E%E8%A7%A3%E5%AF%86/image-20221007171855238.png" alt="TEA加密"></p><p>解密脚本</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">decrypt</span><span class="params">(<span class="type">int</span> *res, <span class="type">int</span> *key)</span>&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> v6=res[<span class="number">0</span>];</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> v5=res[<span class="number">1</span>];</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> sum = <span class="number">0xC6EF3720</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> delta = <span class="number">0x61C88647</span>;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">0x1F</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">  v5 -= (((v6 &gt;&gt; <span class="number">5</span>) ^ (<span class="number">16</span> * v6)) + v6) ^ (key[(sum&gt;&gt;<span class="number">11</span>)&amp;<span class="number">3</span>] + sum);</span><br><span class="line">    sum += <span class="number">0x61C88647</span>;</span><br><span class="line">    v6 -= (((v5 &gt;&gt; <span class="number">5</span>) ^ (<span class="number">16</span> * v5)) + v5) ^ (key[sum&amp;<span class="number">3</span>] + sum);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;结果：%x,%x\n&quot;</span>,v6,v5);</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">encrypt</span><span class="params">(<span class="type">int</span> *res, <span class="type">int</span> *key)</span>&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> v6=res[<span class="number">0</span>];</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> v5=res[<span class="number">1</span>];</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> delta = <span class="number">0x61C88647</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> i;</span><br><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">0x1F</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">  v6 += (((v5 &gt;&gt; <span class="number">5</span>) ^ (<span class="number">16</span> * v5)) + v5) ^ (key[sum&amp;<span class="number">3</span>] + sum);</span><br><span class="line">  sum -= <span class="number">0x61C88647</span>;</span><br><span class="line">v5 += (((v6 &gt;&gt; <span class="number">5</span>) ^ (<span class="number">16</span> * v6)) + v6) ^ (key[(sum&gt;&gt;<span class="number">11</span>)&amp;<span class="number">3</span>] + sum);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;结果：%X,%X\n&quot;</span>,v6,v5);</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">int</span> res[<span class="number">6</span>]=&#123;</span><br><span class="line"><span class="number">0xC11EE75A</span>, <span class="number">0xA4AD0973</span>,</span><br><span class="line"><span class="number">0xF61C9018</span>, <span class="number">0x32E37BCD</span>,</span><br><span class="line"><span class="number">0x2DCC1F26</span>, <span class="number">0x344380CC</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> key[<span class="number">4</span>]=&#123;</span><br><span class="line"><span class="number">0x010203</span>, <span class="number">0x04050607</span>, <span class="number">0x08090A0B</span>, <span class="number">0x0C0D0E0F</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">decrypt(&amp;res[i*<span class="number">2</span>],key);</span><br><span class="line">&#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后所得到的结果要注意是小端存储。</p>]]></content>
      
      
      <categories>
          
          <category> Reverse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杰瑞的影分身——bugku</title>
      <link href="/2022/10/05/%E6%9D%B0%E7%91%9E%E7%9A%84%E5%BD%B1%E5%88%86%E8%BA%AB%E2%80%94%E2%80%94bugku/"/>
      <url>/2022/10/05/%E6%9D%B0%E7%91%9E%E7%9A%84%E5%BD%B1%E5%88%86%E8%BA%AB%E2%80%94%E2%80%94bugku/</url>
      
        <content type="html"><![CDATA[<h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>简单浏览下程序思路，可以发现程序的输入，但程序的结果比较过程则没有发现。</p><p><img src="/2022/10/05/%E6%9D%B0%E7%91%9E%E7%9A%84%E5%BD%B1%E5%88%86%E8%BA%AB%E2%80%94%E2%80%94bugku/image-20221005181311087.png" alt="main"></p><p><img src="/2022/10/05/%E6%9D%B0%E7%91%9E%E7%9A%84%E5%BD%B1%E5%88%86%E8%BA%AB%E2%80%94%E2%80%94bugku/image-20221005181336032.png" alt="sub_401670"></p><p><img src="/2022/10/05/%E6%9D%B0%E7%91%9E%E7%9A%84%E5%BD%B1%E5%88%86%E8%BA%AB%E2%80%94%E2%80%94bugku/image-20221005181419209.png" alt="sub_402770"></p><p>通过网上搜索，在sub_402770的函数中Block部分应该也是一个函数，我猜测具体过程是由前一句sub_401C40函数生成的，因此直接在这下断点，直接动态调试。</p><p>程序的比较过程还是比较明显的，但还是调试了我半天，具体过程就不贴图了。</p><h3 id="第一个过程"><a href="#第一个过程" class="headerlink" title="第一个过程"></a>第一个过程</h3><p>对input[i]进行异或4，然后当 i % 3 &#x3D;&#x3D; 1时，还将input[i]与一串字符串第（3 * i）位异或（但根据该字符串来进行解题时，出现的结果不太对，因此我直接记录进行异或的字符，直接异或了）</p><h3 id="第二个过程"><a href="#第二个过程" class="headerlink" title="第二个过程"></a>第二个过程</h3><p>对sub_4017B0函数生成的字符串进行处理。</p><p><img src="/2022/10/05/%E6%9D%B0%E7%91%9E%E7%9A%84%E5%BD%B1%E5%88%86%E8%BA%AB%E2%80%94%E2%80%94bugku/image-20221005182710135.png" alt="sub_4017B0"></p><p>由于程序的进行，处理后的字符串可以直接读取，因此不用管过程，直接得到结果。</p><p><code>str1 = &quot;e4bdtRV02&quot;</code></p><p>后面的字符被第十位的 0 截断了，因此只有9位了。</p><h3 id="第三个过程"><a href="#第三个过程" class="headerlink" title="第三个过程"></a>第三个过程</h3><p>将变化后的input[i]与sub_401BD0（i）所得到的返回值 + 2 进行异或。</p><p><img src="/2022/10/05/%E6%9D%B0%E7%91%9E%E7%9A%84%E5%BD%B1%E5%88%86%E8%BA%AB%E2%80%94%E2%80%94bugku/image-20221005183346887.png" alt="sub——401BD0"></p><p>同时如果input的前九位与str1的前九位相加。</p><p><img src="/2022/10/05/%E6%9D%B0%E7%91%9E%E7%9A%84%E5%BD%B1%E5%88%86%E8%BA%AB%E2%80%94%E2%80%94bugku/image-20221005183623391.png" alt="调试得到的第三个过程"></p><h1 id="解题脚本"><a href="#解题脚本" class="headerlink" title="解题脚本"></a>解题脚本</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">getnum</span>(<span class="params">a1</span>):</span><br><span class="line">    <span class="keyword">if</span> a1 == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">12</span></span><br><span class="line">    <span class="keyword">elif</span> a1 == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">11</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">str1 = <span class="string">&quot;e4bdtRV02&quot;</span></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&quot;flag&#123;where is tom&#125;flag&#123;My cheese&#125;flag&#123;i miss tom&#125;&quot;</span></span><br><span class="line">str2 = <span class="string">&quot;gsleg&quot;</span></span><br><span class="line">strrrr = [<span class="number">0xD3</span>, <span class="number">0x38</span>, <span class="number">0xD1</span>, <span class="number">0xD3</span>, <span class="number">0x7B</span>, <span class="number">0xAD</span>, <span class="number">0xB3</span>, <span class="number">0x66</span>, <span class="number">0x71</span>, <span class="number">0x3A</span>,</span><br><span class="line">          <span class="number">0x59</span>, <span class="number">0x5F</span>, <span class="number">0x5F</span>, <span class="number">0x2D</span>, <span class="number">0x73</span>]</span><br><span class="line">flag = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">15</span>):</span><br><span class="line">    <span class="keyword">if</span> i &lt; <span class="number">9</span>:</span><br><span class="line">        flag.append((strrrr[i] - <span class="built_in">ord</span>(str1[i])) ^ getnum(i % <span class="number">3</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flag.append((strrrr[i] ^ getnum(i % <span class="number">3</span>)))</span><br><span class="line">t = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">15</span>):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">3</span> == <span class="number">1</span>:</span><br><span class="line">        flag[i] ^= <span class="built_in">ord</span>(str2[t])</span><br><span class="line">        t += <span class="number">1</span></span><br><span class="line">    flag[i] ^= <span class="number">4</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> flag:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(i), end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Reverse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Reverse </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bingo——bugku</title>
      <link href="/2022/10/04/Bingo%E2%80%94%E2%80%94bugku/"/>
      <url>/2022/10/04/Bingo%E2%80%94%E2%80%94bugku/</url>
      
        <content type="html"><![CDATA[<h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>思路主要参考网上writeup，一步步做出来的。</p><p>png中隐藏着exe文件</p><p><img src="/2022/10/04/Bingo%E2%80%94%E2%80%94bugku/1.png" alt="1"></p><p>MZ文件头，即（4D5A9000…)，从这开始到最后的字节都提取出来，为一个exe文件。此时的exe文件因为缺少PE头无法被ida识别，因此加一个PE头 50 45 00 00</p><p><img src="/2022/10/04/Bingo%E2%80%94%E2%80%94bugku/2.png" alt="2"></p><p>也可以通过010editor在模板中修改</p><p><img src="/2022/10/04/Bingo%E2%80%94%E2%80%94bugku/3.png" alt="3"></p><p>用ida打开该exe文件</p><p><img src="/2022/10/04/Bingo%E2%80%94%E2%80%94bugku/4.png" alt="4"></p><p>判断这是一个解密过程，即 为部分字节数据进行异或解密，用脚本进行解密。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&quot;C:\Users\hahbiubiubiu\Downloads\file\bingo.exe&quot;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:    </span><br><span class="line">    data = f.read() </span><br><span class="line">data = <span class="built_in">list</span>(data) </span><br><span class="line">text_segment_size = <span class="number">0x3E000</span> - <span class="number">0x1000</span> </span><br><span class="line"><span class="comment"># 0x3E000是大小 </span></span><br><span class="line"><span class="comment"># 0x1000是偏移 </span></span><br><span class="line">key = <span class="number">0x22</span>  </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x1000</span>, <span class="number">0x1000</span> + text_segment_size):</span><br><span class="line">    data[i] ^= key  </span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&quot;C:\Users\hahbiubiubiu\Downloads\file\bing0_xor.exe&quot;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f: </span><br><span class="line">    f.write(<span class="built_in">bytes</span>(data))</span><br></pre></td></tr></table></figure><p>执行脚本后得到新的exe文件，ida打开它</p><p><img src="/2022/10/04/Bingo%E2%80%94%E2%80%94bugku/5.png" alt="5"></p><p>除了前面的异或，它跳到了0x408BE0的位置</p><p><img src="/2022/10/04/Bingo%E2%80%94%E2%80%94bugku/6.png" alt="6"></p><p> Edit-&gt;Segments-&gt;Rebase Progarm…-&gt;修改value为0</p><p><img src="/2022/10/04/Bingo%E2%80%94%E2%80%94bugku/7.png" alt="7"></p><p><img src="/2022/10/04/Bingo%E2%80%94%E2%80%94bugku/8.png" alt="8"></p><p>该函数地址修改为0x8BE0</p><p><img src="/2022/10/04/Bingo%E2%80%94%E2%80%94bugku/9.png" alt="9"></p><p>在010editor中修改程序入口点为0x8BE0</p><p><img src="/2022/10/04/Bingo%E2%80%94%E2%80%94bugku/10.png" alt="10"></p><p>再次用ida打开exe文件发现程序多了两个main函数，main_0函数就是程序主逻辑</p><p><img src="/2022/10/04/Bingo%E2%80%94%E2%80%94bugku/11.png" alt="11"></p><p><img src="/2022/10/04/Bingo%E2%80%94%E2%80%94bugku/12.png" alt="12"></p><p>_strrev是对字符串进行倒转的函数，根据逻辑，写出脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;zaciWjV!Xm[_XSqeThmegndq&quot;</span> </span><br><span class="line">b = <span class="number">29</span> flag = <span class="string">&quot;&quot;</span> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">    t = math.sqrt(<span class="built_in">pow</span>(<span class="built_in">ord</span>(a[<span class="built_in">int</span>(i/<span class="number">2</span>)]), <span class="number">2.0</span>) + <span class="built_in">pow</span>(b, <span class="number">2.0</span>)) + <span class="number">0.5</span>    </span><br><span class="line">    k = <span class="built_in">int</span>(t)    </span><br><span class="line">    b += <span class="number">1</span>    </span><br><span class="line">    flag += <span class="built_in">chr</span>(k)    </span><br><span class="line">    a = a[::-<span class="number">1</span>] <span class="built_in">print</span>(flag[::-<span class="number">1</span>]) </span><br><span class="line"><span class="comment"># flag&#123;woc_6p_tql_moshifu&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Reverse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Reverse </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>babyLoginPlus--bugku</title>
      <link href="/2022/10/03/babyLoginPlus-bugku/"/>
      <url>/2022/10/03/babyLoginPlus-bugku/</url>
      
        <content type="html"><![CDATA[<h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>该题主要是参照其他大佬writeup的思路，即找到输入，下断点，根据最后所得到的比较等式来一步步调试得到的。</p><h3 id="VM"><a href="#VM" class="headerlink" title="VM"></a>VM</h3><p>该函数应该是使用vm函数的地方</p><p><img src="/2022/10/03/babyLoginPlus-bugku/image-20221003131441527.png" alt="入口"></p><p>因此在这个地方下了断点之后，一步步开始调试，看看程序的执行流程</p><p>首先，程序的执行到这个地方，会不断重复执行，然后根据调用的函数来获取输入、进行比较、执行输出。</p><p>在前几次的执行中，包含了获取输入的函数，得到我们的输入。</p><h3 id="比较过程"><a href="#比较过程" class="headerlink" title="比较过程"></a>比较过程</h3><p>获取输入后，程序开始执行比较，其中我也不太清楚部分操作的流程，可能是获取数据或者解析数据什么的，因此省略了。</p><p>获取input[i]的字符更新为input[i]-9。</p><p><code>sub dex,ecx</code></p><p><img src="/2022/10/03/babyLoginPlus-bugku/image-20221003115001724.png" alt="input[i]-9"></p><p>获取操作数 0x26。</p><p><img src="/2022/10/03/babyLoginPlus-bugku/image-20221003115346614.png"></p><p>将input[i]与上一个函数获取的0x26异或，即input[i] &#x3D; input[i] ^ 0x26。</p><p><code>xor edx,ecx</code></p><p><img src="/2022/10/03/babyLoginPlus-bugku/image-20221003115613045.png" alt="异或0x26"></p><p>获取程序之前生成的Welcome字符串的第i个字符。</p><p><img src="/2022/10/03/babyLoginPlus-bugku/image-20221003120605295.png" alt="获取key"></p><p>将获取Welcome字符串的字符和之前变化后的input[i]进行异或。</p><p><code>xor edx,ecx</code></p><p><img src="/2022/10/03/babyLoginPlus-bugku/image-20221003120903814.png" alt="异或key"></p><p>执行add [eax], esi, 将上一步异或得到的的字符加上6。</p><p><code>add [eax], esi</code></p><p><img src="/2022/10/03/babyLoginPlus-bugku/image-20221003121506365.png" alt="变化"></p><p>获取最后结果比较所需的数组。</p><p><img src="/2022/10/03/babyLoginPlus-bugku/image-20221003121637821.png"></p><p><img src="/2022/10/03/babyLoginPlus-bugku/image-20221003121735062.png"></p><p><img src="/2022/10/03/babyLoginPlus-bugku/image-20221003130820114.png" alt="结果数组"></p><p>进行结果比较。</p><p><code>cmp edi,ecx</code></p><p><img src="/2022/10/03/babyLoginPlus-bugku/image-20221003122048630.png" alt="结果比较"></p><h1 id="解题脚本"><a href="#解题脚本" class="headerlink" title="解题脚本"></a>解题脚本</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">result = [<span class="number">0x32</span>, <span class="number">0x26</span>, <span class="number">0x18</span>, <span class="number">0x21</span>, <span class="number">0x41</span>, <span class="number">0x23</span>, <span class="number">0x2A</span>, <span class="number">0x57</span>, <span class="number">0x44</span>, <span class="number">0x29</span>, <span class="number">0x35</span>, <span class="number">0x12</span>, <span class="number">0x20</span>, <span class="number">0x17</span>, <span class="number">0x45</span>, <span class="number">0x1C</span>,</span><br><span class="line">       <span class="number">0x68</span>, <span class="number">0x2D</span>, <span class="number">0x7A</span>, <span class="number">0x79</span>, <span class="number">0x47</span>, <span class="number">0x7F</span>, <span class="number">0x44</span>, <span class="number">0x09</span>, <span class="number">0x1E</span>, <span class="number">0x75</span>, <span class="number">0x41</span>, <span class="number">0x2A</span>, <span class="number">0x19</span>, <span class="number">0x34</span>, <span class="number">0x76</span>, <span class="number">0x47</span>,</span><br><span class="line">       <span class="number">0x14</span>, <span class="number">0x50</span>, <span class="number">0x52</span>, <span class="number">0x76</span>, <span class="number">0x58</span>]</span><br><span class="line">key = [<span class="number">0x57</span>, <span class="number">0x65</span>, <span class="number">0x6C</span>, <span class="number">0x63</span>, <span class="number">0x6F</span>, <span class="number">0x6D</span>, <span class="number">0x65</span>, <span class="number">0x5F</span>, <span class="number">0x74</span>, <span class="number">0x6F</span>, <span class="number">0x5F</span>, <span class="number">0x73</span>, <span class="number">0x64</span>, <span class="number">0x6E</span>, <span class="number">0x69</span>, <span class="number">0x73</span>,</span><br><span class="line">       <span class="number">0x63</span>, <span class="number">0x5F</span>, <span class="number">0x32</span>, <span class="number">0x30</span>, <span class="number">0x31</span>, <span class="number">0x38</span>, <span class="number">0x5F</span>, <span class="number">0x42</span>, <span class="number">0x79</span>, <span class="number">0x2E</span>, <span class="number">0x5A</span>, <span class="number">0x65</span>, <span class="number">0x72</span>, <span class="number">0x6F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">       <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>]</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(result)):</span><br><span class="line">    flag += <span class="built_in">chr</span>(((result[i]-<span class="number">0x6</span>) ^ <span class="number">0x26</span> ^ key[i])+<span class="number">9</span>)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#flag&#123;_p1us_babyL0gin_pPpPpPpPp_p1us_&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Reverse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Reverse </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汤姆的苹果——bugku</title>
      <link href="/2022/09/27/%E6%B1%A4%E5%A7%86%E7%9A%84%E8%8B%B9%E6%9E%9C%E2%80%94%E2%80%94bugku/"/>
      <url>/2022/09/27/%E6%B1%A4%E5%A7%86%E7%9A%84%E8%8B%B9%E6%9E%9C%E2%80%94%E2%80%94bugku/</url>
      
        <content type="html"><![CDATA[<h1 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h1><p>首先，看<strong>MainActivity</strong>，猜测b中<strong>handleMessage</strong>是判断最终条件，<strong>onClick</strong>是检验flag方法</p><p><img src="/2022/09/27/%E6%B1%A4%E5%A7%86%E7%9A%84%E8%8B%B9%E6%9E%9C%E2%80%94%E2%80%94bugku/1664414144444.png" alt="MainActivity"></p><p>然后查看引用输入字符串obj的a类中，<strong>doInBackground</strong>应该是对输入字符串进行解密</p><p><img src="/2022/09/27/%E6%B1%A4%E5%A7%86%E7%9A%84%E8%8B%B9%E6%9E%9C%E2%80%94%E2%80%94bugku/1664414485829.png" alt="类a"></p><p>查看<strong>doInBackground</strong>引用的b类</p><p><img src="/2022/09/27/%E6%B1%A4%E5%A7%86%E7%9A%84%E8%8B%B9%E6%9E%9C%E2%80%94%E2%80%94bugku/1664414746576.png" alt="类b"></p><p>可以看出这是对字符串的一个异或</p><p>再去看a类中的<strong>onPostExcute</strong>方法，以及除了a、b类以外的c类，猜测这是一起为最后为检测结果进行判定的方法</p><p><img src="/2022/09/27/%E6%B1%A4%E5%A7%86%E7%9A%84%E8%8B%B9%E6%9E%9C%E2%80%94%E2%80%94bugku/1664414837113.png" alt="目录"></p><p>c类，可以看出这是一个比较结果的方法</p><p><img src="/2022/09/27/%E6%B1%A4%E5%A7%86%E7%9A%84%E8%8B%B9%E6%9E%9C%E2%80%94%E2%80%94bugku/1664414874587.png" alt="类c"></p><h1 id="程序逻辑"><a href="#程序逻辑" class="headerlink" title="程序逻辑"></a>程序逻辑</h1><p>输入flag–&gt;进入a类不断进入b类进行循环–&gt;进入c类进行结果比较</p><h1 id="解题脚本"><a href="#解题脚本" class="headerlink" title="解题脚本"></a>解题脚本</h1><p>由于按照程序原本的逻辑，我写出的脚本无法生成flag，且网上暂时没有该题的writeup，我只好使用另一种方法。</p><p>程序的逻辑是将字符串不断地进行异或，最后的结果其实相当于进行一次异或，而这一次异或的数字是未知，因此可以写一个循环去爆破它。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">final = [<span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;&#125;&#x27;</span>, <span class="string">&#x27;&#123;&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;v&#x27;</span>, <span class="string">&#x27;&#125;&#x27;</span>, <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;$&#x27;</span>, <span class="string">&#x27;%&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;v&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;v&#x27;</span>,</span><br><span class="line">         <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;a&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    num = [<span class="number">0</span>] * <span class="number">24</span></span><br><span class="line">    f = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> q <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(final)):</span><br><span class="line">        num[q] = (<span class="built_in">ord</span>(final[q]) ^ i)</span><br><span class="line">        <span class="keyword">if</span> num[q] &gt;= <span class="number">128</span>:</span><br><span class="line">            f = <span class="number">1</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> num[q] &lt;= <span class="number">31</span>:</span><br><span class="line">            f = <span class="number">1</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> f == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;the i is: &quot;</span>, i)</span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> num:</span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">chr</span>(t), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line"><span class="comment"># the i is:  27</span></span><br><span class="line"><span class="comment"># akf`|mfntoa?&gt;543564mlmoz</span></span><br><span class="line"><span class="comment"># the i is:  28</span></span><br><span class="line"><span class="comment"># flag&#123;jaishf89234213jkjh&#125;</span></span><br><span class="line"><span class="comment"># the i is:  29</span></span><br><span class="line"><span class="comment"># gm`fzk`hrig98325302kjki|</span></span><br><span class="line"><span class="comment"># the i is:  30</span></span><br><span class="line"><span class="comment"># dnceyhckqjd:;016031hihj</span></span><br><span class="line"><span class="comment"># the i is:  31</span></span><br><span class="line"><span class="comment"># eobdxibjpke;:107120ihik~</span></span><br></pre></td></tr></table></figure><p><strong>flag{jaishf89234213jkjh}</strong></p>]]></content>
      
      
      <categories>
          
          <category> Reverse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Reverse </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/09/27/hello-world/"/>
      <url>/2022/09/27/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;Hello, my name is biubiubiu&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
