<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>陕西省赛2023</title>
      <link href="/2023/07/02/%E9%99%95%E8%A5%BF%E7%9C%81%E8%B5%9B2023/"/>
      <url>/2023/07/02/%E9%99%95%E8%A5%BF%E7%9C%81%E8%B5%9B2023/</url>
      
        <content type="html"><![CDATA[<h1 id="BadCoffee"><a href="#BadCoffee" class="headerlink" title="BadCoffee"></a>BadCoffee</h1><p>js混淆逆向</p><p>反混淆后的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">table</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> _0x293934 = [<span class="string">&#x27;8QWULJr&#x27;</span>, <span class="string">&#x27;414933buASiW&#x27;</span>, <span class="string">&#x27;log&#x27;</span>, <span class="string">&#x27;uuIPk&#x27;</span>, <span class="string">&#x27;2hWBkZw&#x27;</span>, </span><br><span class="line">            <span class="string">&#x27;50830UgfzNJ&#x27;</span>, <span class="string">&#x27;search&#x27;</span>, <span class="string">&#x27;toString&#x27;</span>, <span class="string">&#x27;nPakj&#x27;</span>, <span class="string">&#x27;118810yaFCRd&#x27;</span>, </span><br><span class="line">            <span class="string">&#x27;apply&#x27;</span>, <span class="string">&#x27;YES&#x27;</span>, <span class="string">&#x27;3279144wTrqht&#x27;</span>, <span class="string">&#x27;FRwAT&#x27;</span>, <span class="string">&#x27;204nSqkLC&#x27;</span>, </span><br><span class="line">            <span class="string">&#x27;kGYrv&#x27;</span>, <span class="string">&#x27;XmyuE&#x27;</span>, <span class="string">&#x27;2810463LgnfkD&#x27;</span>, <span class="string">&#x27;qGnaj&#x27;</span>, <span class="string">&#x27;1665531censkz&#x27;</span>, </span><br><span class="line">            <span class="string">&#x27;flag&#123;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&#125;&#x27;</span>, <span class="string">&#x27;1166JQjGyF&#x27;</span>, </span><br><span class="line">            <span class="string">&#x27;(((.+)+)+)+$&#x27;</span>, <span class="string">&#x27;TKKGW&#x27;</span>, <span class="string">&#x27;charAt&#x27;</span>, <span class="string">&#x27;constructor&#x27;</span>, <span class="string">&#x27;5882863UAzTOx&#x27;</span>];</span><br><span class="line">    table = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> _0x293934;</span><br><span class="line">    &#125;</span><br><span class="line">    ;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">table</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">table_arg_sub_307</span>(<span class="params">_0x21da69, _0x31c369</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> _0x1d6e59 = <span class="title function_">table</span>();</span><br><span class="line">    <span class="keyword">return</span> table_arg_sub_307 = <span class="keyword">function</span>(<span class="params">_0x52956b, _0x1581c3</span>) &#123;</span><br><span class="line">        _0x52956b = _0x52956b - (<span class="number">307</span>);</span><br><span class="line">        <span class="keyword">var</span> _0x62d41 = _0x1d6e59[_0x52956b];</span><br><span class="line">        <span class="keyword">return</span> _0x62d41;</span><br><span class="line">    &#125;</span><br><span class="line">    ,</span><br><span class="line">    <span class="title function_">table_arg_sub_307</span>(_0x21da69, _0x31c369);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">xorFunction</span>(<span class="params">_0x53b7bb, _0x590286</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> _0xafde9a = table_arg_sub_307</span><br><span class="line">      , _0x324e3a = &#123;&#125;;</span><br><span class="line">    _0x324e3a[<span class="string">&#x27;toString&#x27;</span>] = <span class="keyword">function</span>(<span class="params">_0x318579, _0x2c8042</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> _0x318579 ^ _0x2c8042;</span><br><span class="line">    &#125;</span><br><span class="line">    ;</span><br><span class="line">    <span class="keyword">var</span> _0x3ba534 = _0x324e3a;</span><br><span class="line">    <span class="keyword">return</span> _0x3ba534[<span class="string">&#x27;nPakj&#x27;</span>](_0x53b7bb, _0x590286);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">enc</span>(<span class="params">flag</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> _0x137834 = table_arg_sub_307</span><br><span class="line">      , _0x3aaed1 = &#123;</span><br><span class="line">        <span class="string">&#x27;XmyuE&#x27;</span>: <span class="keyword">function</span>(<span class="params">_0x57b977, _0x20fa18, _0x570bf6</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">_0x57b977</span>(_0x20fa18, _0x570bf6);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">      , xor_array = []</span><br><span class="line">      , array1 = [<span class="number">233</span>, <span class="number">129</span>, <span class="number">127</span>, <span class="number">238</span>, <span class="number">145</span>, <span class="number">144</span>, <span class="number">11</span>, <span class="number">43</span>, <span class="number">87</span>, <span class="number">134</span>, <span class="number">243</span>, <span class="number">158</span>, <span class="number">197</span>, <span class="number">216</span>, <span class="number">111</span>, <span class="number">136</span>, <span class="number">152</span>, <span class="number">29</span>, <span class="number">204</span>, <span class="number">31</span>, <span class="number">26</span>, <span class="number">228</span>, <span class="number">39</span>, <span class="number">148</span>, <span class="number">215</span>, <span class="number">220</span>, <span class="number">90</span>, <span class="number">76</span>, <span class="number">251</span>, <span class="number">57</span>, <span class="number">183</span>, <span class="number">184</span>, <span class="number">150</span>, <span class="number">157</span>, <span class="number">156</span>, <span class="number">176</span>, <span class="number">13</span>, <span class="number">41</span>, <span class="number">30</span>, <span class="number">86</span>, <span class="number">244</span>, <span class="number">8</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">42</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// xor_array[i] = _0x3aaed1[_0x137834(0x142)](xorFunction, array1[&#x27;at&#x27;](i), flag[_0x137834(0x14a)](i)[&#x27;charCodeAt&#x27;]());</span></span><br><span class="line">        xor_array[i] = <span class="title class_">XmyuE</span>(xorFunction, array1[<span class="string">&#x27;at&#x27;</span>](i), flag[<span class="string">&#x27;charAt&#x27;</span>](i)[<span class="string">&#x27;charCodeAt&#x27;</span>]());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">42</span>; i++) &#123;</span><br><span class="line">        xor_array[i] = <span class="title function_">xorFunction</span>(xor_array[<span class="string">&#x27;at&#x27;</span>](i), array1[<span class="string">&#x27;at&#x27;</span>](<span class="number">41</span> - i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(xor_array);</span><br><span class="line">    <span class="keyword">return</span> xor_array;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fff</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> table_arg_sub_307_ = table_arg_sub_307</span><br><span class="line">      , functionTable = &#123;</span><br><span class="line">        <span class="string">&#x27;uuIPk&#x27;</span>: <span class="title function_">table_arg_sub_307_</span>(<span class="number">0x148</span>),</span><br><span class="line">        <span class="string">&#x27;qGnaj&#x27;</span>: <span class="keyword">function</span>(<span class="params">_0x5bc07b, _0x400faa, _0x441f85</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">_0x5bc07b</span>(_0x400faa, _0x441f85);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;BnVXl&#x27;</span>: <span class="keyword">function</span>(<span class="params">_0x189883</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">_0x189883</span>();</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;dhkyF&#x27;</span>: <span class="title function_">table_arg_sub_307_</span>(<span class="number">0x146</span>),</span><br><span class="line">        <span class="string">&#x27;FRwAT&#x27;</span>: <span class="keyword">function</span>(<span class="params">_0x3ab36f, _0x124b7f</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">_0x3ab36f</span>(_0x124b7f);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;kGYrv&#x27;</span>: <span class="keyword">function</span>(<span class="params">_0x127f5c, _0x4a909c</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> _0x127f5c &lt; _0x4a909c;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;MrEod&#x27;</span>: <span class="keyword">function</span>(<span class="params">_0x3d6620, _0x297ded</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> _0x3d6620 != _0x297ded;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;arYUV&#x27;</span>: <span class="string">&#x27;Error&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;TKKGW&#x27;</span>: <span class="title function_">table_arg_sub_307_</span>(<span class="number">0x13d</span>)</span><br><span class="line">    &#125;</span><br><span class="line">      , _0x5a5ca7 = (<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> _0x201045 = !![];</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">_0x69fca7, _0x2b8ad0</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> _0x5c3c95 = _0x201045 ? <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> _0x579f2d = table_arg_sub_307;</span><br><span class="line">                <span class="keyword">if</span> (_0x2b8ad0) &#123;</span><br><span class="line">                    <span class="keyword">var</span> _0xd4d9a8 = _0x2b8ad0[<span class="title function_">_0x579f2d</span>(<span class="number">0x13c</span>)](_0x69fca7, <span class="variable language_">arguments</span>);</span><br><span class="line">                    <span class="keyword">return</span> _0x2b8ad0 = <span class="literal">null</span>,</span><br><span class="line">                    _0xd4d9a8;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            : <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">            ;</span><br><span class="line">            <span class="keyword">return</span> _0x201045 = ![],</span><br><span class="line">            _0x5c3c95;</span><br><span class="line">        &#125;</span><br><span class="line">        ;</span><br><span class="line">    &#125;())</span><br><span class="line">      , _0x59c26e = functionTable[<span class="title function_">table_arg_sub_307_</span>(<span class="number">0x144</span>)](_0x5a5ca7, <span class="variable language_">this</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> _0x25f3ae = table_arg_sub_307_;</span><br><span class="line">        <span class="keyword">return</span> _0x59c26e[<span class="string">&#x27;toString&#x27;</span>]()[<span class="title function_">_0x25f3ae</span>(<span class="number">0x138</span>)](functionTable[<span class="string">&#x27;uuIPk&#x27;</span>])[<span class="title function_">_0x25f3ae</span>(<span class="number">0x139</span>)]()[<span class="title function_">_0x25f3ae</span>(<span class="number">0x14b</span>)](_0x59c26e)[<span class="title function_">_0x25f3ae</span>(<span class="number">0x138</span>)](functionTable[<span class="title function_">_0x25f3ae</span>(<span class="number">0x135</span>)]);</span><br><span class="line">    &#125;);</span><br><span class="line">    functionTable[<span class="string">&#x27;BnVXl&#x27;</span>](_0x59c26e);</span><br><span class="line">    <span class="comment">// var _0xe4960c = functionTable[&#x27;dhkyF&#x27;]</span></span><br><span class="line">     <span class="keyword">var</span> _0xe4960c = <span class="string">&quot;flag&#123;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&#125;&quot;</span></span><br><span class="line">      <span class="comment">// , _0x55dae6 = functionTable[table_arg_sub_307_(0x13f)](enc, _0xe4960c)</span></span><br><span class="line">      , _0x55dae6 = <span class="title function_">enc</span>(_0xe4960c)</span><br><span class="line">      , _0xbb5ecd = [ <span class="number">135</span>, <span class="number">25</span>, <span class="number">72</span>, <span class="number">151</span>, <span class="number">195</span>, <span class="number">212</span>, <span class="number">228</span>, <span class="number">212</span>, <span class="number">250</span>, <span class="number">101</span>, <span class="number">39</span>, <span class="number">77</span>, <span class="number">163</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">167</span>, <span class="number">119</span>, <span class="number">184</span>, <span class="number">7</span>, <span class="number">77</span>, <span class="number">144</span>, <span class="number">154</span>, <span class="number">93</span>, <span class="number">10</span>, <span class="number">185</span>, <span class="number">48</span>, <span class="number">179</span>, <span class="number">77</span>, <span class="number">71</span>, <span class="number">163</span>, <span class="number">67</span>, <span class="number">61</span>, <span class="number">113</span>, <span class="number">156</span>, <span class="number">196</span>, <span class="number">136</span>, <span class="number">239</span>, <span class="number">241</span>, <span class="number">128</span>, <span class="number">93</span>, <span class="number">84</span>, <span class="number">156</span>];</span><br><span class="line">    <span class="comment">// for (let i = -0x15a * -0x4 + -0x709 * 0x2 + 0x8aa * 0x1; functionTable[table_arg_sub_307_(0x141)](i, -0x2351 * 0x1 + 0x67f + 0x1cfc); i++) &#123;</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">42</span> ; i++) &#123;</span><br><span class="line">        <span class="comment">// if (functionTable[&#x27;MrEod&#x27;](_0x55dae6[&#x27;at&#x27;](i), _0xbb5ecd[&#x27;at&#x27;](i))) &#123;</span></span><br><span class="line">           <span class="keyword">if</span> (_0x55dae6[<span class="string">&#x27;at&#x27;</span>](i) != _0xbb5ecd[<span class="string">&#x27;at&#x27;</span>](i)) &#123; </span><br><span class="line">            <span class="variable language_">console</span>[<span class="title function_">table_arg_sub_307_</span>(<span class="number">0x134</span>)](functionTable[<span class="string">&#x27;arYUV&#x27;</span>]);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>[<span class="title function_">table_arg_sub_307_</span>(<span class="number">0x134</span>)](functionTable[<span class="title function_">table_arg_sub_307_</span>(<span class="number">0x149</span>)]);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fff</span>();</span><br></pre></td></tr></table></figure><p>函数表：(部分函数的调用通过这个函数表获取)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">table</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> _0x293934 = [<span class="string">&#x27;8QWULJr&#x27;</span>, <span class="string">&#x27;414933buASiW&#x27;</span>, <span class="string">&#x27;log&#x27;</span>, <span class="string">&#x27;uuIPk&#x27;</span>, <span class="string">&#x27;2hWBkZw&#x27;</span>, </span><br><span class="line">            <span class="string">&#x27;50830UgfzNJ&#x27;</span>, <span class="string">&#x27;search&#x27;</span>, <span class="string">&#x27;toString&#x27;</span>, <span class="string">&#x27;nPakj&#x27;</span>, <span class="string">&#x27;118810yaFCRd&#x27;</span>, </span><br><span class="line">            <span class="string">&#x27;apply&#x27;</span>, <span class="string">&#x27;YES&#x27;</span>, <span class="string">&#x27;3279144wTrqht&#x27;</span>, <span class="string">&#x27;FRwAT&#x27;</span>, <span class="string">&#x27;204nSqkLC&#x27;</span>, </span><br><span class="line">            <span class="string">&#x27;kGYrv&#x27;</span>, <span class="string">&#x27;XmyuE&#x27;</span>, <span class="string">&#x27;2810463LgnfkD&#x27;</span>, <span class="string">&#x27;qGnaj&#x27;</span>, <span class="string">&#x27;1665531censkz&#x27;</span>, </span><br><span class="line">            <span class="string">&#x27;flag&#123;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&#125;&#x27;</span>, <span class="string">&#x27;1166JQjGyF&#x27;</span>, </span><br><span class="line">            <span class="string">&#x27;(((.+)+)+)+$&#x27;</span>, <span class="string">&#x27;TKKGW&#x27;</span>, <span class="string">&#x27;charAt&#x27;</span>, <span class="string">&#x27;constructor&#x27;</span>, <span class="string">&#x27;5882863UAzTOx&#x27;</span>];</span><br><span class="line">    table = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> _0x293934;</span><br><span class="line">    &#125;</span><br><span class="line">    ;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">table</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">table_arg_sub_307</span>(<span class="params">_0x21da69, _0x31c369</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> _0x1d6e59 = <span class="title function_">table</span>();</span><br><span class="line">    <span class="keyword">return</span> table_arg_sub_307 = <span class="keyword">function</span>(<span class="params">_0x52956b, _0x1581c3</span>) &#123;</span><br><span class="line">        _0x52956b = _0x52956b - (<span class="number">307</span>);</span><br><span class="line">        <span class="keyword">var</span> _0x62d41 = _0x1d6e59[_0x52956b];</span><br><span class="line">        <span class="keyword">return</span> _0x62d41;</span><br><span class="line">    &#125;</span><br><span class="line">    ,</span><br><span class="line">    <span class="title function_">table_arg_sub_307</span>(_0x21da69, _0x31c369);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主逻辑函数：</p><p>同样也有一个局部变量的函数表。</p><p>主逻辑为先enc函数加密<code>_0xe4960c</code>，即flag，然后与结果比对。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fff</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> table_arg_sub_307_ = table_arg_sub_307</span><br><span class="line">      , functionTable = &#123;</span><br><span class="line">        <span class="string">&#x27;uuIPk&#x27;</span>: <span class="title function_">table_arg_sub_307_</span>(<span class="number">0x148</span>),</span><br><span class="line">        <span class="string">&#x27;qGnaj&#x27;</span>: <span class="keyword">function</span>(<span class="params">_0x5bc07b, _0x400faa, _0x441f85</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">_0x5bc07b</span>(_0x400faa, _0x441f85);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;BnVXl&#x27;</span>: <span class="keyword">function</span>(<span class="params">_0x189883</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">_0x189883</span>();</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;dhkyF&#x27;</span>: <span class="title function_">table_arg_sub_307_</span>(<span class="number">0x146</span>),</span><br><span class="line">        <span class="string">&#x27;FRwAT&#x27;</span>: <span class="keyword">function</span>(<span class="params">_0x3ab36f, _0x124b7f</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">_0x3ab36f</span>(_0x124b7f);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;kGYrv&#x27;</span>: <span class="keyword">function</span>(<span class="params">_0x127f5c, _0x4a909c</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> _0x127f5c &lt; _0x4a909c;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;MrEod&#x27;</span>: <span class="keyword">function</span>(<span class="params">_0x3d6620, _0x297ded</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> _0x3d6620 != _0x297ded;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;arYUV&#x27;</span>: <span class="string">&#x27;Error&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;TKKGW&#x27;</span>: <span class="title function_">table_arg_sub_307_</span>(<span class="number">0x13d</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">// var _0xe4960c = functionTable[&#x27;dhkyF&#x27;]</span></span><br><span class="line">     <span class="keyword">var</span> _0xe4960c = <span class="string">&quot;flag&#123;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&#125;&quot;</span></span><br><span class="line">      <span class="comment">// , _0x55dae6 = functionTable[table_arg_sub_307_(0x13f)](enc, _0xe4960c)</span></span><br><span class="line">      , _0x55dae6 = <span class="title function_">enc</span>(_0xe4960c)</span><br><span class="line">      , _0xbb5ecd = [ <span class="number">135</span>, <span class="number">25</span>, <span class="number">72</span>, <span class="number">151</span>, <span class="number">195</span>, <span class="number">212</span>, <span class="number">228</span>, <span class="number">212</span>, <span class="number">250</span>, <span class="number">101</span>, <span class="number">39</span>, <span class="number">77</span>, <span class="number">163</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">167</span>, <span class="number">119</span>, <span class="number">184</span>, <span class="number">7</span>, <span class="number">77</span>, <span class="number">144</span>, <span class="number">154</span>, <span class="number">93</span>, <span class="number">10</span>, <span class="number">185</span>, <span class="number">48</span>, <span class="number">179</span>, <span class="number">77</span>, <span class="number">71</span>, <span class="number">163</span>, <span class="number">67</span>, <span class="number">61</span>, <span class="number">113</span>, <span class="number">156</span>, <span class="number">196</span>, <span class="number">136</span>, <span class="number">239</span>, <span class="number">241</span>, <span class="number">128</span>, <span class="number">93</span>, <span class="number">84</span>, <span class="number">156</span>];</span><br><span class="line">    <span class="comment">// for (let i = -0x15a * -0x4 + -0x709 * 0x2 + 0x8aa * 0x1; functionTable[table_arg_sub_307_(0x141)](i, -0x2351 * 0x1 + 0x67f + 0x1cfc); i++) &#123;</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">42</span> ; i++) &#123;</span><br><span class="line">        <span class="comment">// if (functionTable[&#x27;MrEod&#x27;](_0x55dae6[&#x27;at&#x27;](i), _0xbb5ecd[&#x27;at&#x27;](i))) &#123;</span></span><br><span class="line">           <span class="keyword">if</span> (_0x55dae6[<span class="string">&#x27;at&#x27;</span>](i) != _0xbb5ecd[<span class="string">&#x27;at&#x27;</span>](i)) &#123; </span><br><span class="line">            <span class="variable language_">console</span>[<span class="title function_">table_arg_sub_307_</span>(<span class="number">0x134</span>)](functionTable[<span class="string">&#x27;arYUV&#x27;</span>]);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>[<span class="title function_">table_arg_sub_307_</span>(<span class="number">0x134</span>)](functionTable[<span class="title function_">table_arg_sub_307_</span>(<span class="number">0x149</span>)]);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>enc函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">xorFunction</span>(<span class="params">_0x53b7bb, _0x590286</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> _0xafde9a = table_arg_sub_307</span><br><span class="line">      , _0x324e3a = &#123;&#125;;</span><br><span class="line">    _0x324e3a[<span class="string">&#x27;toString&#x27;</span>] = <span class="keyword">function</span>(<span class="params">_0x318579, _0x2c8042</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> _0x318579 ^ _0x2c8042;</span><br><span class="line">    &#125;</span><br><span class="line">    ;</span><br><span class="line">    <span class="keyword">var</span> _0x3ba534 = _0x324e3a;</span><br><span class="line">    <span class="keyword">return</span> _0x3ba534[<span class="string">&#x27;nPakj&#x27;</span>](_0x53b7bb, _0x590286);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">enc</span>(<span class="params">flag</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> _0x137834 = table_arg_sub_307</span><br><span class="line">      , _0x3aaed1 = &#123;</span><br><span class="line">        <span class="string">&#x27;XmyuE&#x27;</span>: <span class="keyword">function</span>(<span class="params">_0x57b977, _0x20fa18, _0x570bf6</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">_0x57b977</span>(_0x20fa18, _0x570bf6);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">      , xor_array = []</span><br><span class="line">      , array1 = [<span class="number">233</span>, <span class="number">129</span>, <span class="number">127</span>, <span class="number">238</span>, <span class="number">145</span>, <span class="number">144</span>, <span class="number">11</span>, <span class="number">43</span>, <span class="number">87</span>, <span class="number">134</span>, <span class="number">243</span>, <span class="number">158</span>, <span class="number">197</span>, <span class="number">216</span>, <span class="number">111</span>, <span class="number">136</span>, <span class="number">152</span>, <span class="number">29</span>, <span class="number">204</span>, <span class="number">31</span>, <span class="number">26</span>, <span class="number">228</span>, <span class="number">39</span>, <span class="number">148</span>, <span class="number">215</span>, <span class="number">220</span>, <span class="number">90</span>, <span class="number">76</span>, <span class="number">251</span>, <span class="number">57</span>, <span class="number">183</span>, <span class="number">184</span>, <span class="number">150</span>, <span class="number">157</span>, <span class="number">156</span>, <span class="number">176</span>, <span class="number">13</span>, <span class="number">41</span>, <span class="number">30</span>, <span class="number">86</span>, <span class="number">244</span>, <span class="number">8</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">42</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// xor_array[i] = _0x3aaed1[_0x137834(0x142)](xorFunction, array1[&#x27;at&#x27;](i), flag[_0x137834(0x14a)](i)[&#x27;charCodeAt&#x27;]());</span></span><br><span class="line">        xor_array[i] = <span class="title class_">XmyuE</span>(xorFunction, array1[<span class="string">&#x27;at&#x27;</span>](i), flag[<span class="string">&#x27;charAt&#x27;</span>](i)[<span class="string">&#x27;charCodeAt&#x27;</span>]());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">42</span>; i++) &#123;</span><br><span class="line">        xor_array[i] = <span class="title function_">xorFunction</span>(xor_array[<span class="string">&#x27;at&#x27;</span>](i), array1[<span class="string">&#x27;at&#x27;</span>](<span class="number">41</span> - i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(xor_array);</span><br><span class="line">    <span class="keyword">return</span> xor_array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">array1 = [<span class="number">233</span>, <span class="number">129</span>, <span class="number">127</span>, <span class="number">238</span>, <span class="number">145</span>, <span class="number">144</span>, <span class="number">11</span>, <span class="number">43</span>, <span class="number">87</span>, <span class="number">134</span>, <span class="number">243</span>, <span class="number">158</span>, <span class="number">197</span>, <span class="number">216</span>, <span class="number">111</span>, <span class="number">136</span>, <span class="number">152</span>, <span class="number">29</span>, <span class="number">204</span>, <span class="number">31</span>, <span class="number">26</span>, <span class="number">228</span>, <span class="number">39</span>, <span class="number">148</span>, <span class="number">215</span>, <span class="number">220</span>, <span class="number">90</span>, <span class="number">76</span>, <span class="number">251</span>, <span class="number">57</span>, <span class="number">183</span>, <span class="number">184</span>, <span class="number">150</span>, <span class="number">157</span>, <span class="number">156</span>, <span class="number">176</span>, <span class="number">13</span>, <span class="number">41</span>, <span class="number">30</span>, <span class="number">86</span>, <span class="number">244</span>, <span class="number">8</span>]</span><br><span class="line">result = [<span class="number">135</span>, <span class="number">25</span>, <span class="number">72</span>, <span class="number">151</span>, <span class="number">195</span>, <span class="number">212</span>, <span class="number">228</span>, <span class="number">212</span>, <span class="number">250</span>, <span class="number">101</span>, <span class="number">39</span>, <span class="number">77</span>, <span class="number">163</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">167</span>, <span class="number">119</span>, <span class="number">184</span>, <span class="number">7</span>, <span class="number">77</span>, <span class="number">144</span>, <span class="number">154</span>, <span class="number">93</span>, <span class="number">10</span>, <span class="number">185</span>, <span class="number">48</span>, <span class="number">179</span>, <span class="number">77</span>, <span class="number">71</span>, <span class="number">163</span>, <span class="number">67</span>, <span class="number">61</span>, <span class="number">113</span>, <span class="number">156</span>, <span class="number">196</span>, <span class="number">136</span>, <span class="number">239</span>, <span class="number">241</span>, <span class="number">128</span>, <span class="number">93</span>, <span class="number">84</span>, <span class="number">156</span>]</span><br><span class="line"><span class="keyword">let</span> flag = []</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">42</span>; i++) &#123; </span><br><span class="line">    flag.<span class="title function_">push</span>(result[i] ^ array1[i] ^ array1[<span class="number">41</span> - i])</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(...flag))</span><br></pre></td></tr></table></figure><h2 id="其他师傅的思路技巧"><a href="#其他师傅的思路技巧" class="headerlink" title="其他师傅的思路技巧"></a>其他师傅的思路技巧</h2><p><img src="/%E9%99%95%E8%A5%BF%E7%9C%81%E8%B5%9B2023/image-20230702175838424.png" alt="其他师傅的思路技巧"></p><h1 id="Web-amp-Assembly"><a href="#Web-amp-Assembly" class="headerlink" title="Web&amp;Assembly"></a>Web&amp;Assembly</h1><h2 id="两种逆向方法"><a href="#两种逆向方法" class="headerlink" title="两种逆向方法"></a>两种逆向方法</h2><h3 id="wabt"><a href="#wabt" class="headerlink" title="wabt"></a>wabt</h3><p><code>./wasm2c index.wasm -o index.c</code></p><p><code>gcc -c index.c -o index.o</code></p><p>将.wasm文件转为.o文件，进入IDA分析。</p><h3 id="JEB-Ghidra"><a href="#JEB-Ghidra" class="headerlink" title="JEB + Ghidra"></a>JEB + Ghidra</h3><p><img src="/%E9%99%95%E8%A5%BF%E7%9C%81%E8%B5%9B2023/image-20230702211829629.png" alt="JEB查看main函数"></p><p>Ghidra需要安装<a href="https://github.com/nneonneo/ghidra-wasm-plugin">ghidra-wasm-plugin</a>插件。</p><p><img src="/%E9%99%95%E8%A5%BF%E7%9C%81%E8%B5%9B2023/image-20230702211921280.png" alt="Ghidra查看check函数"></p><p><img src="/%E9%99%95%E8%A5%BF%E7%9C%81%E8%B5%9B2023/image-20230702211949839.png" alt="Ghidra查看do_something函数"></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>由提示可知，check函数的输入：</p><p><img src="/%E9%99%95%E8%A5%BF%E7%9C%81%E8%B5%9B2023/image-20230702212048106.png" alt="题目"></p><p>先看<code>do_something</code>，逻辑为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">do_something</span>(<span class="params">par, a, b, c, d</span>):</span><br><span class="line">par[d] = (par[d] ^ par[a] + par[c]) &amp; <span class="number">0xFF</span></span><br><span class="line">par[c] = (par[c] ^ par[a] + par[b]) &amp; <span class="number">0xFF</span></span><br><span class="line">par[b] = (par[b] ^ par[c] + par[d]) &amp; <span class="number">0xFF</span></span><br><span class="line">par[a] = (par[a] ^ par[b] + par[d]) &amp; <span class="number">0xFF</span></span><br></pre></td></tr></table></figure><p>再看<code>main</code>，逻辑为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">secret, pwd, account</span>):</span><br><span class="line">    s = <span class="string">&quot;0123456789abcdef&quot;</span></span><br><span class="line">    var = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(pwd), <span class="number">8</span>):</span><br><span class="line">        array = []</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">            array.append((secret[j] ^ pwd[j + i]) &amp; <span class="number">0xFF</span>)</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x72</span>):</span><br><span class="line">        do_something(array, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">        do_something(array, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>)</span><br><span class="line">        do_something(array, <span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">        do_something(array, <span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">7</span>)</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">            num = array[j]</span><br><span class="line">            var = var | s[num/<span class="number">16</span>] == account[(j + i) * <span class="number">2</span>] | s[num%<span class="number">16</span>] == account[(j + i) * <span class="number">2</span> + <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> var</span><br></pre></td></tr></table></figure><h2 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">re_do</span>(<span class="params">par, a, b, c, d</span>):</span><br><span class="line">    par[a] = (par[a] ^ par[b] + par[d]) &amp; <span class="number">0xFF</span></span><br><span class="line">    par[b] = (par[b] ^ par[c] + par[d]) &amp; <span class="number">0xFF</span></span><br><span class="line">    par[c] = (par[c] ^ par[a] + par[b]) &amp; <span class="number">0xFF</span></span><br><span class="line">    par[d] = (par[d] ^ par[a] + par[c]) &amp; <span class="number">0xFF</span></span><br><span class="line"></span><br><span class="line">s = <span class="string">&quot;0123456789abcdef&quot;</span></span><br><span class="line">key = <span class="string">&quot;114!514!&quot;</span></span><br><span class="line">result = <span class="string">&quot;91fba5ccfef6e0905eeeb47940d25543c286b10de778fbb268ab7580414c0758&quot;</span></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line">array = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(result) // <span class="number">2</span>):</span><br><span class="line">    array.append(s.index(result[i * <span class="number">2</span>]) * <span class="number">16</span> + s.index((result[i * <span class="number">2</span> + <span class="number">1</span>])))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(array), <span class="number">8</span>):</span><br><span class="line">    a = array[i:i+<span class="number">8</span>]</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x72</span>):</span><br><span class="line">        re_do(a, <span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">7</span>)</span><br><span class="line">        re_do(a, <span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">        re_do(a, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>)</span><br><span class="line">        re_do(a, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(key)):</span><br><span class="line">        a[j] = (a[j] ^ <span class="built_in">ord</span>(key[j])) &amp; <span class="number">0xFF</span></span><br><span class="line">    flag += <span class="string">&quot;&quot;</span>.join(<span class="built_in">chr</span>(j) <span class="keyword">for</span> j <span class="keyword">in</span> a)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ciscn2023</title>
      <link href="/2023/06/27/ciscn2023/"/>
      <url>/2023/06/27/ciscn2023/</url>
      
        <content type="html"><![CDATA[<h1 id="babyre"><a href="#babyre" class="headerlink" title="babyre"></a>babyre</h1><p>snap.berkeley.edu打开xml文件。</p><p>修改设置<code>secret</code>变量的流程：</p><p><img src="/2023/06/27/ciscn2023/image-20230528171633929.png" alt="数据生成"></p><p>在其设置完<code>secret</code>后展示：</p><p><img src="/2023/06/27/ciscn2023/image-20230528171717916.png" alt="展示"></p><p>得到<code>secret</code>：</p><p><img src="/2023/06/27/ciscn2023/image-20230528171755771.png" alt="数据"></p><p>逆向如图所示的算法：</p><p><img src="/2023/06/27/ciscn2023/image-20230528171838714.png" alt="比对算法"></p><p>具体流程就是将输入的每两个字符进行异或，放置到<code>test</code>中，然后将<code>test[1:-1]</code>与<code>secret</code>比对</p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data=[<span class="number">102</span>,<span class="number">10</span>,<span class="number">13</span>,<span class="number">6</span>,<span class="number">28</span>,<span class="number">74</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">85</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">75</span>,<span class="number">20</span>,<span class="number">92</span>,<span class="number">92</span>,<span class="number">8</span>,<span class="number">28</span>,<span class="number">25</span>,<span class="number">81</span>,<span class="number">83</span>,<span class="number">7</span>,<span class="number">28</span>,<span class="number">76</span>,<span class="number">88</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">29</span>,<span class="number">73</span>,<span class="number">0</span>,<span class="number">86</span>,<span class="number">4</span>,<span class="number">87</span>,<span class="number">87</span>,<span class="number">82</span>,<span class="number">84</span>,<span class="number">85</span>,<span class="number">4</span>,<span class="number">85</span>,<span class="number">87</span>,<span class="number">30</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(data)):</span><br><span class="line">    data[i]^=data[i-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(data))</span><br></pre></td></tr></table></figure><h1 id="ezbyte"><a href="#ezbyte" class="headerlink" title="ezbyte"></a>ezbyte</h1><p><img src="/2023/06/27/ciscn2023/image-20230627181710006.png" alt="比对逻辑"></p><p>查看程序可以知道flag的前五位和后五位，然后将中间的分别放入r12、r13、r14、r15中，但之后的程序没有对r12有处理。</p><p>使用<code>readelf --debug-dump=frame ezbyte</code>或<code>readelf -Wwr ezbyte</code>获取Dwarf调试信息。</p><p><img src="/2023/06/27/ciscn2023/image-20230627181143587.png" alt="r12处理过程"></p><p>逻辑：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">r12, r13, r14, r15 = 0, 0, 0, 0</span><br><span class="line">r12 = (r12 + 1892739) ^ 1237891274917891239 ^ 2616514329260088143</span><br><span class="line">r13 = (r13 + 8971237) ^ 1209847170981118947 ^ 8502251781212277489</span><br><span class="line">r14 = (r14 + 1512312) ^ 1098791727398412397 ^ 2451795628338718684</span><br><span class="line">r15 = (r15 + 9123704) ^ 1890878197237214971 ^ 8722213363631027234</span><br><span class="line">r12 = r12 | r13 | r14 | r15</span><br></pre></td></tr></table></figure><p>最后结果应该是0。</p><h1 id="moveAside"><a href="#moveAside" class="headerlink" title="moveAside"></a>moveAside</h1><p>mov混淆，我不会。</p><p>但看wp和调试可以发现，程序应该是一个个字符变换，且用strcmp比较，在strcmp下断点，可以在栈中找到要比较的两个字符。</p><p>也可以使用<code>ltrace</code>获取程序的系统调用：</p><p>执行了一次<code>strcmp</code>就结束了：</p><p><img src="/2023/06/27/ciscn2023/image-20230628132748435.png" alt="输入1234567890"></p><p>执行了六次<code>strcmp</code>才结束：</p><p><img src="/2023/06/27/ciscn2023/image-20230628132910371.png" alt="输入flag{...}"></p><h2 id="构造输入输出表"><a href="#构造输入输出表" class="headerlink" title="构造输入输出表"></a>构造输入输出表</h2><p>可以输入<code>0123456789abcdefghijklmnopqrstuvwxyz&#123;&#125;-111</code>尝试获取输入输出表，且记录要比较的字符，并且每次比较时将更改变换后的字符使其比较成功。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(&quot;table:&quot;,Byte(0x8600154),Byte(0x860014C))</span><br><span class="line">PatchByte(0x8600154,Byte(0x860014C))</span><br></pre></td></tr></table></figure><h2 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">table = []</span><br><span class="line">final = []</span><br><span class="line"><span class="built_in">input</span> = <span class="string">&quot;0123456789abcdefghijklmnopqrstuvwxyz&#123;&#125;-&quot;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./out.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        line = f.readline()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> line:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> line.startswith(<span class="string">&quot;table&quot;</span>):</span><br><span class="line">            lines = line.split()</span><br><span class="line">            table.append(<span class="built_in">int</span>(lines[<span class="number">1</span>]))</span><br><span class="line">            final.append(<span class="built_in">int</span>(lines[<span class="number">2</span>]))</span><br><span class="line"><span class="built_in">print</span>(table)</span><br><span class="line"><span class="built_in">print</span>(final)</span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(final)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(table) - <span class="number">3</span>):</span><br><span class="line">        <span class="keyword">if</span> final[i] == table[j]:</span><br><span class="line">            flag += <span class="built_in">input</span>[j]</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># flag&#123;781dda4e-d910-4f06-8f5b-5c3755182337&#125;</span></span><br></pre></td></tr></table></figure><h1 id="ezAndroid"><a href="#ezAndroid" class="headerlink" title="ezAndroid"></a>ezAndroid</h1><p>不会，做的时候完全不知道要干嘛，看了wp才稍微懂些。</p><p>贴个其他师傅的wp👉[CISCN2023 wp | 心流 (natro92.github.io)](<a href="https://natro92.github.io/2023/05/29/CISCN2023">https://natro92.github.io/2023/05/29/CISCN2023</a> wp&#x2F;index.html)</p><h1 id="flutterror"><a href="#flutterror" class="headerlink" title="flutterror"></a>flutterror</h1><p>不会，再贴个其他师傅比较取巧的思路👉<a href="https://www.cnblogs.com/lordtianqiyi/articles/17438974.html">CISCN 2023 RE WP</a></p>]]></content>
      
      
      <categories>
          
          <category> Reverse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Reverse </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DASCTF2023二进制</title>
      <link href="/2023/06/23/DASCTF2023%E4%BA%8C%E8%BF%9B%E5%88%B6/"/>
      <url>/2023/06/23/DASCTF2023%E4%BA%8C%E8%BF%9B%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="careful"><a href="#careful" class="headerlink" title="careful"></a>careful</h1><p>直接上传微步云沙箱</p><p><img src="/2023/06/23/DASCTF2023%E4%BA%8C%E8%BF%9B%E5%88%B6/image-20230604203710296.png" alt="url"></p><h1 id="babyRe"><a href="#babyRe" class="headerlink" title="babyRe"></a>babyRe</h1><p>调试一下了解主要逻辑：</p><p><img src="/2023/06/23/DASCTF2023%E4%BA%8C%E8%BF%9B%E5%88%B6/2.PNG" alt="主逻辑"></p><p>v17的位置是处理输入字符串的；</p><p>StartAddress是最后进行比较的；</p><p>v17的位置的数据是经过前面有个函数异或解开的，带有一点混淆，处理后可以得到：</p><p><img src="/2023/06/23/DASCTF2023%E4%BA%8C%E8%BF%9B%E5%88%B6/1.PNG" alt="加密逻辑"></p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">key = [</span><br><span class="line">    <span class="number">93</span>, <span class="number">66</span>, <span class="number">98</span>, <span class="number">41</span>, <span class="number">3</span>, <span class="number">54</span>, <span class="number">71</span>, <span class="number">65</span>, <span class="number">21</span>, <span class="number">54</span></span><br><span class="line">]</span><br><span class="line">data = [</span><br><span class="line">    <span class="number">0xF7</span>, <span class="number">0x2E</span>, <span class="number">0x34</span>, <span class="number">0xF0</span>, <span class="number">0x72</span>, <span class="number">0xCF</span>, <span class="number">0x5E</span>, <span class="number">0x0A</span>, <span class="number">0xBB</span>, <span class="number">0xEC</span>,</span><br><span class="line">    <span class="number">0xB1</span>, <span class="number">0x2B</span>, <span class="number">0x70</span>, <span class="number">0x88</span>, <span class="number">0x88</span>, <span class="number">0xED</span>, <span class="number">0x46</span>, <span class="number">0x38</span>, <span class="number">0xDB</span>, <span class="number">0xDA</span>,</span><br><span class="line">    <span class="number">0x6C</span>, <span class="number">0xBD</span>, <span class="number">0xD4</span>, <span class="number">0x06</span>, <span class="number">0x77</span>, <span class="number">0xF2</span>, <span class="number">0xCF</span>, <span class="number">0x56</span>, <span class="number">0x88</span>, <span class="number">0xC6</span>,</span><br><span class="line">    <span class="number">0x31</span>, <span class="number">0xD2</span>, <span class="number">0xB7</span>, <span class="number">0x5A</span>, <span class="number">0xC1</span>, <span class="number">0x42</span>, <span class="number">0xB0</span>, <span class="number">0xF4</span>, <span class="number">0x48</span>, <span class="number">0x37</span>,</span><br><span class="line">    <span class="number">0xF5</span>, <span class="number">0x2C</span>, <span class="number">0xF5</span>, <span class="number">0x58</span></span><br><span class="line">]</span><br><span class="line">v4 = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x100</span>)]</span><br><span class="line"></span><br><span class="line">v7 = <span class="number">0</span></span><br><span class="line">v6 = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x100</span>):</span><br><span class="line">    v6 = (key[v7 % <span class="number">10</span>] + v4[i] + <span class="number">2</span> * v6) % <span class="number">0x100</span></span><br><span class="line">    v7 += <span class="number">1</span></span><br><span class="line">    v4[i], v4[v6] = v4[v6], v4[i]</span><br><span class="line"></span><br><span class="line">v7, v6 = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)):</span><br><span class="line">    v6 = (v7 + v6) % <span class="number">0x100</span></span><br><span class="line">    v7 = (v4[v6] + v7) % <span class="number">0x100</span></span><br><span class="line">    v4[v6], v4[v7] = v4[v7], v4[v6]</span><br><span class="line">    v12 = v4[(v4[v6] + v7 + v4[v7]) % <span class="number">0x100</span>]</span><br><span class="line">    data[i] -= i % <span class="number">0xD</span></span><br><span class="line">    data[i] %= <span class="number">0x100</span></span><br><span class="line">    data[i] ^= v12</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;</span>.join(<span class="built_in">chr</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> data))</span><br></pre></td></tr></table></figure><h1 id="ez-exe"><a href="#ez-exe" class="headerlink" title="ez_exe"></a>ez_exe</h1><h2 id="获取bin2"><a href="#获取bin2" class="headerlink" title="获取bin2"></a>获取bin2</h2><p>用pyinstxtractor生成pyc，再用pycdc反编译一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> wintypes</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">_STARTUPINFO</span>(<span class="title class_ inherited__">Structure</span>):</span><br><span class="line">    _fields_ = [</span><br><span class="line">        (<span class="string">&#x27;cb&#x27;</span>, c_ulong),</span><br><span class="line">        (<span class="string">&#x27;lpReserved&#x27;</span>, c_char_p),</span><br><span class="line">        (<span class="string">&#x27;lpDesktop&#x27;</span>, c_char_p),</span><br><span class="line">        (<span class="string">&#x27;lpTitle&#x27;</span>, c_char_p),</span><br><span class="line">        (<span class="string">&#x27;dwX&#x27;</span>, c_ulong),</span><br><span class="line">        (<span class="string">&#x27;dwY&#x27;</span>, c_ulong),</span><br><span class="line">        (<span class="string">&#x27;dwXSize&#x27;</span>, c_ulong),</span><br><span class="line">        (<span class="string">&#x27;dwYSize&#x27;</span>, c_ulong),</span><br><span class="line">        (<span class="string">&#x27;dwXCountChars&#x27;</span>, c_ulong),</span><br><span class="line">        (<span class="string">&#x27;dwYCountChars&#x27;</span>, c_ulong),</span><br><span class="line">        (<span class="string">&#x27;dwFillAttribute&#x27;</span>, c_ulong),</span><br><span class="line">        (<span class="string">&#x27;dwFlags&#x27;</span>, c_ulong),</span><br><span class="line">        (<span class="string">&#x27;wShowWindow&#x27;</span>, c_ushort),</span><br><span class="line">        (<span class="string">&#x27;cbReserved2&#x27;</span>, c_ushort),</span><br><span class="line">        (<span class="string">&#x27;lpReserved2&#x27;</span>, c_char_p),</span><br><span class="line">        (<span class="string">&#x27;hStdInput&#x27;</span>, c_ulong),</span><br><span class="line">        (<span class="string">&#x27;hStdOutput&#x27;</span>, c_ulong),</span><br><span class="line">        (<span class="string">&#x27;hStdError&#x27;</span>, c_ulong)]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">_PROCESS_INFORMATION</span>(<span class="title class_ inherited__">Structure</span>):</span><br><span class="line">    _fields_ = [</span><br><span class="line">        (<span class="string">&#x27;hProcess&#x27;</span>, c_void_p),</span><br><span class="line">        (<span class="string">&#x27;hThread&#x27;</span>, c_void_p),</span><br><span class="line">        (<span class="string">&#x27;dwProcessId&#x27;</span>, c_ulong),</span><br><span class="line">        (<span class="string">&#x27;dwThreadId&#x27;</span>, c_ulong)]</span><br><span class="line"> </span><br><span class="line">StartupInfo = _STARTUPINFO()</span><br><span class="line">ProcessInfo = _PROCESS_INFORMATION()</span><br><span class="line">key1 = <span class="built_in">bytes</span>(md5(<span class="string">b&#x27;bin1bin1bin1&#x27;</span>).hexdigest().encode())</span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&#x27;bin1&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line">arr = <span class="built_in">range</span>(<span class="built_in">len</span>(file))()</span><br><span class="line"><span class="built_in">open</span>(<span class="string">&#x27;bin1&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>).write(<span class="built_in">bytes</span>(arr))</span><br><span class="line">sleep(<span class="number">0</span>)</span><br><span class="line">bet = ctypes.windll.kernel32.CreateProcessA(<span class="string">b&#x27;bin1&#x27;</span>, ctypes.c_int(<span class="number">0</span>), ctypes.c_int(<span class="number">0</span>), ctypes.c_int(<span class="number">0</span>), ctypes.c_int(<span class="number">0</span>), ctypes.c_int(<span class="number">0</span>), ctypes.c_int(<span class="number">0</span>), ctypes.c_int(<span class="number">0</span>), byref(StartupInfo), byref(ProcessInfo))</span><br><span class="line">ctypes.windll.kernel32.WaitForSingleObject(ctypes.c_int(ProcessInfo.hProcess), ctypes.c_int(-<span class="number">1</span>))</span><br><span class="line"><span class="built_in">open</span>(<span class="string">&#x27;bin1&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>).write(file)</span><br></pre></td></tr></table></figure><p>很明显，<code>arr = range(len(file))() 和 open(&#39;bin1&#39;, &#39;wb&#39;).write(bytes(arr))</code>是有些奇怪的，可能是无法彻底地反编译，于是用pycdas得到python字节码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">b&#x27;bin1bin1bin1&#x27;</span><br><span class="line">&#x27;bin1&#x27;</span><br><span class="line">&#x27;rb&#x27;</span><br><span class="line">[Code]</span><br><span class="line">    File Name: ez_py.py</span><br><span class="line">    Object Name: &lt;listcomp&gt;</span><br><span class="line">    Qualified Name: &lt;listcomp&gt;</span><br><span class="line">    Arg Count: 1</span><br><span class="line">    Pos Only Arg Count: 0</span><br><span class="line">    KW Only Arg Count: 0</span><br><span class="line">    Stack Size: 7</span><br><span class="line">    Flags: 0x00000003 (CO_OPTIMIZED | CO_NEWLOCALS)</span><br><span class="line">    [Names]</span><br><span class="line">        &#x27;key1&#x27;</span><br><span class="line">        &#x27;len&#x27;</span><br><span class="line">        &#x27;file&#x27;</span><br><span class="line">    [Constants]</span><br><span class="line">    [Disassembly]</span><br><span class="line">        0       RESUME                        0</span><br><span class="line">        2       BUILD_LIST                    0</span><br><span class="line">        4       LOAD_FAST                     0: .0</span><br><span class="line">        6       FOR_ITER                      50 (to 108)</span><br><span class="line">        8       STORE_FAST                    1: i</span><br><span class="line">        10      LOAD_GLOBAL                   0: key1</span><br><span class="line">        22      LOAD_FAST                     1: i</span><br><span class="line">        24      LOAD_GLOBAL                   3: NULL + len</span><br><span class="line">        36      LOAD_GLOBAL                   0: key1</span><br><span class="line">        48      PRECALL                       1</span><br><span class="line">        52      CALL                          1</span><br><span class="line">        62      BINARY_OP                     6</span><br><span class="line">        66      BINARY_SUBSCR                 </span><br><span class="line">        76      LOAD_GLOBAL                   4: file</span><br><span class="line">        88      LOAD_FAST                     1: i</span><br><span class="line">        90      BINARY_SUBSCR                 </span><br><span class="line">        100     BINARY_OP                     12</span><br><span class="line">        104     LIST_APPEND                   2</span><br><span class="line">        106     JUMP_BACKWARD                 51</span><br><span class="line">        108     RETURN_VALUE                  </span><br><span class="line">&#x27;wb&#x27;</span><br><span class="line">b&#x27;bin1&#x27;</span><br><span class="line">-1</span><br></pre></td></tr></table></figure><p>可以使用dis来获取python字节码，但得使用python3.11版本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Disassembly of &lt;code object &lt;listcomp&gt; at 0x00000160F71B8FA0, file &quot;ez_py.py&quot;, line 59&gt;:</span><br><span class="line"> 59           0 RESUME                   0</span><br><span class="line">              2 BUILD_LIST               0</span><br><span class="line">              4 LOAD_FAST                0 (.0)</span><br><span class="line">        &gt;&gt;    6 FOR_ITER                50 (to 108)</span><br><span class="line">              8 STORE_FAST               1 (i)</span><br><span class="line">             10 LOAD_GLOBAL              0 (key1)</span><br><span class="line">             22 LOAD_FAST                1 (i)</span><br><span class="line">             24 LOAD_GLOBAL              3 (NULL + len)</span><br><span class="line">             36 LOAD_GLOBAL              0 (key1)</span><br><span class="line">             48 PRECALL                  1</span><br><span class="line">             52 CALL                     1</span><br><span class="line">             62 BINARY_OP                6 (%)</span><br><span class="line">             66 BINARY_SUBSCR</span><br><span class="line">             76 LOAD_GLOBAL              4 (file)</span><br><span class="line">             88 LOAD_FAST                1 (i)</span><br><span class="line">             90 BINARY_SUBSCR</span><br><span class="line">            100 BINARY_OP               12 (^)</span><br><span class="line">            104 LIST_APPEND              2</span><br><span class="line">            106 JUMP_BACKWARD           51 (to 6)</span><br><span class="line">        &gt;&gt;  108 RETURN_VALUE</span><br></pre></td></tr></table></figure><p>逆出逻辑，并将其改为bin2来解密bin2文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line">key1 = <span class="built_in">bytes</span>(md5(<span class="string">b&quot;bin2bin2bin2&quot;</span>).hexdigest().encode())</span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&quot;bin2&quot;</span>, <span class="string">&quot;rb&quot;</span>).read()</span><br><span class="line">arr = [key1[i % <span class="built_in">len</span>(key1)] ^ file[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(file))]</span><br><span class="line"><span class="built_in">open</span>(<span class="string">&quot;bin_dump&quot;</span>, <span class="string">&quot;wb&quot;</span>).write(<span class="built_in">bytes</span>(arr))</span><br></pre></td></tr></table></figure><h2 id="解密bin2"><a href="#解密bin2" class="headerlink" title="解密bin2"></a>解密bin2</h2><p><img src="/2023/06/23/DASCTF2023%E4%BA%8C%E8%BF%9B%E5%88%B6/image-20230623123050061.png" alt="bin2主逻辑"></p><p><img src="/2023/06/23/DASCTF2023%E4%BA%8C%E8%BF%9B%E5%88%B6/image-20230623123109217.png" alt="btea函数"></p><p>可以直接写脚本了：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DELTA 0x7937B99E</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MX (((z&gt;&gt;5^y<span class="string">&lt;&lt;2) + (y&gt;</span>&gt;3^z&lt;&lt;4)) ^ ((sum^y) + (key[(p&amp;3)^e] ^ z)))</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">btea</span><span class="params">(<span class="type">uint32_t</span>* v, <span class="type">int</span> n, <span class="type">uint32_t</span> <span class="type">const</span> key[<span class="number">4</span>])</span> </span>&#123;</span><br><span class="line">    <span class="type">uint32_t</span> y, z, sum;</span><br><span class="line">    <span class="type">unsigned</span> p, rounds, e;</span><br><span class="line">    rounds = <span class="number">52</span> / n;</span><br><span class="line">    sum = rounds * DELTA;</span><br><span class="line">    y = v[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">for</span> (p = n - <span class="number">1</span>; p &gt; <span class="number">0</span>; p--) &#123;</span><br><span class="line">            z = v[p - <span class="number">1</span>];</span><br><span class="line">            y = v[p] -= MX;</span><br><span class="line">        &#125;</span><br><span class="line">        z = v[n - <span class="number">1</span>];</span><br><span class="line">        y = v[<span class="number">0</span>] -= MX;</span><br><span class="line">    &#125; <span class="keyword">while</span> ((sum -= DELTA) != <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">uint32_t</span> <span class="type">const</span> key[<span class="number">4</span>] = &#123; <span class="number">0x4B5F</span>, <span class="number">0xDEAD</span>, <span class="number">0x11ED</span>, <span class="number">0xB3CC</span> &#125;;</span><br><span class="line">    <span class="type">uint32_t</span> data[<span class="number">11</span>] = &#123; <span class="number">0xCC45699D</span>, <span class="number">0x683D5352</span>,<span class="number">0xB8BB71A0</span>,<span class="number">0xD3817AD</span>,<span class="number">0x7547E79E</span>,<span class="number">0x4BDD8C7C</span>,<span class="number">0x95E25A81</span>,<span class="number">0xC4525103</span>,<span class="number">0x7049B46F</span>,<span class="number">0x5417F77C</span>,<span class="number">0x65567138</span> &#125;;</span><br><span class="line">    <span class="type">uint32_t</span>* sent = data;</span><br><span class="line">    <span class="built_in">btea</span>(sent, <span class="number">11</span>, key);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">11</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, sent[i] &amp; <span class="number">0xff</span>);</span><br><span class="line">            sent[i] &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="cap"><a href="#cap" class="headerlink" title="cap"></a>cap</h1><p>主逻辑：程序截图并进行处理保存为cap.bin。</p><p><img src="/2023/06/23/DASCTF2023%E4%BA%8C%E8%BF%9B%E5%88%B6/image-20230623163326221.png" alt="主逻辑"></p><p>动态调试可得，</p><p>这部分处理bin文件的1-14个字节：</p><p><img src="/2023/06/23/DASCTF2023%E4%BA%8C%E8%BF%9B%E5%88%B6/image-20230623193403249.png" alt="0-14"></p><p>这部分处理bin文件的15-40个字节：</p><p><img src="/2023/06/23/DASCTF2023%E4%BA%8C%E8%BF%9B%E5%88%B6/image-20230623194710994.png" alt="15-40"></p><p>这部分处理bin文件的剩余字节，且下标起始于3：</p><p><img src="/2023/06/23/DASCTF2023%E4%BA%8C%E8%BF%9B%E5%88%B6/image-20230623193603271.png" alt="41-..."></p><h2 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">handle</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">        a[i] ^= ((b &gt;&gt; i * <span class="number">8</span>) &amp; <span class="number">0xFF</span>)</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">key = [<span class="number">0x65</span>, <span class="number">0x6E</span>, <span class="number">0x63</span>, <span class="number">0x5F</span>, <span class="number">0x62</span>, <span class="number">0x79</span>, <span class="number">0x5F</span>, <span class="number">0x64</span>, <span class="number">0x61</span>, <span class="number">0x73</span>, <span class="number">0x63</span>, <span class="number">0x74</span>, <span class="number">0x66</span>]</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./cap.bin&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data1 = <span class="built_in">bytearray</span>(f.read(<span class="number">14</span>))</span><br><span class="line">    data2 = <span class="built_in">bytearray</span>(f.read(<span class="number">40</span>))</span><br><span class="line">    data3 = <span class="built_in">bytearray</span>(f.read())</span><br><span class="line"><span class="comment"># data1[0] ^= 0x6E</span></span><br><span class="line"><span class="comment"># data1[1] ^= 0x63</span></span><br><span class="line"><span class="comment"># data1[2] ^= 0x5f</span></span><br><span class="line"><span class="comment"># data1[3] ^= 0x62</span></span><br><span class="line"><span class="comment"># data1[4] ^= 0x79</span></span><br><span class="line"><span class="comment"># data1[5] ^= 0x5f</span></span><br><span class="line"><span class="comment"># data1[6] ^= 0x64</span></span><br><span class="line"><span class="comment"># data1[7] ^= 0x61</span></span><br><span class="line"><span class="comment"># data1[8] ^= 0x73</span></span><br><span class="line"><span class="comment"># data1[9] ^= 0x63</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data1)):</span><br><span class="line">    data1[i] ^= key[(i + <span class="number">1</span>) % <span class="number">13</span>]</span><br><span class="line">data2[:<span class="number">4</span>] = handle(data2[:<span class="number">4</span>], <span class="number">0x79625f63</span>)</span><br><span class="line">data2[<span class="number">4</span>:<span class="number">8</span>] = handle(data2[<span class="number">4</span>:<span class="number">8</span>], <span class="number">0x7361645f</span>)</span><br><span class="line">data2[<span class="number">8</span>:<span class="number">12</span>] = handle(data2[<span class="number">8</span>:<span class="number">12</span>], <span class="number">0x65667463</span>)</span><br><span class="line">data2[<span class="number">12</span>:<span class="number">20</span>] = handle(data2[<span class="number">12</span>:<span class="number">20</span>], <span class="number">0x61645f79625f636e</span>)</span><br><span class="line">data2[<span class="number">20</span>:<span class="number">28</span>] = handle(data2[<span class="number">20</span>:<span class="number">28</span>], <span class="number">0x5f636e6566746373</span>)</span><br><span class="line">data2[<span class="number">28</span>:<span class="number">36</span>] = handle(data2[<span class="number">28</span>:<span class="number">36</span>], <span class="number">0x74637361645f7962</span>)</span><br><span class="line">data2[<span class="number">36</span>:<span class="number">40</span>] = handle(data2[<span class="number">36</span>:<span class="number">40</span>], <span class="number">0x636e6566</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data3)):</span><br><span class="line">    data3[i] ^= key[(i + <span class="number">3</span>) % <span class="number">13</span>]</span><br><span class="line"><span class="built_in">print</span>(data1[<span class="number">2</span>])</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;flag.bmp&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="built_in">bytes</span>(data1 + data2 + data3))</span><br></pre></td></tr></table></figure><h1 id="unsym"><a href="#unsym" class="headerlink" title="unsym"></a>unsym</h1><p>这题还是我有点迷，看wp知晓流程:</p><ol><li>输入密钥</li><li>用RSA解密，n&#x3D;0x1d884d54d21694ccd120f145c8344b729b301e782c69a8f3073325b9c5，e&#x3D;0x10001，分解n，求出d</li><li>结果应该是0xfad53ce897d2c26f8cad910417fbdd1f0f9a18f6c1748faca10299dc8</li><li>将结果当作密钥和IV进行AES CBC模式解密解encrypted.bin</li></ol><p><img src="/2023/06/23/DASCTF2023%E4%BA%8C%E8%BF%9B%E5%88%B6/image-20230623232435870.png"></p><p><img src="/2023/06/23/DASCTF2023%E4%BA%8C%E8%BF%9B%E5%88%B6/image-20230623232502821.png"></p><p><img src="/2023/06/23/DASCTF2023%E4%BA%8C%E8%BF%9B%E5%88%B6/image-20230623232520446.png" alt="result"></p>]]></content>
      
      
      <categories>
          
          <category> Reverse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Reverse </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安洵杯2023-wp</title>
      <link href="/2023/06/11/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-wp/"/>
      <url>/2023/06/11/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-wp/</url>
      
        <content type="html"><![CDATA[<h1 id="ez-cpp"><a href="#ez-cpp" class="headerlink" title="ez_cpp"></a>ez_cpp</h1><h2 id="正向逻辑："><a href="#正向逻辑：" class="headerlink" title="正向逻辑："></a>正向逻辑：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">reverse_bit</span>(<span class="params">num, bit</span>):</span><br><span class="line">    result = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(bit):</span><br><span class="line">        result |= ((num &gt;&gt; i) &amp; <span class="number">1</span>) &lt;&lt; (bit - i - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">b = <span class="string">&quot;SYC&#123;xxxxxxxxxxxxxxxxxxxxxxxx&#125;&quot;</span></span><br><span class="line">d = []</span><br><span class="line">c = <span class="number">0x1EF035</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(b)):</span><br><span class="line">    eax = (c &amp; <span class="number">0xFFFF00</span>) + <span class="built_in">ord</span>(b[i]) - <span class="number">0x3D</span></span><br><span class="line">    <span class="keyword">if</span> eax &amp; <span class="number">0xFF</span> &lt; <span class="number">0x3E</span>:</span><br><span class="line">        v7 = <span class="built_in">ord</span>(b[i]) + <span class="number">13</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">ord</span>(b[i]) &gt; <span class="number">0x5A</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">ord</span>(b[i]) + <span class="number">13</span> &lt;= <span class="number">0x7A</span>:</span><br><span class="line">                d.append(<span class="built_in">ord</span>(b[i]) + <span class="number">13</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                d.append(<span class="built_in">ord</span>(b[i]) - <span class="number">13</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">ord</span>(b[i]) + <span class="number">13</span> &lt;= <span class="number">0x5A</span>:</span><br><span class="line">                d.append(<span class="built_in">ord</span>(b[i]) + <span class="number">13</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                d.append(<span class="built_in">ord</span>(b[i]) - <span class="number">13</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        d.append(<span class="built_in">ord</span>(b[i]))</span><br><span class="line">str2 = []</span><br><span class="line">v6 = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">16</span>:</span><br><span class="line">        str2.append(d[i] ^ <span class="number">4</span>)</span><br><span class="line">    <span class="keyword">elif</span> i &lt; <span class="number">16</span>:</span><br><span class="line">        <span class="keyword">if</span> v6[i] == <span class="number">1</span>:</span><br><span class="line">            str2.append(d[i] ^ <span class="number">9</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            str2.append(d[i] - <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">elif</span> i &gt; <span class="number">16</span>:</span><br><span class="line">        <span class="keyword">if</span> v6[i] == <span class="number">1</span>:</span><br><span class="line">            str2.append(d[i] ^ <span class="number">6</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            str2.append(d[i] - <span class="number">5</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">    str2[i] = <span class="number">1</span> ^ (reverse_bit(str2[i], <span class="number">8</span>) + <span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;</span>.join(<span class="built_in">hex</span>(i)[<span class="number">2</span>:] + <span class="string">&quot; &quot;</span> <span class="keyword">for</span> i <span class="keyword">in</span> str2))</span><br></pre></td></tr></table></figure><h2 id="逆向逻辑"><a href="#逆向逻辑" class="headerlink" title="逆向逻辑"></a>逆向逻辑</h2><p>其中第一个加密用可见字符输入得到可见字符输出来逆，因此可能产生一个字符对应多个，所以筛掉看上去不像的就好了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">reverse_bit</span>(<span class="params">num, bit</span>):</span><br><span class="line">    result = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(bit):</span><br><span class="line">        result |= ((num &gt;&gt; i) &amp; <span class="number">1</span>) &lt;&lt; (bit - i - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">v6 = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line">result = [<span class="number">0x00000022</span>, <span class="number">0xFFFFFFA2</span>, <span class="number">0x00000072</span>, <span class="number">0xFFFFFFE6</span>, <span class="number">0x00000052</span>, <span class="number">0xFFFFFF8C</span>, <span class="number">0xFFFFFFF2</span>, <span class="number">0xFFFFFFD4</span>, <span class="number">0xFFFFFFA6</span>,</span><br><span class="line">          <span class="number">0x0000000A</span>, <span class="number">0x0000003C</span>, <span class="number">0x00000024</span>, <span class="number">0xFFFFFFA6</span>, <span class="number">0xFFFFFF9C</span>, <span class="number">0xFFFFFF86</span>, <span class="number">0x00000024</span>, <span class="number">0x00000042</span>, <span class="number">0xFFFFFFD4</span>,</span><br><span class="line">          <span class="number">0x00000022</span>, <span class="number">0xFFFFFFB6</span>, <span class="number">0x00000014</span>, <span class="number">0x00000042</span>, <span class="number">0xFFFFFFCE</span>, <span class="number">0xFFFFFFAC</span>, <span class="number">0x00000014</span>, <span class="number">0x0000006A</span>, <span class="number">0x0000002C</span>,</span><br><span class="line">          <span class="number">0x0000007C</span>, <span class="number">0xFFFFFFE4</span>, <span class="number">0xFFFFFFE4</span>, <span class="number">0xFFFFFFE4</span>, <span class="number">0x0000001E</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">    result[i] = result[i] &amp; <span class="number">0xFF</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">    result[i] = reverse_bit((result[i] ^ <span class="number">1</span>) - <span class="number">1</span>, <span class="number">8</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">16</span>:</span><br><span class="line">        result[i] ^= <span class="number">4</span></span><br><span class="line">    <span class="keyword">elif</span> i &lt; <span class="number">16</span>:</span><br><span class="line">        <span class="keyword">if</span> v6[i] == <span class="number">1</span>:</span><br><span class="line">            result[i] ^= <span class="number">9</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result[i] += <span class="number">2</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> v6[i] == <span class="number">1</span>:</span><br><span class="line">            result[i] ^= <span class="number">6</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result[i] += <span class="number">5</span></span><br><span class="line">flag = []</span><br><span class="line">c1 = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>, <span class="number">128</span>)]</span><br><span class="line">c2 = [<span class="number">32</span>, <span class="number">33</span>, <span class="number">34</span>, <span class="number">35</span>, <span class="number">36</span>, <span class="number">37</span>, <span class="number">38</span>, <span class="number">39</span>, <span class="number">40</span>, <span class="number">41</span>, <span class="number">42</span>, <span class="number">43</span>, <span class="number">44</span>, <span class="number">45</span>, <span class="number">46</span>, <span class="number">47</span>, <span class="number">48</span>, <span class="number">49</span>, <span class="number">50</span>, <span class="number">51</span>, <span class="number">52</span>, <span class="number">53</span>, <span class="number">54</span>, <span class="number">55</span>, <span class="number">56</span>, <span class="number">57</span>, <span class="number">58</span>, <span class="number">59</span>,</span><br><span class="line">      <span class="number">60</span>, <span class="number">74</span>, <span class="number">75</span>, <span class="number">76</span>, <span class="number">77</span>, <span class="number">78</span>, <span class="number">79</span>, <span class="number">80</span>, <span class="number">81</span>, <span class="number">82</span>, <span class="number">83</span>, <span class="number">84</span>, <span class="number">85</span>, <span class="number">86</span>, <span class="number">87</span>, <span class="number">88</span>, <span class="number">89</span>, <span class="number">90</span>, <span class="number">65</span>, <span class="number">66</span>, <span class="number">67</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">70</span>, <span class="number">71</span>, <span class="number">72</span>, <span class="number">73</span>, <span class="number">74</span>,</span><br><span class="line">      <span class="number">75</span>, <span class="number">76</span>, <span class="number">77</span>, <span class="number">104</span>, <span class="number">105</span>, <span class="number">106</span>, <span class="number">107</span>, <span class="number">108</span>, <span class="number">109</span>, <span class="number">110</span>, <span class="number">111</span>, <span class="number">112</span>, <span class="number">113</span>, <span class="number">114</span>, <span class="number">115</span>, <span class="number">116</span>, <span class="number">117</span>, <span class="number">118</span>, <span class="number">119</span>, <span class="number">120</span>, <span class="number">121</span>, <span class="number">122</span>, <span class="number">97</span>,</span><br><span class="line">      <span class="number">98</span>, <span class="number">99</span>, <span class="number">100</span>, <span class="number">101</span>, <span class="number">102</span>, <span class="number">103</span>, <span class="number">104</span>, <span class="number">105</span>, <span class="number">106</span>, <span class="number">107</span>, <span class="number">108</span>, <span class="number">109</span>, <span class="number">123</span>, <span class="number">124</span>, <span class="number">125</span>, <span class="number">126</span>, <span class="number">127</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c2)):</span><br><span class="line">        <span class="keyword">if</span> result[i] == c2[j]:</span><br><span class="line">            flag.append(c1[j])</span><br><span class="line">    flag.append(<span class="built_in">ord</span>(<span class="string">&quot;\n&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;</span>.join(<span class="built_in">chr</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> flag))</span><br><span class="line"><span class="comment"># SYC&#123;Y3S-yE5-y0u-S0Ve-Th3-C9P!!!&#125;</span></span><br></pre></td></tr></table></figure><h2 id="其他师傅WP的思路"><a href="#其他师傅WP的思路" class="headerlink" title="其他师傅WP的思路"></a>其他师傅WP的思路</h2><p>具体可看 👉 <a href="https://mp.weixin.qq.com/s?__biz=Mzg4MjcxMTAwMQ==&mid=2247487028&idx=1&sn=4a73d839a64b6c1071c519ed2195aa25&chksm=cf53ce82f8244794da9dd9b9034709ee5e71d8b3931a75fd87ac31d450869f87411054ea3ed9&mpshare=1&scene=23&srcid=0611rfRKf6I8RnGhn24J0TzY&sharer_sharetime=1686452556948&sharer_shareid=6eea79ff6da57fc6752ab0bc570bf392#rd">2023 安洵杯SYCTF writeup by Arr3stY0u</a></p><p>由于整体的加密过程是单个字符的加密，因此可以通过爆破一个个字符来得到flag。</p><p>方法：patch掉部分代码，使<code>exitcode</code>为符合条件的字符数。</p><p>原代码：</p><p><img src="/2023/06/11/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-wp/image-20230611132142148.png" alt="原代码"></p><p>patch后的代码：</p><p><img src="/2023/06/11/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-wp/image-20230611132025951.png" alt="patch后的代码"></p><p>爆破脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">table = string.ascii_letters+string.digits+<span class="string">&#x27;!-&#123;&#125;&#x27;</span></span><br><span class="line">theflag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">len</span>(theflag) &lt; <span class="number">32</span>:</span><br><span class="line">    <span class="keyword">for</span> ch <span class="keyword">in</span> table:</span><br><span class="line">        flag = (theflag+ch).ljust(<span class="number">32</span>, <span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">        exitcode = os.system(<span class="string">f&quot;echo <span class="subst">&#123;flag&#125;</span> | ez_cpp.exe 1&gt;&amp;0&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;try: &quot;</span> + theflag + ch + <span class="string">&quot; exitcode:&quot;</span> + <span class="built_in">hex</span>(exitcode))</span><br><span class="line">        <span class="keyword">if</span> exitcode &gt;= <span class="built_in">len</span>(theflag) + <span class="number">1</span>:</span><br><span class="line">            theflag += ch</span><br><span class="line">            <span class="built_in">print</span>(theflag, exitcode)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(theflag + <span class="string">&#x27;not found&#x27;</span>)</span><br><span class="line">    time.sleep(<span class="number">0.1</span>)</span><br></pre></td></tr></table></figure><h1 id="3D-Maze"><a href="#3D-Maze" class="headerlink" title="3D_Maze"></a>3D_Maze</h1><p>了解逻辑，获取迷宫后手动走走（注意：z的顺序是有要求的）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line">maze = [</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(maze)):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">10</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>()</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\nz=&quot;</span>+ <span class="built_in">str</span>(i//<span class="number">100</span>))</span><br><span class="line">    <span class="keyword">match</span> maze[i]:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span>, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;*&quot;</span>, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> _:</span><br><span class="line">            <span class="built_in">print</span>(maze[i], end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="comment"># z=0</span></span><br><span class="line"><span class="comment"># ==1=======</span></span><br><span class="line"><span class="comment"># ==1====1==</span></span><br><span class="line"><span class="comment"># ==1=1111==</span></span><br><span class="line"><span class="comment"># ==1=1=====</span></span><br><span class="line"><span class="comment"># ==1=111111</span></span><br><span class="line"><span class="comment"># ==1=1=====</span></span><br><span class="line"><span class="comment"># ==11111111</span></span><br><span class="line"><span class="comment"># ==5=1=====</span></span><br><span class="line"><span class="comment"># ===*======</span></span><br><span class="line"><span class="comment"># ===1======</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># wddwwdddddD</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># z=1</span></span><br><span class="line"><span class="comment"># ==========</span></span><br><span class="line"><span class="comment"># =1111=====</span></span><br><span class="line"><span class="comment"># =1==111111</span></span><br><span class="line"><span class="comment"># =1========</span></span><br><span class="line"><span class="comment"># 11========</span></span><br><span class="line"><span class="comment"># ==========</span></span><br><span class="line"><span class="comment"># 11111=====</span></span><br><span class="line"><span class="comment"># ==========</span></span><br><span class="line"><span class="comment"># ==========</span></span><br><span class="line"><span class="comment"># ==========</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># dwwwdddsdddddD</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># z=2</span></span><br><span class="line"><span class="comment"># 1=========</span></span><br><span class="line"><span class="comment"># 1=========</span></span><br><span class="line"><span class="comment"># 1==1=1===1</span></span><br><span class="line"><span class="comment"># ==1=1=1=1=</span></span><br><span class="line"><span class="comment"># ==1====1==</span></span><br><span class="line"><span class="comment"># ===1===1==</span></span><br><span class="line"><span class="comment"># ====1==1==</span></span><br><span class="line"><span class="comment"># ==1=1==1==</span></span><br><span class="line"><span class="comment"># ===1===1==</span></span><br><span class="line"><span class="comment"># ==========</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># wwW</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># z=4</span></span><br><span class="line"><span class="comment"># ========11</span></span><br><span class="line"><span class="comment"># ========1=</span></span><br><span class="line"><span class="comment"># 111111111=</span></span><br><span class="line"><span class="comment"># ==========</span></span><br><span class="line"><span class="comment"># ==========</span></span><br><span class="line"><span class="comment"># ==========</span></span><br><span class="line"><span class="comment"># ==========</span></span><br><span class="line"><span class="comment"># ==========</span></span><br><span class="line"><span class="comment"># ==========</span></span><br><span class="line"><span class="comment"># ==========</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># assaaaaaaaaA</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># z=3</span></span><br><span class="line"><span class="comment"># ==1=======</span></span><br><span class="line"><span class="comment"># ==1=======</span></span><br><span class="line"><span class="comment"># ==1=11====</span></span><br><span class="line"><span class="comment"># ==11==1===</span></span><br><span class="line"><span class="comment"># ==11======</span></span><br><span class="line"><span class="comment"># ==11======</span></span><br><span class="line"><span class="comment"># ==11==1===</span></span><br><span class="line"><span class="comment"># ==1=11====</span></span><br><span class="line"><span class="comment"># ==1=======</span></span><br><span class="line"><span class="comment"># ==1=======</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># sssssssssS</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># z=5</span></span><br><span class="line"><span class="comment"># ===1======</span></span><br><span class="line"><span class="comment"># ===1======</span></span><br><span class="line"><span class="comment"># ===1======</span></span><br><span class="line"><span class="comment"># ===1======</span></span><br><span class="line"><span class="comment"># ===1======</span></span><br><span class="line"><span class="comment"># ==11======</span></span><br><span class="line"><span class="comment"># ==1=======</span></span><br><span class="line"><span class="comment"># 111=======</span></span><br><span class="line"><span class="comment"># ==========</span></span><br><span class="line"><span class="comment"># ==========</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># dddwwdwwwwwW</span></span><br><span class="line"><span class="comment"># w</span></span><br><span class="line"><span class="comment"># wddwwdddddDdwwwdddsdddddDwwWassaaaaaaaaAsssssssssSddwwdwwwwwWw</span></span><br></pre></td></tr></table></figure><h1 id="ezr3"><a href="#ezr3" class="headerlink" title="ezr3"></a>ezr3</h1><h2 id="脱壳"><a href="#脱壳" class="headerlink" title="脱壳"></a>脱壳</h2><p>加了壳，但是特征码被覆盖了，改回UPX，然后脱壳：</p><p><img src="/2023/06/11/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-wp/image-20230611140348555.png" alt="特征码1"></p><p><img src="/2023/06/11/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-wp/image-20230611140524739.png" alt="特征码2"></p><p><img src="/2023/06/11/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-wp/image-20230611140408937.png" alt="特征码3"></p><p>其中 ‘#’ 的数据：</p><p><img src="/2023/06/11/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-wp/image-20230611140504793.png" alt="‘#’ 的数据——来自其他用UPX加壳的ELF"></p><h2 id="程序逻辑"><a href="#程序逻辑" class="headerlink" title="程序逻辑"></a>程序逻辑</h2><p><img src="/2023/06/11/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-wp/image-20230611232914599.png" alt="主逻辑1"></p><p><img src="/2023/06/11/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-wp/image-20230611232937745.png" alt="主逻辑2"></p><p>主要函数为<code>v(), p()</code>。</p><p><code>v()</code>：更改一些数据。</p><p><img src="/2023/06/11/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-wp/image-20230611234030720.png" alt="v函数"></p><p><code>p()</code>：处理输入然后比对。</p><ul><li>处理输入：<ul><li><code>input[i] = (input[i] &gt;&gt; 4) || (input[i] &lt;&lt; 4)</code></li><li><code>input[i] = input[i] ^ input[len(input) - i]</code></li></ul></li></ul><p><img src="/2023/06/11/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-wp/image-20230611234055600.png" alt="p函数"></p><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">auth32 = [</span><br><span class="line">    <span class="number">0x0003BC69</span>, <span class="number">0x000D3FA0</span>, <span class="number">0x0003A94A</span>, <span class="number">0x00044AFF</span>, <span class="number">0x00045254</span>, <span class="number">0x0000CDD1</span>,</span><br><span class="line">    <span class="number">0x00001815</span>, <span class="number">0x00003B08</span>, <span class="number">0x00070868</span>, <span class="number">0x000C6560</span>, <span class="number">0x00065662</span>, <span class="number">0x000855C8</span>,</span><br><span class="line">    <span class="number">0x0000DCF6</span>, <span class="number">0x00004CE6</span>, <span class="number">0x0014EEC2</span>, <span class="number">0x0002CFD6</span>, <span class="number">0x00032766</span>, <span class="number">0x0014F6BA</span>,</span><br><span class="line">    <span class="number">0x00025E69</span>, <span class="number">0x0006A9A3</span>, <span class="number">0x00121EBD</span>, <span class="number">0x0005991C</span>, <span class="number">0x00050016</span>, <span class="number">0x00004A3D</span>,</span><br><span class="line">    <span class="number">0x00097485</span>, <span class="number">0x0008D0A0</span>, <span class="number">0x0003B916</span>, <span class="number">0x00054C58</span>, <span class="number">0x00096F94</span>, <span class="number">0x00010334</span>,</span><br><span class="line">    <span class="number">0x000DAD22</span>, <span class="number">0x0004B234</span>, <span class="number">0x0002FE96</span>, <span class="number">0x000F33CC</span>, <span class="number">0x0012C1E8</span>, <span class="number">0x00148F9E</span></span><br><span class="line">]</span><br><span class="line">data32 = [</span><br><span class="line">    <span class="number">0x00000D21</span>, <span class="number">0x00000000</span>, <span class="number">0x0000009D</span>, <span class="number">0x00000000</span>, <span class="number">0x0000094B</span>, <span class="number">0x00000000</span>, <span class="number">0x000003C9</span>, <span class="number">0x00000000</span>, <span class="number">0x00000C3F</span>,</span><br><span class="line">    <span class="number">0x00000000</span>, <span class="number">0x000017E9</span>, <span class="number">0x00000000</span>, <span class="number">0x0000130E</span>, <span class="number">0x00000000</span>, <span class="number">0x00000088</span>, <span class="number">0x00000000</span>, <span class="number">0x00000486</span>, <span class="number">0x00000000</span>,</span><br><span class="line">    <span class="number">0x0000202F</span>, <span class="number">0x00000000</span>, <span class="number">0x00002230</span>, <span class="number">0x00000000</span>, <span class="number">0x000024B4</span>, <span class="number">0x00000000</span>, <span class="number">0x000008B1</span>, <span class="number">0x00000000</span>, <span class="number">0x00000A9F</span>,</span><br><span class="line">    <span class="number">0x00000000</span>, <span class="number">0x00001AD2</span>, <span class="number">0x00000000</span>, <span class="number">0x000023EB</span>, <span class="number">0x00000000</span>, <span class="number">0x00000C7E</span>, <span class="number">0x00000000</span>, <span class="number">0x0000042B</span>, <span class="number">0x00000000</span>,</span><br><span class="line">    <span class="number">0x000005BF</span>, <span class="number">0x00000000</span>, <span class="number">0x0000113C</span>, <span class="number">0x00000000</span>, <span class="number">0x00000449</span>, <span class="number">0x00000000</span>, <span class="number">0x00001751</span>, <span class="number">0x00000000</span>, <span class="number">0x00000ACE</span>,</span><br><span class="line">    <span class="number">0x00000000</span>, <span class="number">0x00001894</span>, <span class="number">0x00000000</span>, <span class="number">0x0000208A</span>, <span class="number">0x00000000</span>, <span class="number">0x00000E82</span>, <span class="number">0x00000000</span>, <span class="number">0x000006BD</span>, <span class="number">0x00000000</span>,</span><br><span class="line">    <span class="number">0x00000CEE</span>, <span class="number">0x00000000</span>, <span class="number">0x00002386</span>, <span class="number">0x00000000</span>, <span class="number">0x000013D4</span>, <span class="number">0x00000000</span>, <span class="number">0x00000111</span>, <span class="number">0x00000000</span>, <span class="number">0x00000D1C</span>,</span><br><span class="line">    <span class="number">0x00000000</span>, <span class="number">0x0000238E</span>, <span class="number">0x00000000</span>, <span class="number">0x00001759</span>, <span class="number">0x00000000</span>, <span class="number">0x0000012B</span>, <span class="number">0x00000000</span>, <span class="number">0x0000214D</span>, <span class="number">0x00000000</span></span><br><span class="line">]</span><br><span class="line">v2 = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        auth32[i * <span class="number">6</span> + j] ^= data32[v2 + <span class="number">12</span> * j]</span><br><span class="line">    v2 += <span class="number">2</span></span><br><span class="line">v2 = <span class="number">0</span></span><br><span class="line">flag = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        flag.append(auth32[i * <span class="number">6</span> + j] // data32[v2 + j * <span class="number">12</span>])</span><br><span class="line">    v2 += <span class="number">2</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">    flag[<span class="built_in">len</span>(flag) - <span class="number">1</span> - i] ^= flag[i]</span><br><span class="line">    flag[<span class="built_in">len</span>(flag) - <span class="number">1</span> - i] = (flag[<span class="built_in">len</span>(flag) - <span class="number">1</span> - i] &gt;&gt; <span class="number">4</span>) | (flag[<span class="built_in">len</span>(flag) - <span class="number">1</span> - i] &lt;&lt; <span class="number">4</span>) &amp; <span class="number">0xFF</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(flag))</span><br></pre></td></tr></table></figure><h1 id="snake"><a href="#snake" class="headerlink" title="snake"></a>snake</h1><p>一个贪吃蛇游戏，死后会生成一个flag，只有蛇到361长度生成的flag才是真的flag（比赛的时候一直不知道这题要干嘛），看了其他师傅的wp才知道。</p><h2 id="程序主逻辑"><a href="#程序主逻辑" class="headerlink" title="程序主逻辑"></a>程序主逻辑</h2><p>由于获取flag的过程与游戏关系不大，所以游戏部分逻辑不阐述。</p><p>main函数中，初始化蛇，身子用链表来实现，每节身子有它的位置x、y以及其他信息。</p><p>蛇的身子长度一开始为3，可通过动调得到。</p><p><img src="/2023/06/11/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-wp/image-20230611151313654.png" alt="初始化蛇"></p><p>获取随机数序列，在之后的果实生成以及加密会用到：</p><p><img src="/2023/06/11/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-wp/image-20230611151725890.png" alt="随机数序列"></p><p>在程序游戏每轮的进行中，都会更新分数以及其它细节：</p><p><img src="/2023/06/11/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-wp/image-20230611152126183.png" alt="游戏更新"></p><p>当蛇吃到果实时，就会进入if语句，最后<code>CxxThrowException</code>抛出一个异常，具体处理在汇编代码处可以看出：</p><p><img src="/2023/06/11/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-wp/image-20230611152426840.png" alt="处理异常"></p><p>抛出异常执行的地方应该是<code>0x401E92</code>处，将前面跳到<code>0x401F92</code>的跳转指令改成跳转至<code>0x401E92</code>处，可以获取反汇编代码：</p><p><img src="/2023/06/11/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-wp/image-20230611181440981.png" alt="蛇吃到果实的处理"></p><ol><li><p>程序更新最后将会被生成md5的数据为目前的蛇的各节点的第五个数据。</p></li><li><p>对数据进行一次RC4加密。</p></li><li><p>倒转蛇节点的数据，即将加密后的<code>will_be_md5</code>反转放入蛇的节点。（<code>dword_C1DEA4</code>的下一个地址就是<code>will_be_md5</code>）</p></li><li><p>新增一个蛇节点<code>node</code>，其<code>node[5]</code>为<code>index_data</code>，同时更新<code>index_data</code>（最开始为0x92）为<code>(index_data - 1) ^ (final_node[5] - 1)</code>，其中final_node为蛇最后一个节点（不包括新增的）。</p></li></ol><p>新的果实的生成：</p><p>由于<code>dowrd_4BDEA4</code>当蛇吃到果实时为0，因此当走果实生成的条件分支时，蛇的位置和果实的位置一定相同，因此会走第一个条件分支：由随机数序列的一个数作为种子来生成果实位置。</p><p><img src="/2023/06/11/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-wp/image-20230611170551372.png" alt="果实生成"></p><h2 id="RC4-for-data的逻辑"><a href="#RC4-for-data的逻辑" class="headerlink" title="RC4_for_data的逻辑"></a>RC4_for_data的逻辑</h2><p>整体流程就是RC4。</p><p>RC4的key是以蛇的位置作为种子，连续生成的随机数，而由于只有蛇吃到果实才能进入这个函数，因此也是果实的位置。</p><p><img src="/2023/06/11/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-wp/image-20230611165503791.png" alt="RC4初始化"></p><p>先将RC4加密异或的值存储下来，然后在下面异或数据，异或的处理无论走哪个条件分支都将数据与上面保存的异或数据进行异或。</p><p><img src="/2023/06/11/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-wp/image-20230611163658407.png" alt="加密"></p><h2 id="flag生成"><a href="#flag生成" class="headerlink" title="flag生成"></a>flag生成</h2><p>获取数据，生成md5：</p><p><img src="/2023/06/11/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-wp/image-20230611164021052.png" alt="flag生成函数"></p><h2 id="脚本-1"><a href="#脚本-1" class="headerlink" title="脚本"></a>脚本</h2><p>贴一个其他师傅的脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> ARC4</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line">libc = ctypes.CDLL(<span class="string">&quot;ucrtbase.dll&quot;</span>)</span><br><span class="line">libc.srand.argtypes = [ctypes.c_uint]</span><br><span class="line">libc.rand.restype = ctypes.c_int</span><br><span class="line"></span><br><span class="line">srand = libc.srand</span><br><span class="line">rand = libc.rand</span><br><span class="line"></span><br><span class="line">srand(<span class="number">0x94307F97</span>)</span><br><span class="line">seed_list = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">361</span>):</span><br><span class="line">    seed_list.append(rand())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enc</span>(<span class="params">buf, size, seed</span>):</span><br><span class="line">    srand(seed)</span><br><span class="line">    keysize = <span class="built_in">int</span>(rand()*<span class="number">1.0</span>/<span class="number">32767.0</span> * <span class="number">256.0</span>)</span><br><span class="line">    table = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\x00&#x27;</span></span><br><span class="line">    pwd = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(keysize):</span><br><span class="line">        idx = <span class="built_in">int</span>(rand()*<span class="number">1.0</span> / <span class="number">32767.0</span> * <span class="number">63.0</span>)</span><br><span class="line">        pwd += table[idx]</span><br><span class="line"></span><br><span class="line">    cipher = ARC4.ARC4Cipher(pwd.encode())</span><br><span class="line">    xorstream = <span class="string">b&#x27;\x00&#x27;</span>*size</span><br><span class="line">    xorstream = cipher.encrypt(xorstream)</span><br><span class="line">    outbuf = <span class="built_in">bytearray</span>(buf)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(size):</span><br><span class="line">        outbuf[i] ^= xorstream[i]</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>(outbuf)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">foods = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">361</span>):</span><br><span class="line">    srand(seed_list[i])</span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        y = rand() % <span class="number">20</span></span><br><span class="line">        x = rand() % <span class="number">20</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> (x == <span class="number">0</span> <span class="keyword">or</span> x == <span class="number">19</span> <span class="keyword">or</span> y == <span class="number">0</span> <span class="keyword">or</span> y == <span class="number">19</span>):</span><br><span class="line">            <span class="comment"># print(i, y, x)</span></span><br><span class="line">            foods.append((y, x))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tmp = <span class="number">0x92</span></span><br><span class="line"></span><br><span class="line">data = <span class="string">b&#x27;\x02&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">    data += <span class="built_in">bytes</span>([data[-<span class="number">1</span>] ^ <span class="number">0xBE</span>])</span><br><span class="line"><span class="comment"># print(data.hex())</span></span><br><span class="line"></span><br><span class="line">flag_data = data[:]</span><br><span class="line">eat_count = <span class="number">361</span> <span class="comment"># 初始长度就是3, 但是要求吃361个 ???</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(eat_count):</span><br><span class="line">    y, x = foods[i]</span><br><span class="line">    pos = y &lt;&lt; <span class="number">8</span> | x</span><br><span class="line">    data = enc(data, <span class="number">3</span>+i, pos)</span><br><span class="line">    <span class="comment"># print(data.hex())</span></span><br><span class="line"></span><br><span class="line">    _tmp = tmp</span><br><span class="line">    <span class="comment"># print(hex(tmp-1), hex(data[0]-1))</span></span><br><span class="line">    tmp = ((tmp-<span class="number">1</span>) ^ (data[<span class="number">0</span>]-<span class="number">1</span>)) &amp; <span class="number">0xFF</span></span><br><span class="line">    flag_data = data[:]</span><br><span class="line">    data = data[::-<span class="number">1</span>]</span><br><span class="line">    data += <span class="built_in">bytes</span>([_tmp])</span><br><span class="line">    <span class="comment"># print(hex(tmp))</span></span><br><span class="line"></span><br><span class="line">s = flag_data.ljust(<span class="number">361</span>, <span class="string">b&#x27;\x00&#x27;</span>).<span class="built_in">hex</span>().encode()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;flag_data&#x27;</span>, <span class="built_in">len</span>(flag_data))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;SYC&#123;&#x27;</span>+md5(s[:<span class="number">722</span>]).hexdigest()+<span class="string">&#x27;&#125;&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="babyThread"><a href="#babyThread" class="headerlink" title="babyThread"></a>babyThread</h1><h2 id="逻辑"><a href="#逻辑" class="headerlink" title="逻辑"></a>逻辑</h2><p>流程很明显，就是加密和比对，主要是判断生成密钥的字符串是哪一个。</p><p>加密过程：</p><p><img src="/2023/06/11/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-wp/image-20230611200355369.png" alt="加密过程"></p><p>主过程：</p><p><img src="/2023/06/11/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-wp/image-20230611200429997.png" alt="主过程"></p><p>三个密钥（三个只有一个是被用到的）：</p><ol><li><img src="/2023/06/11/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-wp/image-20230611200618444.png" alt="第一个密钥"></li><li><img src="/2023/06/11/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-wp/image-20230611200531434.png" alt="第二个密钥"></li><li><img src="/2023/06/11/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-wp/image-20230611200559786.png" alt="第三个密钥"></li></ol><p>所以直接三个都试一下。</p><h2 id="脚本-2"><a href="#脚本-2" class="headerlink" title="脚本"></a>脚本</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">rc4_init</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>*key, <span class="type">unsigned</span> <span class="type">long</span> Len, <span class="type">unsigned</span> <span class="type">char</span>*s)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> k[<span class="number">256</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> tmp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;<span class="number">256</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">s[i] = i;</span><br><span class="line">k[i] = (<span class="type">unsigned</span> <span class="type">char</span>)key[i%Len];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;<span class="number">256</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">        j = (j + s[i] + k[i]) % <span class="number">256</span>;</span><br><span class="line">tmp = s[i];</span><br><span class="line">s[i] = s[j];</span><br><span class="line">s[j] = tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">rc4_crypt</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>*s, <span class="type">unsigned</span> <span class="type">char</span>*Data, <span class="type">unsigned</span> <span class="type">long</span> Len)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, t = <span class="number">0</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> k = <span class="number">0</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> tmp;</span><br><span class="line"><span class="keyword">for</span> (k = <span class="number">0</span>; k&lt;Len; k++)</span><br><span class="line">&#123;</span><br><span class="line">i = (i + <span class="number">1</span>) % <span class="number">256</span>;</span><br><span class="line">j = (j + s[i]) % <span class="number">256</span>;</span><br><span class="line">tmp = s[i];</span><br><span class="line">s[i] = s[j];</span><br><span class="line">s[j] = tmp;</span><br><span class="line">t = (s[i] + s[j]) % <span class="number">256</span>;</span><br><span class="line">Data[k] ^= s[t];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> v8[<span class="number">7</span>];</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>, i_ = <span class="number">0</span>, j = <span class="number">0</span>, j_, t;</span><br><span class="line">    <span class="type">int</span> v4, v9;</span><br><span class="line">    <span class="comment">// char Str[100] = &quot;FD,B0?YORg@:*VTCLnY4&quot;;</span></span><br><span class="line">    <span class="comment">// char Str[100] = &quot;D..^!ARBIh@;K:dAU-K`&quot;;</span></span><br><span class="line">    <span class="comment">// char Str[100] = &quot;!This_program_cannot&quot;;</span></span><br><span class="line">    <span class="type">char</span> Str[<span class="number">21</span>];</span><br><span class="line">    FILE * f = fopen(<span class="string">&quot;./babyThread.exe&quot;</span>, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">    fseek(f, <span class="number">0x4D</span>, <span class="number">0</span>);</span><br><span class="line">    fread(Str, <span class="number">1</span>, <span class="number">0x14</span>, f);</span><br><span class="line">    fclose(f);</span><br><span class="line">    </span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> key[<span class="number">24</span>];</span><br><span class="line">    v8[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    v8[<span class="number">1</span>] = <span class="number">85</span>;</span><br><span class="line">    v8[<span class="number">2</span>] = <span class="number">0x1C39</span>;</span><br><span class="line">    v8[<span class="number">3</span>] = <span class="number">0x95EED</span>;</span><br><span class="line">    v8[<span class="number">4</span>] = <span class="number">0x31C84B1</span>;</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>, i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(Str); j += <span class="number">4</span>, i += <span class="number">5</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        v9 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (t = <span class="number">0</span>; t &lt; <span class="number">5</span>; ++t)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (Str[t + i] == <span class="string">&#x27;z&#x27;</span>)</span><br><span class="line">                key[t + j] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                v9 += v8[<span class="number">4</span> - t] * (Str[t + i] - <span class="number">33</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        key[j + <span class="number">3</span>] = (*((<span class="type">char</span> *)&amp;v9));</span><br><span class="line">        key[j + <span class="number">2</span>] = (*((<span class="type">char</span> *)&amp;v9 + <span class="number">1</span>));</span><br><span class="line">        key[j + <span class="number">1</span>] = (*((<span class="type">char</span> *)&amp;v9 + <span class="number">2</span>));</span><br><span class="line">        key[j] = (*((<span class="type">char</span> *)&amp;v9 + <span class="number">3</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> data[<span class="number">32</span>] = &#123;</span><br><span class="line">        <span class="number">0xDE</span>, <span class="number">0x1C</span>, <span class="number">0x22</span>, <span class="number">0x27</span>, <span class="number">0x1D</span>, <span class="number">0xAE</span>, <span class="number">0xAD</span>, <span class="number">0x65</span>, <span class="number">0xAD</span>, <span class="number">0xEF</span>, </span><br><span class="line">        <span class="number">0x6E</span>, <span class="number">0x41</span>, <span class="number">0x4C</span>, <span class="number">0x34</span>, <span class="number">0x75</span>, <span class="number">0xF1</span>, <span class="number">0x16</span>, <span class="number">0x50</span>, <span class="number">0x50</span>, <span class="number">0xD4</span>, </span><br><span class="line">        <span class="number">0x48</span>, <span class="number">0x69</span>, <span class="number">0x6D</span>, <span class="number">0x93</span>, <span class="number">0x36</span>, <span class="number">0x1C</span>, <span class="number">0x86</span>, <span class="number">0x3B</span>, <span class="number">0xBB</span>, <span class="number">0xD0</span>, </span><br><span class="line">        <span class="number">0x4C</span>, <span class="number">0x91</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">char</span> s[<span class="number">264</span>];</span><br><span class="line">    rc4_init(key, <span class="number">16</span>, s);</span><br><span class="line">    rc4_crypt(s, data, <span class="number">32</span>);</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i&lt;<span class="number">32</span> ; i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, data[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="gowhere"><a href="#gowhere" class="headerlink" title="gowhere"></a>gowhere</h1><p>用IDAGolang脚本还原符号、函数名称。</p><p>大概的逻辑是输入30个字符的字符串，进行三轮三个函数加密然后与密文比对。</p><h2 id="函数一逻辑"><a href="#函数一逻辑" class="headerlink" title="函数一逻辑"></a>函数一逻辑</h2><p>逻辑：<code>input = (input + enc1_key) ^ 0x17</code></p><p><img src="/2023/06/11/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-wp/image-20230611210036323.png" alt="加密一"></p><p>主要是寻找<code>enc1_key</code>的变化。</p><p><code>enc_key1</code>初始为9。</p><p>每次进入<code>main_enc1()</code>时，<code>enc_key1</code>会加一：</p><p><img src="/2023/06/11/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-wp/image-20230611210240590.png" alt="enc_key1变化"></p><p>每次进入<code>main_enc2()</code>时，<code>enc_key1</code>也会加一：</p><p><img src="/2023/06/11/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-wp/image-20230611210358258.png" alt="enc_key1变化"></p><p>每次进入<code>main_enc3()</code>时，<code>enc_key1</code>也会加一：</p><p><img src="/2023/06/11/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-wp/image-20230611210443173.png" alt="enc_key1变化"></p><h2 id="函数二逻辑"><a href="#函数二逻辑" class="headerlink" title="函数二逻辑"></a>函数二逻辑</h2><p><img src="/2023/06/11/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-wp/image-20230611210608263.png" alt="函数二"></p><h2 id="函数三逻辑"><a href="#函数三逻辑" class="headerlink" title="函数三逻辑"></a>函数三逻辑</h2><p><img src="/2023/06/11/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-wp/image-20230611211829162.png" alt="函数三"></p><h2 id="主逻辑"><a href="#主逻辑" class="headerlink" title="主逻辑"></a>主逻辑</h2><p>三个加密的代码片段都弄懂了，但调用的顺序却没有，程序的具体逻辑我还没有弄懂。</p><p>分别为三个加密的代码片段走过且每次加密只走一次的代码下条件断点，打印一些信息：</p><p><img src="/2023/06/11/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-wp/image-20230611215638395.png" alt="断点信息"></p><p>可以知晓加密流程：enc1-2-3-2-3-1-2-3-2-3</p><h2 id="脚本-3"><a href="#脚本-3" class="headerlink" title="脚本"></a>脚本</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">dec1</span>(<span class="params">data, key</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)):</span><br><span class="line">        data[i] = (data[i] ^ <span class="number">0x17</span>) - key</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dec2</span>(<span class="params"><span class="built_in">input</span></span>):</span><br><span class="line">    <span class="built_in">input</span>[<span class="number">0</span>] -= <span class="number">2</span></span><br><span class="line">    <span class="built_in">input</span>[<span class="number">1</span>] += <span class="number">28</span></span><br><span class="line">    <span class="built_in">input</span>[<span class="number">2</span>] ^= <span class="number">0x47</span></span><br><span class="line">    <span class="built_in">input</span>[<span class="number">3</span>] -= <span class="built_in">input</span>[<span class="number">4</span>]</span><br><span class="line">    <span class="built_in">input</span>[<span class="number">5</span>] -= <span class="number">73</span></span><br><span class="line">    <span class="built_in">input</span>[<span class="number">6</span>] -= <span class="number">12</span></span><br><span class="line">    <span class="built_in">input</span>[<span class="number">8</span>] ^= <span class="number">0x5A</span></span><br><span class="line">    <span class="built_in">input</span>[<span class="number">7</span>] += <span class="built_in">input</span>[<span class="number">8</span>]</span><br><span class="line">    <span class="built_in">input</span>[<span class="number">9</span>] ^= <span class="number">0x22</span></span><br><span class="line">    <span class="built_in">input</span>[<span class="number">10</span>] -= <span class="number">20</span></span><br><span class="line">    <span class="built_in">input</span>[<span class="number">12</span>] += <span class="number">84</span></span><br><span class="line">    <span class="built_in">input</span>[<span class="number">13</span>] ^= <span class="number">4</span></span><br><span class="line">    <span class="built_in">input</span>[<span class="number">14</span>] ^= <span class="number">0x1C</span></span><br><span class="line">    <span class="built_in">input</span>[<span class="number">17</span>] += <span class="number">1</span></span><br><span class="line">    <span class="built_in">input</span>[<span class="number">27</span>] ^= <span class="number">0x11</span></span><br><span class="line">    <span class="built_in">input</span>[<span class="number">28</span>] ^= <span class="number">3</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="built_in">input</span>)):</span><br><span class="line">        <span class="built_in">input</span>[i] &amp;= <span class="number">0xff</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">input</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dec3</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data) // <span class="number">2</span>):</span><br><span class="line">        data[i], data[<span class="number">29</span>-i] = data[<span class="number">29</span>-i], data[i]</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag = [</span><br><span class="line">    <span class="number">0x4D</span>, <span class="number">0x63</span>, <span class="number">0x5D</span>, <span class="number">0x34</span>, <span class="number">0x43</span>, <span class="number">0x09</span>, <span class="number">0xA2</span>, <span class="number">0x77</span>, <span class="number">0x0A</span>, <span class="number">0xBF</span>,</span><br><span class="line">    <span class="number">0xC9</span>, <span class="number">0xB3</span>, <span class="number">0xE9</span>, <span class="number">0x6F</span>, <span class="number">0x79</span>, <span class="number">0x7D</span>, <span class="number">0x7B</span>, <span class="number">0xE8</span>, <span class="number">0x99</span>, <span class="number">0x90</span>,</span><br><span class="line">    <span class="number">0x43</span>, <span class="number">0x08</span>, <span class="number">0xBB</span>, <span class="number">0x99</span>, <span class="number">0x0E</span>, <span class="number">0x2E</span>, <span class="number">0xD4</span>, <span class="number">0x7B</span>, <span class="number">0x27</span>, <span class="number">0xB7</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">flag = dec3(flag)</span><br><span class="line">flag = dec2(flag)</span><br><span class="line">flag = dec3(flag)</span><br><span class="line">flag = dec2(flag)</span><br><span class="line">flag = dec1(flag, <span class="number">16</span>)</span><br><span class="line">flag = dec3(flag)</span><br><span class="line">flag = dec2(flag)</span><br><span class="line">flag = dec3(flag)</span><br><span class="line">flag = dec2(flag)</span><br><span class="line">flag = dec1(flag, <span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;</span>.join(<span class="built_in">chr</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> flag))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Reverse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Reverse </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>天堂之门原理</title>
      <link href="/2023/05/10/%E5%A4%A9%E5%A0%82%E4%B9%8B%E9%97%A8%E5%8E%9F%E7%90%86/"/>
      <url>/2023/05/10/%E5%A4%A9%E5%A0%82%E4%B9%8B%E9%97%A8%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本篇文章仅为看wp学习到的天堂之门技术做个总结。</p><p>具体学习，看看这些✌：</p><p>👉<a href="http://blog.bluesadi.cn:4000/2021/11/06/%E5%A4%A9%E5%A0%82%E4%B9%8B%E9%97%A8-Heaven-s-Gate-C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0/">天堂之门 (Heaven’s Gate) C语言实现 | 34r7hm4n’s blog (bluesadi.cn)</a> 👈讲得很细，看完就懂</p><p>👉<a href="http://s0rry.cn/archives/tian-tang-zhi-men-heavensgate#toc-head-2">天堂之门 (Heaven’s Gate) - s0rry’s Blog</a></p><h1 id="WoW64"><a href="#WoW64" class="headerlink" title="WoW64"></a>WoW64</h1><p>WOW64（Windows-On-Windows 64bit）是X64 Windows操作系统的一个子系统，为32位应用程序提供运行环境。类似的还有WOW32子系统，负责在32位Windows系统上运行16位应用程序。</p><p>在64位系统中，32位的应用程序运行在一个WoW64的子系统中，这个子系统为32位程序提供了一个类似沙箱的运行环境。事实上这个32位程序运行的环境也是一个64位的运行环境，系统在创建32位进程时，首先创建一个64位的进程，然后再在其中创建一个32位的子环境。32位程序所调用的系统函数，最终都要通过64位的动态链接库而实现。</p><p>Winodws系统中，CS段寄存器用来标识目前所运行的代码是32位的，还是64位的。</p><p>以一个使用天堂之门的程序为例，其为64位程序。</p><p>一开始为64位模式：</p><p><img src="/2023/05/10/%E5%A4%A9%E5%A0%82%E4%B9%8B%E9%97%A8%E5%8E%9F%E7%90%86/image-20230510114220317.png" alt="64位程序的CS寄存器"></p><p>切换到32位模式后：</p><p><img src="/2023/05/10/%E5%A4%A9%E5%A0%82%E4%B9%8B%E9%97%A8%E5%8E%9F%E7%90%86/image-20230510114530659.png" alt="切换到32位模式"></p><h1 id="天堂之门实现"><a href="#天堂之门实现" class="headerlink" title="天堂之门实现"></a>天堂之门实现</h1><h2 id="32位和64位之间的转化"><a href="#32位和64位之间的转化" class="headerlink" title="32位和64位之间的转化"></a>32位和64位之间的转化</h2><p>32位 → 64位：</p><ul><li>将<code>0x33</code>入栈</li><li>将64位指令地址入栈</li><li><code>retf</code> 远返回：先取返回地址，再取<code>0x33</code>作为CS寄存器，因此跳转的地址为<code>0x33:64位指令地址</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">push 0x33</span><br><span class="line">push _next_x64_code</span><br><span class="line">retf</span><br></pre></td></tr></table></figure><p>64位 → 32位：</p><ul><li>将<code>0x23</code>入栈</li><li>将32位指令地址入栈</li><li><code>retfq</code> 远返回：先取返回地址，再取<code>0x23</code>作为CS寄存器，因此跳转的地址为<code>0x23:32位指令地址</code><ul><li><code>retq</code>相当于<code>pop ip; pop cs</code></li><li><code>retfq</code>是按64位进行<code>pop</code>，<code>retf</code>是按32位进行<code>pop</code></li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">push 0x23</span><br><span class="line">push _nexr_x86_code</span><br><span class="line">retfq</span><br></pre></td></tr></table></figure><p>其实实现的方式应该并不是那么固定，虽然大差不差，比如举例的程序为64位 → 32位，其流程为：</p><p><img src="/2023/05/10/%E5%A4%A9%E5%A0%82%E4%B9%8B%E9%97%A8%E5%8E%9F%E7%90%86/image-20230509193351163.png" alt="64FC1628函数"></p><ul><li><code>call $+5</code>：跳到下一条指令，call指令大小为5，同时将<code>0x666C1642</code>地址入栈；<ul><li><img src="/2023/05/10/%E5%A4%A9%E5%A0%82%E4%B9%8B%E9%97%A8%E5%8E%9F%E7%90%86/image-20230510121041395.png" alt="call $+5"></li></ul></li><li><code>mov [rsp+0xA8-0xA4], 23h</code>：将栈顶32位数据的前八位变成0x23<ul><li><img src="/2023/05/10/%E5%A4%A9%E5%A0%82%E4%B9%8B%E9%97%A8%E5%8E%9F%E7%90%86/image-20230510121350591.png" alt="更改返回地址的cs"></li></ul></li><li><code>add [rsp+0xA8-0xA8], 0Dh</code>：将栈顶64位数据 +&#x3D; 0x0D，使其retf返回地址指向<code>0x23:0x666C164E</code><ul><li><img src="/2023/05/10/%E5%A4%A9%E5%A0%82%E4%B9%8B%E9%97%A8%E5%8E%9F%E7%90%86/image-20230510121638859.png" alt="更改返回地址"></li></ul></li><li><code>retf</code>：远返回，该指令会从栈顶取出一个返回地址，再取出一个cs段选择子，这里的CS段变成了0x23，返回地址为<code>0x23:0x666C164E</code>，然后开始以32位模式开始<code>0x666C164E</code>处的指令<ul><li><img src="/2023/05/10/%E5%A4%A9%E5%A0%82%E4%B9%8B%E9%97%A8%E5%8E%9F%E7%90%86/image-20230510121804080.png" alt="CS更改了"></li></ul></li></ul><p>它32位 → 64位就更差不多了：</p><p>将<code>push 返回地址</code>拆成<code>call + add</code>。</p><p><img src="/2023/05/10/%E5%A4%A9%E5%A0%82%E4%B9%8B%E9%97%A8%E5%8E%9F%E7%90%86/image-20230510122409063.png" alt="32 → 64"></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>实现步骤：</p><ol><li>实现模式的切换</li><li>代码（可以是仅指令代码，也可以是调用相对应位数的函数，但这会麻烦一些）</li><li>切换回原来的模式</li></ol><p>字节码与汇编的转换可以通过<code>keystone</code>和<code>capstone</code>获取。</p><p>这一部分就没有实践了，看看各位✌的代码：</p><p>以下是<a href="http://blog.bluesadi.cn:4000/2021/11/06/%E5%A4%A9%E5%A0%82%E4%B9%8B%E9%97%A8-Heaven-s-Gate-C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0/">32位下可运行的64位memcpy函数</a>：</p><blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">memcpy64</span><span class="params">(<span class="type">uint64_t</span> dst, <span class="type">uint64_t</span> src, <span class="type">uint64_t</span> sz)</span> &#123;</span><br><span class="line"><span class="type">static</span> <span class="type">uint8_t</span> code[] = &#123;</span><br><span class="line"><span class="comment">/*[bits 32]</span></span><br><span class="line"><span class="comment">push 0x33</span></span><br><span class="line"><span class="comment">push _next_x64_code</span></span><br><span class="line"><span class="comment">retf</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="number">0x6A</span>, <span class="number">0x33</span>, <span class="number">0x68</span>, <span class="number">0x78</span>, <span class="number">0x56</span>, <span class="number">0x34</span>, <span class="number">0x12</span>, <span class="number">0xCB</span>,</span><br><span class="line"><span class="comment">/*[bits 64]</span></span><br><span class="line"><span class="comment">push rsi</span></span><br><span class="line"><span class="comment">push rdi</span></span><br><span class="line"><span class="comment">mov rsi, src</span></span><br><span class="line"><span class="comment">mov rdi, dst</span></span><br><span class="line"><span class="comment">mov rcx, sz</span></span><br><span class="line"><span class="comment">rep movsb</span></span><br><span class="line"><span class="comment">pop rsi</span></span><br><span class="line"><span class="comment">pop rdi</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="number">0x56</span>, <span class="number">0x57</span>,</span><br><span class="line"><span class="number">0x48</span>, <span class="number">0xBE</span>, <span class="number">0x88</span>, <span class="number">0x77</span>, <span class="number">0x66</span>, <span class="number">0x55</span>, <span class="number">0x44</span>, <span class="number">0x33</span>, <span class="number">0x22</span>, <span class="number">0x11</span>,</span><br><span class="line"><span class="number">0x48</span>, <span class="number">0xBF</span>, <span class="number">0x88</span>, <span class="number">0x77</span>, <span class="number">0x66</span>, <span class="number">0x55</span>, <span class="number">0x44</span>, <span class="number">0x33</span>, <span class="number">0x22</span>, <span class="number">0x11</span>,</span><br><span class="line"><span class="number">0x48</span>, <span class="number">0xB9</span>, <span class="number">0x88</span>, <span class="number">0x77</span>, <span class="number">0x66</span>, <span class="number">0x55</span>, <span class="number">0x44</span>, <span class="number">0x33</span>, <span class="number">0x22</span>, <span class="number">0x11</span>,</span><br><span class="line"><span class="number">0xF3</span>, <span class="number">0xA4</span>,</span><br><span class="line"><span class="number">0x5E</span>, <span class="number">0x5F</span>,</span><br><span class="line"><span class="comment">/*[bits 64]</span></span><br><span class="line"><span class="comment">push 0x23</span></span><br><span class="line"><span class="comment">push _next_x86_code</span></span><br><span class="line"><span class="comment">retfq</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="number">0x6A</span>, <span class="number">0x23</span>, <span class="number">0x68</span>, <span class="number">0x78</span>, <span class="number">0x56</span>, <span class="number">0x34</span>, <span class="number">0x12</span>, <span class="number">0x48</span>, <span class="number">0xCB</span>,</span><br><span class="line"><span class="comment">/*[bits 32]</span></span><br><span class="line"><span class="comment">ret</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="number">0xC3</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">uint32_t</span> ptr = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span> (!ptr) &#123;</span><br><span class="line">ptr = (<span class="type">uint32_t</span>)VirtualAlloc(<span class="literal">NULL</span>, <span class="keyword">sizeof</span>(code), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(code); i++) ((PBYTE)ptr)[i] = code[i];</span><br><span class="line">&#125;</span><br><span class="line">*(<span class="type">uint32_t</span>*)(ptr + <span class="number">3</span>) = ptr + <span class="number">8</span>;</span><br><span class="line">*(<span class="type">uint64_t</span>*)(ptr + <span class="number">12</span>) = src;</span><br><span class="line">*(<span class="type">uint64_t</span>*)(ptr + <span class="number">22</span>) = dst;</span><br><span class="line">*(<span class="type">uint64_t</span>*)(ptr + <span class="number">32</span>) = sz;</span><br><span class="line">*(<span class="type">uint32_t</span>*)(ptr + <span class="number">47</span>) = ptr + <span class="number">53</span>;</span><br><span class="line">((<span class="type">void</span>(*)())ptr)();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>d3ctf2023学习</title>
      <link href="/2023/05/07/d3ctf2023%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/05/07/d3ctf2023%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之所以标题为学习，是因为我不会。</p><p>这篇文章仅为看完各位佬的wp之后，照葫芦画瓢跟着做一遍的过程，部分脚本会直接使用各位佬的wp。</p><p>在这次CTF中，我发现我其实并没有系统地学习逆向，从头到尾都是瞎子乱撞，对于各式各样的知识的理解只是流于表面。</p><p>所以啊，还得学，而且还得扎得深点啊。</p><p>各位✌的writeup：</p><p>👉<a href="https://fq6p9pyo5tt.feishu.cn/docx/InUFdQUKdozf8yx5IhGcf5zInSe">2023 AntCTF x D^3CTF 亚军 Writeup By S1uM4in)</a></p><p>👉<a href="https://mp.weixin.qq.com/s?__biz=Mzg4MjcxMTAwMQ==&mid=2247486967&idx=1&sn=ad55ddd11c6bfa17843270625f5f92fc&chksm=cf53cd41f8244457c2db68626c91f2e4564d756b903222f3a913e89f211d475418864c5041bc&mpshare=1&scene=23&srcid=0501bEUrW8ydbpm175TL5FFn&sharer_sharetime=1682949687637&sharer_shareid=6eea79ff6da57fc6752ab0bc570bf392#rd">2023 D^3CTF writeup by 万年三等奖</a></p><p>👉还有个官方的wp，就不放了</p><h1 id="d3syscall"><a href="#d3syscall" class="headerlink" title="d3syscall"></a>d3syscall</h1><p>首先看main，大概逻辑就是输入flag，检测。</p><p><img src="/2023/05/07/d3ctf2023%E5%AD%A6%E4%B9%A0/image-20230507181209469.png" alt="main函数"></p><p>sub_D3F5就是检测函数。</p><p><img src="/2023/05/07/d3ctf2023%E5%AD%A6%E4%B9%A0/image-20230507181232317.png" alt="检测函数sub_D3F5"></p><p>是syscall进行的系统调用，调用的操作由eax的值决定。</p><p>因此需要看syscall的调用有什么。</p><p>来到sub_1830，这里有对数据段取非，并写文件的操作，还有对字符串异或的操作。</p><p>但其实我并不知道为什么程序会来到这里，还是需要系统地学习一下程序执行的流程等知识啊。</p><p><img src="/2023/05/07/d3ctf2023%E5%AD%A6%E4%B9%A0/image-20230507202136815.png" alt="sub_1830"></p><p>对unk_4020数据段的取非操作，可以在动态调试下直接把结果dump出来，看文件头可以知道是一个新的ELF文件。</p><p><img src="/2023/05/07/d3ctf2023%E5%AD%A6%E4%B9%A0/image-20230507181121914.png" alt="取非结果"></p><p>也可以使用生成的文件，路径为<code>/tmp/my_module</code>。</p><p><img src="/2023/05/07/d3ctf2023%E5%AD%A6%E4%B9%A0/image-20230507181136870.png" alt="文件路径"></p><p>在dump文件的init_module函数中，猜测就是更改系统调用表的过程。</p><p>v4的下表对应检测函数每一个syscall的eax取值。</p><blockquote><p>程序首先从<code>/proc/kallsyms</code>中获取了系统调用表的地址，通过参数传递到内核模块中，内核模块里注册了<code>Linux</code>保留的系统调用，分别为：335：MOV，336：ALU，337：PUSH，338：POP，339：resetreg，340：checkflag。</p></blockquote><p><img src="/2023/05/07/d3ctf2023%E5%AD%A6%E4%B9%A0/image-20230507204944395.png" alt="init_module"></p><p>一共更改了五个系统调用。</p><p>MOV调用：</p><p><img src="/2023/05/07/d3ctf2023%E5%AD%A6%E4%B9%A0/image-20230507205002664.png" alt="MOV"></p><p>PUSH调用：</p><p><img src="/2023/05/07/d3ctf2023%E5%AD%A6%E4%B9%A0/image-20230507205018345.png" alt="PUSH"></p><p>POP调用：</p><p><img src="/2023/05/07/d3ctf2023%E5%AD%A6%E4%B9%A0/image-20230507205034902.png" alt="POP"></p><p>resetreg调用：</p><p><img src="/2023/05/07/d3ctf2023%E5%AD%A6%E4%B9%A0/image-20230507181619340.png" alt="resetreg"></p><p>checkflag调用：</p><p>将v4与处理过后的输入作比较，进行检测。</p><p><img src="/2023/05/07/d3ctf2023%E5%AD%A6%E4%B9%A0/image-20230507204810730.png" alt="checkflag"></p><p>运算操作：</p><p><img src="/2023/05/07/d3ctf2023%E5%AD%A6%E4%B9%A0/image-20230507205445965.png" alt="AUL_1"></p><p><img src="/2023/05/07/d3ctf2023%E5%AD%A6%E4%B9%A0/image-20230507205505877.png" alt="AUL_2"></p><p>知道了调用，现在只需要知道调用的流程就可以了。</p><p>wp里给出了一个十分方便的方法：使用strace。(但其实根据汇编来看也行，但很麻烦)</p><p><img src="/2023/05/07/d3ctf2023%E5%AD%A6%E4%B9%A0/image-20230507181341809.png" alt="starce"></p><p><img src="/2023/05/07/d3ctf2023%E5%AD%A6%E4%B9%A0/image-20230507181409731.png" alt="流程（未完）"></p><p>将结果部分进行修改，再代入wp中的脚本中可以清楚地看到检测的逻辑：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">bytecode = [</span><br><span class="line">    [<span class="number">0x14f</span>, <span class="number">0x1</span>, <span class="number">0</span>, <span class="number">0x3837363534333231</span>, <span class="number">0</span>, <span class="number">0x5564c32f4027</span>, <span class="number">0x7fd40816fa80</span>],</span><br><span class="line">    [<span class="number">0x14f</span>, <span class="number">0x1</span>, <span class="number">0x1</span>, <span class="number">0x6665646362613039</span>, <span class="number">0</span>, <span class="number">0x5564c32f4027</span>, <span class="number">0x7fd40816fa80</span>],</span><br><span class="line">    [<span class="number">0x151</span>, <span class="number">0</span>, <span class="number">0x1</span>, <span class="number">0x6665646362613039</span>, <span class="number">0</span>, <span class="number">0x5564c32f4027</span>, <span class="number">0x7fd40816fa80</span>],</span><br><span class="line">    ...</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mov</span>(<span class="params">code</span>):</span><br><span class="line">    <span class="keyword">match</span> code[<span class="number">1</span>]:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;mov reg[<span class="subst">&#123;code[<span class="number">2</span>]&#125;</span>],reg[<span class="subst">&#123;code[<span class="number">3</span>]&#125;</span>]&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;mov reg[<span class="subst">&#123;code[<span class="number">2</span>]&#125;</span>],<span class="subst">&#123;<span class="built_in">hex</span>(code[<span class="number">3</span>])&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">alu</span>(<span class="params">code</span>):</span><br><span class="line">    <span class="keyword">match</span> code[<span class="number">1</span>]:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;add reg[<span class="subst">&#123;code[<span class="number">2</span>]&#125;</span>],reg[<span class="subst">&#123;code[<span class="number">3</span>]&#125;</span>]&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;sub reg[<span class="subst">&#123;code[<span class="number">2</span>]&#125;</span>],reg[<span class="subst">&#123;code[<span class="number">3</span>]&#125;</span>]&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;mul reg[<span class="subst">&#123;code[<span class="number">2</span>]&#125;</span>],reg[<span class="subst">&#123;code[<span class="number">3</span>]&#125;</span>]&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;xor reg[<span class="subst">&#123;code[<span class="number">2</span>]&#125;</span>],reg[<span class="subst">&#123;code[<span class="number">3</span>]&#125;</span>]&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;shl reg[<span class="subst">&#123;code[<span class="number">2</span>]&#125;</span>],reg[<span class="subst">&#123;code[<span class="number">3</span>]&#125;</span>]&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;shr reg[<span class="subst">&#123;code[<span class="number">2</span>]&#125;</span>],reg[<span class="subst">&#123;code[<span class="number">3</span>]&#125;</span>]&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">push</span>(<span class="params">code</span>):</span><br><span class="line">    <span class="keyword">match</span> code[<span class="number">1</span>]:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;push reg[<span class="subst">&#123;code[<span class="number">2</span>]&#125;</span>]&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;push <span class="subst">&#123;<span class="built_in">hex</span>(code[<span class="number">2</span>])&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pop</span>(<span class="params">code</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;pop reg[<span class="subst">&#123;code[<span class="number">1</span>]&#125;</span>]&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> bytecode:</span><br><span class="line">    <span class="keyword">match</span> i[<span class="number">0</span>]:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">335</span>:</span><br><span class="line">            mov(i)</span><br><span class="line">        <span class="keyword">case</span> <span class="number">336</span>:</span><br><span class="line">            alu(i)</span><br><span class="line">        <span class="keyword">case</span> <span class="number">337</span>:</span><br><span class="line">            push(i)</span><br><span class="line">        <span class="keyword">case</span> <span class="number">338</span>:</span><br><span class="line">            pop(i)</span><br><span class="line">        <span class="keyword">case</span> <span class="number">339</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;resetreg&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> <span class="number">340</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;checkflag&quot;</span>)</span><br></pre></td></tr></table></figure><p>在对逻辑的代码重新整理得到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">input = [32bit] * 6</span><br><span class="line">stack = []</span><br><span class="line">r0 = input[0]</span><br><span class="line">r1 = input[1]</span><br><span class="line">stack.append(r1)</span><br><span class="line">r2 = r0 &lt;&lt; 3 + 0x51e7647e</span><br><span class="line">r3 = r0 * 3 + 0xe0b4140a</span><br><span class="line">r2 = r2 ^ r3</span><br><span class="line">r2 ^= (r0 + 0xe6978f27)</span><br><span class="line">stack.pop()</span><br><span class="line">r1 = r1 + r2</span><br><span class="line">stack.append(r1)</span><br><span class="line">stack.append(r0)</span><br><span class="line">r2 = r1 &lt;&lt; 6 + 0x53a35337</span><br><span class="line">r3 = r1 * 5 + 0x9840294d</span><br><span class="line">r2 = r2 ^ r3</span><br><span class="line">r3 = r1 - 0x5eae4751</span><br><span class="line">r2 = r2 ^ r3</span><br><span class="line">stack.pop(r0)</span><br><span class="line">stack.append(r0 + r2)</span><br><span class="line"></span><br><span class="line">r0 = input[2]</span><br><span class="line">r1 = input[3]</span><br><span class="line">stack.append(0)</span><br><span class="line">r2 = r0 &lt;&lt; 3 + 0x51e7647e</span><br><span class="line">r3 = r0 * 3 + 0xe0b4140a</span><br><span class="line">r2 = r2 ^ r3</span><br><span class="line">r2 ^= (r0 + 0xe6978f27)</span><br><span class="line">stack.pop(r1)</span><br><span class="line">r1 += r2</span><br><span class="line">stack.append(r1)</span><br><span class="line">stack.append(r0)</span><br><span class="line">r2 = r1 &lt;&lt; 6 + 0x53a35337</span><br><span class="line">r3 = r1 * 5 + 0x9840294d</span><br><span class="line">r2 = r2 ^ r3</span><br><span class="line">r2 ^= r1 - 0x5eae4751</span><br><span class="line">stack.pop(r0)</span><br><span class="line">r0 += r2</span><br><span class="line">stack.append(r0)</span><br><span class="line"></span><br><span class="line">r0 = input[4]</span><br><span class="line">r1 = input[5]</span><br><span class="line">stack.append(r1)</span><br><span class="line">r2 = r0 &lt;&lt; 3 + 0x51e7647e</span><br><span class="line">r3 = r0 * 3 + 0xe0b4140a</span><br><span class="line">r2 = r2 ^ r3</span><br><span class="line">r2 ^= r0 + 0xe6978f27</span><br><span class="line">stack.pop(r1)</span><br><span class="line">r1 += r2</span><br><span class="line">stack.append(r1)</span><br><span class="line">stack.append(r0)</span><br><span class="line">r2 = r1 &lt;&lt; 6 + 0x53a35337</span><br><span class="line">r3 = r1 * 5 + 0x9840294d</span><br><span class="line">r2 = r2 ^ r3</span><br><span class="line">r2 ^= r1 - 0x5eae4751</span><br><span class="line">stack.pop(r0)</span><br><span class="line">r0 += r2</span><br><span class="line">stack.append(r0)</span><br></pre></td></tr></table></figure><p>然后就可以写脚本得到flag了。👈官方的wp  (ㄒoㄒ)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">v4 = [<span class="number">0</span>]*<span class="number">7</span></span><br><span class="line">v4[<span class="number">1</span>] = <span class="number">0xB0800699CB89CC89</span></span><br><span class="line">v4[<span class="number">2</span>] = <span class="number">0x4764FD523FA00B19</span></span><br><span class="line">v4[<span class="number">3</span>] = <span class="number">0x396A7E6DF099D700</span></span><br><span class="line">v4[<span class="number">4</span>] = <span class="number">0xB115D56BCDEAF50A</span></span><br><span class="line">v4[<span class="number">5</span>] = <span class="number">0x2521513C985791F4</span></span><br><span class="line">v4[<span class="number">6</span>] = <span class="number">0xB03C06AF93AD0BE</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">7</span>, <span class="number">2</span>):</span><br><span class="line">enc_result = v4[i]</span><br><span class="line">half_1 = v4[i+<span class="number">1</span>] - (((enc_result &lt;&lt; <span class="number">6</span>) + <span class="number">0x53A35337</span>) ^ (enc_result * <span class="number">5</span> +</span><br><span class="line"><span class="number">0x9840294D</span>) ^ (enc_result - <span class="number">0x5EAE4751</span>))</span><br><span class="line">half_1 &amp;= <span class="number">0xffffffffffffffff</span></span><br><span class="line"><span class="built_in">print</span>(half_1.to_bytes(<span class="number">8</span>, <span class="string">&#x27;little&#x27;</span>).decode(), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">half_2 = enc_result - ((((half_1 &lt;&lt; <span class="number">3</span>) + <span class="number">0x51E7647E</span>) ^ ((half_1 * <span class="number">3</span>) +</span><br><span class="line"><span class="number">0x0E0B4140A</span>)) ^ (half_1 + <span class="number">0xE6978F27</span>))</span><br><span class="line">half_2 &amp;= <span class="number">0xffffffffffffffff</span></span><br><span class="line"><span class="built_in">print</span>(half_2.to_bytes(<span class="number">8</span>, <span class="string">&#x27;little&#x27;</span>).decode(), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="comment"># d3ctf&#123;cef9b994-2547-4844-ac0d-a097b75806a0&#125;</span></span><br></pre></td></tr></table></figure><h1 id="d3Hell"><a href="#d3Hell" class="headerlink" title="d3Hell"></a>d3Hell</h1><h2 id="分析dll"><a href="#分析dll" class="headerlink" title="分析dll"></a>分析dll</h2><p>其实，程序与dll的具体关系我还没搞懂，程序在哪里调用的dll我还不清楚，因此跟着wp提示走。</p><p>首先，看DllMain：</p><p><img src="/2023/05/07/d3ctf2023%E5%AD%A6%E4%B9%A0/image-20230509193221462.png" alt="DllMain"></p><p>无论程序如何调用，64FC1628函数一定被调用了，因此查看64FC1628：</p><p><img src="/2023/05/07/d3ctf2023%E5%AD%A6%E4%B9%A0/image-20230509193351163.png" alt="64FC1628函数"></p><p>经wp提示，这里使用了天堂之门（可以从<code>call $+5;</code>,<code>mov [ ], 23</code>,<code>retf</code>观察出），即：</p><ul><li><p><code>call $+5</code>：跳到下一条指令，call指令大小为5，同时将0x666C1642地址入栈；</p></li><li><p><code>mov [rsp+0xA8-0xA4], 23h</code>：将栈顶16位数据的前八位变成0x23</p></li><li><p><code>add [rsp+0xA8-0xA8], 0Dh</code>：将栈顶16位数据 +&#x3D; 0x0D，使其retf返回地址指向0x666C164E</p></li><li><p><code>retf</code>：远返回，该指令会从栈顶取出一个返回地址，再取出一个cs段选择子，这里的CS段变成了0x23，返回地址为0x666C164E，然后开始以32位模式开始0x666C164E处的指令</p></li></ul><p>具体了解天堂之门，看这位✌ [天堂之门 (Heaven’s Gate) C语言实现</p><p>这段32位的指令具体多长目前还不确定，所以先都dump下来，让capstone翻译成32位指令。</p><p><img src="/2023/05/07/d3ctf2023%E5%AD%A6%E4%B9%A0/image-20230509195823808.png" alt="32位指令"></p><p>很明显，前一部分的代码是在异或<code>0x666c169a - 0x666c18ea</code>这部分，</p><p>因此，手动异或后再翻译：</p><p><img src="/2023/05/07/d3ctf2023%E5%AD%A6%E4%B9%A0/image-20230509201456498.png" alt="异或后的32位指令"></p><p><code>0x666c169a - 0x666c16a5</code>的代码是回到64位模式，因此将之后的部分用64位解释。</p><p><img src="/2023/05/07/d3ctf2023%E5%AD%A6%E4%B9%A0/image-20230509201924211.png" alt="结果指令"></p><p>为了方便分析，将以上的处理在ida写脚本处理，然后nop掉异或数据以及模式转换部分的代码。</p><p><img src="/2023/05/07/d3ctf2023%E5%AD%A6%E4%B9%A0/image-20230509202310847.png" alt="61FC1628函数逻辑"></p><p>彻底得到函数逻辑了，但<code>61FC1602()</code>这个函数分析起来好麻烦（感觉是一个将数转化为十进制字符串的过程），所以动态获取flag结果：698740305822331500978964939673142241。</p><p><img src="/2023/05/07/d3ctf2023%E5%AD%A6%E4%B9%A0/image-20230509202501985.png" alt="flag结果"></p><p>注意：</p><ol><li><p>这个flag结果将放在exe的<code>0x405020</code>。</p></li><li><p><code>61FC1628()</code>有检查4,202,264 &#x3D; 0x401f18 地址部分的数据，因此如果要修改Sleep代码，则需要修改下dll。</p><p><img src="/2023/05/07/d3ctf2023%E5%AD%A6%E4%B9%A0/image-20230509203924821.png" alt="0x401f18地址部分代码"></p></li></ol><h2 id="分析exe"><a href="#分析exe" class="headerlink" title="分析exe"></a>分析exe</h2><p>这个程序光是看着就头大，所以就从dll获取的flag调小，去看看每个函数的大概作用。</p><p>这里将flag调为 0x1ED &#x3D; 17 * 29，然后一个个函数大概看看结果啥的。</p><p>因此，大概逻辑就是将flag分解为两个约数，然后都输出十进制数出来。👈这些是wp中说的，我还没分析出来呢</p><p>（具体分析看看有没时间吧  (ㄒoㄒ））</p><p>根据wp，可以跳过最耗费时间的<code>401E64</code>（应该是求约数的函数）然后将xmm0寄存器改为flag的两个约数之一。</p><p><img src="/2023/05/07/d3ctf2023%E5%AD%A6%E4%B9%A0/image-20230510102958001.png" alt="更改xmm0寄存器"></p><p>得到flag：</p><p><img src="/2023/05/07/d3ctf2023%E5%AD%A6%E4%B9%A0/image-20230510103101324.png" alt="flag"></p>]]></content>
      
      
      <categories>
          
          <category> Reverse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Reverse </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>与程序交互的问题</title>
      <link href="/2023/04/05/%E4%B8%8E%E7%A8%8B%E5%BA%8F%E4%BA%A4%E4%BA%92%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2023/04/05/%E4%B8%8E%E7%A8%8B%E5%BA%8F%E4%BA%A4%E4%BA%92%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这个问题是在做逆向时碰到的，就是一个猜数字的游戏，要猜对一百轮，这时，我的第一个想法是写一个自动与程序交互的脚本，于是就开始网上找有没有类似的脚本或方法了。</p><p>首先，要说明的是我并没有做出来关于这个猜数字程序的自动交互脚本，因为在这过程中遇到了个问题，这在下面讲述，所以我的方法只是面向一个简单的test程序：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">char</span> str[<span class="number">10</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;hello\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, str);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s hello&quot;</span>, str);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,str);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;hello %s\n&quot;</span>, str);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其次，我只是对我的方法进行一个叙述，说实话，这个方法很臭，我是真的想不出来好的方法了T_T T_T T_T</p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>使用python的subprocess模块，</p><p>如果将程序输入输出导入subprocess模块的PIPE，即：</p><p><code>p = subprocess.Popen(&quot;test_fflush.exe&quot;, stdin=subprocess.PIPE, stdout=subprocess.PIPE, shell=True, bufsize=0)</code></p><p>之后读取程序输出时使用<code>readline()</code>会堵塞程序的进行。</p><p>如果将程序的输出导入标准输出，然后使用终端运行该脚本，即：</p><p><code>p = subprocess.Popen(&quot;test_fflush.exe&quot;, stdin=subprocess.PIPE, stdout=sys.stdout, shell=True, bufsize=0)</code></p><p>标准输出直接返回到终端上了，我看到但无法在程序中获取。</p><p>如果将程序的输出导入到文件中，同时写入文件时的缓冲区也为0，即：</p><p><code>with open(&#39;file.txt&#39;, &#39;wb+&#39;, buffering=0) as f:</code></p><p><code>p = subprocess.Popen(&quot;test_fflush.exe&quot;, stdin=subprocess.PIPE, stdout=f, shell=True, bufsize=0)</code></p><p>（以下其实并不完全确定是否正确）如果程序具有缓冲区，那程序的输出也无法直接实时地推到文件中，我就无法在程序中读取文件获取程序输出了。在这种情况下，如果程序的缓冲区为0，即每次输出后有<code>fflush()</code>的话，就可以通过执行system命令读取文件内容实时获取输出。</p><p>简而言之就是，单纯交互的方法做不出来。</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>本来想叫这部分内容为解决方法的，但这其实并不能称之为解决方法，毕竟要解决的是与自己写的一个简单的test程序进行交互。</p><p>所以，现在碰到的问题是什么？是无法在脚本执行过程中获取程序的输出。</p><p>在第三种情况：把输出导入到文件中，因为程序的输出在缓冲区没有刷新，文件里没有内容，所以获取不了输出。</p><p>正道走不了就走偏一点。</p><p>因此，想到的第一个方法DLL注入：让程序执行一次<code>setvbuf()</code>，使缓冲区为0。</p><p>好消息：注入成功了；坏消息：没用。</p><p>按理来说是可以的，但我并不清楚为啥不成功。</p><p>然后，想到的第二个方法是IAT hook：每次程序执行完一次输出，就执行<code>fflush()</code>，刷新缓冲区。</p><p>这里要说明的是，我现在要解决的是我的test程序，里面的输出都是由<code>printf()</code>来完成的，所以我清楚我需要直接hook <code>printf()</code>函数，这其实也是这个思路的一个局限，我不一定知道程序的输出采用哪一个输出函数。</p><p>结果同样不行。</p><p>最后，想到的第三个方法是，既然我都实现了IAT hook了，那我直接在我自己写的<code>printf()</code>中获取<code>printf()</code>的参数，然后直接将其写入一个文件中，这样我的脚本就可以读取文件的内容获取每一次输出的内容了。</p><p>结果是这个方法成功了，但麻烦无比。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h4 id="自己的printf-函数"><a href="#自己的printf-函数" class="headerlink" title="自己的printf()函数"></a>自己的<code>printf()</code>函数</h4><p>重写了的<code>printf()</code>函数其实并不美丽，我只是简单写了一下。</p><p>实际上的<code>printf()</code>函数使用的是可变参数来获取其后面的参数，然后根据第一个参数格式字符串来解析后面变量的类型。</p><p>这里，我采用同样的思路，只是解析写得简单了很多，然后使用可变参数获取后面的参数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">MyPrintf</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* formatOri, ...)</span></span><br><span class="line">&#123;</span><br><span class="line">FILE* f = fopen(<span class="string">&quot;output.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (g_OldPfnMsgA != nullptr)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title function_">format</span><span class="params">(formatOri)</span>;</span><br><span class="line"><span class="type">size_t</span> pos = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> parmNum = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> parmType[<span class="number">25</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">while</span> ((pos = format.find(<span class="string">&#x27;%&#x27;</span>, pos)) != <span class="built_in">std</span>::<span class="built_in">string</span>::npos) &#123;</span><br><span class="line"><span class="type">char</span> type = format[pos + <span class="number">1</span>];</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> type_name;</span><br><span class="line"><span class="keyword">switch</span> (type) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;s&#x27;</span>:</span><br><span class="line">parmType[parmNum] = <span class="number">0</span>;</span><br><span class="line">pos += <span class="number">2</span>;</span><br><span class="line">parmNum++;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;d&#x27;</span>:</span><br><span class="line">parmType[parmNum] = <span class="number">1</span>;</span><br><span class="line">pos += <span class="number">2</span>;</span><br><span class="line">parmNum++;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;c&#x27;</span>:</span><br><span class="line">parmType[parmNum] = <span class="number">2</span>;</span><br><span class="line">pos += <span class="number">2</span>;</span><br><span class="line">parmNum++;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">va_list ap;</span><br><span class="line">        <span class="comment">// va_start的第二个参数得是printf的第一个参数，否则找不到后续参数的地址</span></span><br><span class="line">va_start(ap, formatOri);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">fputs</span>(formatOri, f);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; parmNum; i++) &#123;</span><br><span class="line"><span class="keyword">switch</span> (parmType[i]) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line"><span class="built_in">fprintf</span>(f, <span class="string">&quot;%s\n&quot;</span>, va_arg(ap, <span class="type">char</span>*));</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="built_in">fprintf</span>(f, <span class="string">&quot;%d\n&quot;</span>, va_arg(ap, <span class="type">int</span>));</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line"><span class="built_in">fprintf</span>(f, <span class="string">&quot;%c\n&quot;</span>, va_arg(ap, <span class="type">char</span>));</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fclose(f);</span><br><span class="line">va_end(ap);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;真的进去了！！！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="交互脚本"><a href="#交互脚本" class="headerlink" title="交互脚本"></a>交互脚本</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">p = subprocess.Popen(<span class="string">&quot;test.exe&quot;</span>, stdin=subprocess.PIPE,</span><br><span class="line">                     stdout=subprocess.PIPE, stderr=sys.stderr, shell=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">while</span> p.poll() <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    out = <span class="built_in">open</span>(<span class="string">&quot;output.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(out.readlines())</span><br><span class="line">    out.close()</span><br><span class="line">    p.stdin.write((<span class="built_in">input</span>() + <span class="string">&#x27;\n&#x27;</span>).encode())</span><br><span class="line">    p.stdin.flush()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 杂 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划</title>
      <link href="/2023/04/05/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
      <url>/2023/04/05/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>以下只是碰到问题的解决方法，顺便对学习到的算法记录一些笔记，并非彻底地讲解动态规划算法</p><h1 id="问题叙述"><a href="#问题叙述" class="headerlink" title="问题叙述"></a>问题叙述</h1><p>以下代码只是对问题的一个简要的描述，实际上十六个数组的元素都不为0。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">0</span>] * <span class="number">16</span></span><br><span class="line">b, c, d, e, f, g, h, i, j, k, l, m, n, o, p = [[<span class="number">0</span>] * <span class="number">16</span>] * <span class="number">16</span>, [[<span class="number">0</span>] * <span class="number">16</span>] * <span class="number">16</span>, [[<span class="number">0</span>] * <span class="number">16</span>] * <span class="number">16</span>, [[<span class="number">0</span>] * <span class="number">16</span>] * <span class="number">16</span>, </span><br><span class="line">[[<span class="number">0</span>] * <span class="number">16</span>] * <span class="number">16</span>, [[<span class="number">0</span>] * <span class="number">16</span>] * <span class="number">16</span>, [[<span class="number">0</span>] * <span class="number">16</span>] * <span class="number">16</span>, [[<span class="number">0</span>] * <span class="number">16</span>] * <span class="number">16</span>, </span><br><span class="line">[[<span class="number">0</span>] * <span class="number">16</span>] * <span class="number">16</span>, [[<span class="number">0</span>] * <span class="number">16</span>] * <span class="number">16</span>, [[<span class="number">0</span>] * <span class="number">16</span>] * <span class="number">16</span>, [[<span class="number">0</span>] * <span class="number">16</span>] * <span class="number">16</span>, </span><br><span class="line">[[<span class="number">0</span>] * <span class="number">16</span>] * <span class="number">16</span>, [[<span class="number">0</span>] * <span class="number">16</span>] * <span class="number">16</span>, [[<span class="number">0</span>] * <span class="number">16</span>] * <span class="number">16</span>, </span><br><span class="line">arrays = [b, c, d, e, f, g, h, i, j, k, l, m, n, o, p]</span><br><span class="line">result = <span class="number">1</span></span><br><span class="line">index_r = randon.randomint(<span class="number">0</span>, <span class="number">15</span>)</span><br><span class="line">result *= a[index_r]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">15</span>):</span><br><span class="line">index_c = randon.randomint(<span class="number">0</span>, <span class="number">15</span>)</span><br><span class="line">result *= arrays[i][index_r][index_c]</span><br><span class="line">index_r = index_c</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><p>可以看出，这段代码通过十六次的随机选择生成一个result，现在需要将这个result最小化，即求出result的最小值。</p><h1 id="解决过程"><a href="#解决过程" class="headerlink" title="解决过程"></a>解决过程</h1><p>对于一个不懂算法的人，第一想法肯定是穷举，但复杂度为$16^16$，明显无法解决。</p><p>第二个想法是贪心算法，即每一次选择就选择最小的那一个数，但这无法达到全局最优解。</p><p>最后的方法就是动态规划了。</p><h2 id="动态规划算法思想"><a href="#动态规划算法思想" class="headerlink" title="动态规划算法思想"></a>动态规划算法思想</h2><blockquote><p>A * “1+1+1+1+1+1+1+1 &#x3D;？” *</p><p>A : “上面等式的值是多少”<br>B : <em>计算</em> “8!”</p><p>A *在上面等式的左边写上 “1+” *<br>A : “此时等式的值为多少”<br>B : <em>quickly</em> “9!”<br>A : “你怎么这么快就知道答案了”<br>A : “只要在8的基础上加1就行了”<br>A : “所以你不用重新计算因为你记住了第一个等式的值为8!</p><p>动态规划算法也可以说是 ‘记住求过的解来节省时间’”</p></blockquote><p>简单来说，动态规划其实就是，给定一个问题，我们把它拆成一个个子问题，直到子问题可以直接解决。然后呢，把子问题答案保存起来，以减少重复计算。再根据子问题答案反推，得出原问题解的一种方法。</p><p>对于斐波拉契数列，求F(n)时，使用动态规划算法有两种方式：①自顶向下的备忘录法；②自底向上。</p><p>自顶向下的备忘录法就是每次计算出F(a) (a &lt; n)时，记录下F(a)，如此就不需要每次计算F(b)，F(b+1)时重复计算F(b)和F(b-1)了。</p><p>自底向上的方法就是从F(1)出发，以此计算F(2)、F(3)、F(4)……如此，一直计算到F(n)。</p><h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><p>那对于上面的问题应该怎么解决呢？</p><p>先简化一下问题，现在面对的是一个1×3的数组和两个3×3的数组：</p><p><img src="/2023/04/05/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/image-20230405145317757.png" alt="简化问题"></p><p>选中a的一个元素，与b中对应的元素相乘，得到结果result1：（按照规则：a中的列要对应b中的行）</p><p><img src="/2023/04/05/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/image-20230405145420183.png" alt="result1"></p><p>显然，到b为止，最小值为10。</p><p>选中result1的一个元素，与c中对应的元素相乘，得到结果result2：（按照规则：result1中的列要对应c中的行，因为result1的每一个元素的位置与相乘的b的元素的位置相同）。先考虑result1[i][0]×c[0][i]:</p><p><img src="/2023/04/05/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/image-20230405145626564.png" alt="result1(i)(0)×c(0)(i)"></p><p>因为result[i][0]中result[1][0]是最小的，因此对于result1[i][0]×c[0][i]的每一列来说，最小值都是第二行的值。</p><p>而当还要往后计算d时，result1的位置信息是无用的，只需要知道得到该结果所相乘的c的元素的位置信息。</p><p>因此，只需知道result1[1][0]×c[0][i]。</p><p>即：使用result的每一列的最小值乘以下一个数组的对应行的每一个元素，得到下一个result数组。</p><p><img src="/2023/04/05/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/image-20230405145718352.png" alt="result2"></p><p>运用类似的思想去更新result数组，这个result数组其实就是每一层的dp，dp的最后一层的最小值就是我们所要求最小值。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># step是所有16×16的二维数组，step0是1×16的一维数组</span></span><br><span class="line">n = <span class="built_in">len</span>(step)</span><br><span class="line">dp = [[[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">15</span>)]</span><br><span class="line"><span class="comment"># prev的目的：获取最小值的每一轮选择</span></span><br><span class="line">prev = [[[<span class="literal">None</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">15</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        dp[<span class="number">0</span>][i][j] = step0[i] * step1[i][j]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">15</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        min_val_col = <span class="number">100</span></span><br><span class="line">        row_of_min_val = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">            <span class="comment"># 遍历第n-1层的dp第i列的最小值</span></span><br><span class="line">            <span class="keyword">if</span> dp[n-<span class="number">1</span>][m][i] &lt; min_val_col:</span><br><span class="line">                min_val_col = dp[n-<span class="number">1</span>][m][i]</span><br><span class="line">                row_of_min_val = m</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">            <span class="comment"># 第n个表完全与第n-1个表有关， 可以与第n-2个表有关、但可以看作无关</span></span><br><span class="line">            dp[n][i][j] = min_val_col * step[n][i][j]</span><br><span class="line">            prev[n][i][j] = row_of_min_val</span><br><span class="line">            <span class="comment"># pre记录了第n层[i][j]位置来自于第n-1层的哪一行，由于第n-1层的列决定了第n层的行，因此又可以通过i来确定第n-1层的列</span></span><br><span class="line"></span><br><span class="line">min_val_ans = <span class="number">100</span></span><br><span class="line">min_i = <span class="literal">None</span></span><br><span class="line">min_j = <span class="literal">None</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        <span class="keyword">if</span> min_val_ans &gt; dp[<span class="number">14</span>][i][j]:</span><br><span class="line">            min_val_ans = dp[<span class="number">14</span>][i][j]</span><br><span class="line">            min_i = i</span><br><span class="line">            min_j = j</span><br><span class="line"></span><br><span class="line">path = [(<span class="number">14</span>, min_i, min_j)]</span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">14</span>, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">    i, j = path[-<span class="number">1</span>][<span class="number">1</span>], path[-<span class="number">1</span>][<span class="number">2</span>]</span><br><span class="line">    m = prev[n][i][j]  </span><br><span class="line">    <span class="comment"># m是第n层来自于第n-1层的那一行</span></span><br><span class="line">    path.append((n-<span class="number">1</span>, m, i))</span><br><span class="line">path.reverse()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QExtend-300</title>
      <link href="/2023/03/23/QExtend/"/>
      <url>/2023/03/23/QExtend/</url>
      
        <content type="html"><![CDATA[<h1 id="QExtend——XCTF"><a href="#QExtend——XCTF" class="headerlink" title="QExtend——XCTF"></a>QExtend——XCTF</h1><h2 id="函数主逻辑"><a href="#函数主逻辑" class="headerlink" title="函数主逻辑"></a>函数主逻辑</h2><p><img src="/2023/03/23/QExtend/image-20230323103139408.png" alt="主逻辑"></p><p>开始函数的逻辑，标记的一行为将输入的第四位和最后一位都变成0，即去掉flag中的{}，然后比较前四位是否位ZCTF，最后再使用flag中{}中的字符串。</p><h2 id="sub-4026D0函数"><a href="#sub-4026D0函数" class="headerlink" title="sub_4026D0函数"></a>sub_4026D0函数</h2><p>进入<code>loc_4026D0</code>可以看到，这其实应该是一个函数，但被数据断开了，但经过不更改代码的调试发现<code>0x4026E5</code>的数据在之后会被用到，因此如果要程序正常执行就不能直接使用nop将其覆盖。</p><p><img src="/2023/03/23/QExtend/image-20230323103226099.png" alt="sub_4026D0汇编代码"></p><p>先忽略这个数据，使用nop覆盖。</p><p><img src="/2023/03/23/QExtend/image-20230323103259763.png" alt="nop后的汇编代码"></p><p>获得<code>sub_4026D0</code>函数的主要逻辑。</p><p><img src="/2023/03/23/QExtend/image-20230323103310285.png" alt="sub_4026D0函数主要逻辑"></p><p>再进入switch的各个case的函数中看一下。</p><p><img src="/2023/03/23/QExtend/image-20230323103322567.png" alt="sub_4026D0函数的case0中的函数"></p><p>这里被标记的行有将函数返回地址进行加一的操作，可以将其nop掉，因为函数返回地址处的指令没有啥作用。</p><h3 id="回看被nop的数据"><a href="#回看被nop的数据" class="headerlink" title="回看被nop的数据"></a>回看被nop的数据</h3><p><img src="/2023/03/23/QExtend/image-20230323103357350.png" alt="hanoi数据"></p><p>此处的call会将函数返回地址压入栈中，而返回地址<code>0x4026E5</code>就是数据的地址，通过这种方法，当跳入<code>sub_4026F5</code>函数时，使用pop就可以获得数据的地址，然后继续下方的指令。</p><p><code>sub_4026F5</code>函数没有<code>push ebp；mov ebp esp；</code>环节因此，第一个出栈的就是函数返回地址。</p><p><img src="/2023/03/23/QExtend/v2-039d97b92f66e84801938c0e4b63e7cf_720w.png" alt="调用函数时的栈情况"></p><p>此处将数据的地址pop到esi中，而且还使用<code>mov [ebp-0Ch]，esi;</code>将数据地址复制到一个参数上。esi到switch的各case的函数中之前都没有更改，因此各case中的函数直接使用esi来获取数据。</p><p><img src="/2023/03/23/QExtend/image-20230323103444426.png" alt="获取数据"></p><p>图中esi的位置就是指向数据的地址，函数直接使用。</p><h3 id="switch各case中的函数的逻辑。"><a href="#switch各case中的函数的逻辑。" class="headerlink" title="switch各case中的函数的逻辑。"></a>switch各case中的函数的逻辑。</h3><p>因为这里看了别的师傅的wp，因此知道这是一个hanoi游戏。</p><p><img src="/2023/03/23/QExtend/image-20230323114812681.png" alt="case中函数的逻辑"></p><p>其他case中的函数，大差不差。</p><p>6个case分别对应这hanoi游戏中三列的互相移动。</p><p>switch存在与0xF相与再减一的操作（看汇编或者未nop的程序逻辑）。</p><p><img src="/2023/03/23/QExtend/image-20230323103751307.png" alt="switch"></p><p>看if中的函数sub_402490，这是检查每一步操作是否符合hanoi规则的。</p><p><img src="/2023/03/23/QExtend/image-20230323103644727.png" alt="检验函数"></p><h3 id="sub-4026F5的返回值。"><a href="#sub-4026F5的返回值。" class="headerlink" title="sub_4026F5的返回值。"></a>sub_4026F5的返回值。</h3><p><img src="/2023/03/23/QExtend/image-20230323103821747.png" alt="返回值"></p><p>对比汇编和伪代码。可以看出a2就是[ebp-0Ch]，上面说过这是某数据的地址，这里获取了数据的第5、6、7、8、9位，再将它们进行&amp;&amp;运算，将结果作为返回值。</p><p><img src="/2023/03/23/QExtend/image-20230323103835935.png" alt="返回值"></p><h2 id="sub-402800函数。"><a href="#sub-402800函数。" class="headerlink" title="sub_402800函数。"></a>sub_402800函数。</h2><p><img src="/2023/03/23/QExtend/image-20230323101337439.png" alt="汇编代码"></p><p>可以看出它与下方的<code>sub_40282E</code>其实应该是连在一起的。</p><p>现在看着汇编进行分析。</p><p><img src="/2023/03/23/QExtend/image-20230323101536470.png" alt="堆调用"></p><p>当程序执行<code>sub_40282E</code>时，<code>sub_40282E</code>函数没有进行正常的调节栈顶栈底操作，而是<code>pop esi;</code>，这将函数返回地址给pop出来了，程序将其放置在<code>[ebp-4]</code>中，这在程序之后会用到。</p><p><img src="/2023/03/23/QExtend/image-20230323101900462.png" alt="函数返回处"></p><p>在看到<code>sub_40282E</code>的最后，它进行了调节栈顶栈底的操作，但函数开始时并没有其对应的操作，因此在这里它调节的是<code>sub_40282E</code>的上一级函数<code>sub_402800</code>函数的堆栈，它将堆栈还原成<code>start</code>函数（即程序主逻辑函数）调用<code>sub_402800</code>函数时的堆栈，而此时栈顶的值是<code>sub_402800</code>函数的返回地址。</p><p>程序通过这样子的逻辑跳过了调用<code>sub_40282E</code>函数需要再返回调用处的流程。</p><p><img src="/2023/03/23/QExtend/image-20230323102432094.png" alt="md5数据"></p><p>上面说了这一部分是程序之后流程需要的数据，所以如果要想不干扰程序正常流程就不能改变它，但在这里为了获取伪代码，先将他nop掉，将<code>sub_402800</code>和<code>sub_40282E</code>连起来。</p><p><img src="/2023/03/23/QExtend/image-20230323102827971.png" alt="具体逻辑"></p><p>观察未nop的程序汇编就可以发现比较的字符串string1就是之前<code>sub_40282E</code>返回地址的那部分数据。</p><p><img src="/2023/03/23/QExtend/image-20230323103042610.png" alt="获取的数据"></p><h2 id="编写脚本"><a href="#编写脚本" class="headerlink" title="编写脚本"></a>编写脚本</h2><h3 id="程序逻辑"><a href="#程序逻辑" class="headerlink" title="程序逻辑"></a>程序逻辑</h3><p>获取用户输入，将{}中的内容提取出来；</p><p>根据输入，进行hanoi游戏，将每一块从大到小放置在第二列上；</p><p>将输入生成md5，进行比较；</p><p>hanoi初始状态和需要达到的状态：</p><p><img src="/2023/03/23/QExtend/image-20230323105523254.png" alt="数据形式"></p><p>手动玩一下，得到流程：053254104123104524104，也可以找个脚本跑一下。</p><p>因为程序在switch时进行了与0xF相与再减一的操作，因此满足条件的字符串有很多，但最后需要字符串的md5与上面数据相同，即：<code>0x30, 0x46, 0x32, 0x45, 0x37, 0x45, 0x34, 0x34, 0x37, 0x35,0x39, 0x33, 0x45, 0x43, 0x39, 0x41, 0x46, 0x33, 0x34, 0x36, 0x33, 0x45, 0x39, 0x43, 0x38, 0x37, 0x34, 0x35, 0x42, 0x38, 0x39 , 0x32</code>。</p><h3 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">oper = <span class="string">&quot;053254104123104524104&quot;</span></span><br><span class="line">oper = [<span class="built_in">int</span>(i) + <span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> oper]</span><br><span class="line"><span class="comment"># 六种输入char对应六种case方法</span></span><br><span class="line"><span class="comment"># oper是符合条件输入的低位</span></span><br><span class="line"><span class="comment"># 符合条件的输入 为 oper 补足 它的高位</span></span><br><span class="line">high_bit = [<span class="number">0x20</span>, <span class="number">0x30</span>, <span class="number">0x40</span>, <span class="number">0x50</span>, <span class="number">0x60</span>, <span class="number">0x70</span>]</span><br><span class="line">final = [</span><br><span class="line">    <span class="number">0x30</span>, <span class="number">0x46</span>, <span class="number">0x32</span>, <span class="number">0x45</span>, <span class="number">0x37</span>, <span class="number">0x45</span>, <span class="number">0x34</span>, <span class="number">0x34</span>, <span class="number">0x37</span>, <span class="number">0x35</span>,</span><br><span class="line">    <span class="number">0x39</span>, <span class="number">0x33</span>, <span class="number">0x45</span>, <span class="number">0x43</span>, <span class="number">0x39</span>, <span class="number">0x41</span>, <span class="number">0x46</span>, <span class="number">0x33</span>, <span class="number">0x34</span>, <span class="number">0x36</span>,</span><br><span class="line">    <span class="number">0x33</span>, <span class="number">0x45</span>, <span class="number">0x39</span>, <span class="number">0x43</span>, <span class="number">0x38</span>, <span class="number">0x37</span>, <span class="number">0x34</span>, <span class="number">0x35</span>, <span class="number">0x42</span>, <span class="number">0x38</span>,</span><br><span class="line">    <span class="number">0x39</span>, <span class="number">0x32</span></span><br><span class="line">]</span><br><span class="line">final_s = <span class="string">&quot;&quot;</span>.join(<span class="built_in">chr</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> final)</span><br><span class="line">final_s = final_s.lower()</span><br><span class="line"><span class="built_in">print</span>(final_s)</span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> high_bit:</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> high_bit:</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> high_bit:</span><br><span class="line">            <span class="keyword">for</span> d <span class="keyword">in</span> high_bit:</span><br><span class="line">                <span class="keyword">for</span> e <span class="keyword">in</span> high_bit:</span><br><span class="line">                    <span class="keyword">for</span> f <span class="keyword">in</span> high_bit:</span><br><span class="line">                        now_oper = []</span><br><span class="line">                        <span class="keyword">for</span> i <span class="keyword">in</span> oper:</span><br><span class="line">                            <span class="keyword">match</span> i:</span><br><span class="line">                                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                                    now_oper.append(i + a)</span><br><span class="line">                                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                                    now_oper.append(i + b)</span><br><span class="line">                                <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                                    now_oper.append(i + c)</span><br><span class="line">                                <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                                    now_oper.append(i + d)</span><br><span class="line">                                <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                                    now_oper.append(i + e)</span><br><span class="line">                                <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                                    now_oper.append(i + f)</span><br><span class="line">                        now_str = <span class="string">&quot;&quot;</span>.join(<span class="built_in">chr</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> now_oper)</span><br><span class="line">                        md5 = hashlib.md5(now_str.encode())</span><br><span class="line">                        result = md5.hexdigest()</span><br><span class="line">                        <span class="keyword">if</span> result == final_s:</span><br><span class="line">                            <span class="built_in">print</span>(now_str)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Reverse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Reverse </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SCU2022新生赛</title>
      <link href="/2022/11/18/SCU2022%E6%96%B0%E7%94%9F%E8%B5%9B/"/>
      <url>/2022/11/18/SCU2022%E6%96%B0%E7%94%9F%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<h1 id="SCU2022新生赛"><a href="#SCU2022新生赛" class="headerlink" title="SCU2022新生赛"></a>SCU2022新生赛</h1><h2 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h2><p><img src="/2022/11/18/SCU2022%E6%96%B0%E7%94%9F%E8%B5%9B/image-20221118153813903.png" alt="签到"></p><h1 id="Tower-of-Hanoi"><a href="#Tower-of-Hanoi" class="headerlink" title="Tower_of_Hanoi"></a>Tower_of_Hanoi</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> x[<span class="number">35</span>]=&#123;</span><br><span class="line"><span class="number">0x1BF21</span>, <span class="number">0x1BF31</span>, <span class="number">0x1BF27</span>, <span class="number">0x1BF31</span>, <span class="number">0x1BF26</span>, <span class="number">0x1BF34</span>, <span class="number">0x1BF29</span>,</span><br><span class="line"> <span class="number">0x1BF20</span>, <span class="number">0x1BF37</span>, <span class="number">0x1BF24</span>, <span class="number">0x1BF37</span>, <span class="number">0x1BF20</span>, <span class="number">0x1BF21</span>, <span class="number">0x1BF37</span>,</span><br><span class="line"> <span class="number">0x1BF0D</span>, <span class="number">0x1BF3B</span>, <span class="number">0x1BF21</span>, <span class="number">0x1BF0D</span>, <span class="number">0x1BF24</span>, <span class="number">0x1BF37</span>, <span class="number">0x1BF20</span>,</span><br><span class="line"> <span class="number">0x1BF2B</span>, <span class="number">0x1BF0D</span>, <span class="number">0x1BF3B</span>, <span class="number">0x1BF3C</span>, <span class="number">0x1BF26</span>, <span class="number">0x1BF37</span>, <span class="number">0x1BF20</span>,</span><br><span class="line"> <span class="number">0x1BF37</span>, <span class="number">0x1BF21</span>, <span class="number">0x1BF26</span>, <span class="number">0x1BF3B</span>, <span class="number">0x1BF3C</span>, <span class="number">0x1BF35</span>, <span class="number">0x1BF2F</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">35</span>;i++)&#123;</span><br><span class="line"><span class="built_in">putchar</span>(x[i]^<span class="number">0x1bf52</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="ez-Android"><a href="#ez-Android" class="headerlink" title="ez_Android"></a>ez_Android</h1><h3 id="主体逻辑"><a href="#主体逻辑" class="headerlink" title="主体逻辑"></a>主体逻辑</h3><p><img src="/2022/11/18/SCU2022%E6%96%B0%E7%94%9F%E8%B5%9B/image-20221118154221715.png" alt="代码"></p><p>即要获取一串0与1组成的字符串，使用check函数检查。</p><h3 id="check函数"><a href="#check函数" class="headerlink" title="check函数"></a>check函数</h3><p>将apk解压从lib文件夹中找到so文件，check函数就在里面。</p><p><img src="/2022/11/18/SCU2022%E6%96%B0%E7%94%9F%E8%B5%9B/image-20221118154650130.png" alt="代码"></p><p>根据点击得到的10序列变化基数1，从而得到数组f的下标，再从而得到某特定的值，该值应该对应 likeAndroid字符串的对应位的ASCII值</p><h3 id="解题脚本"><a href="#解题脚本" class="headerlink" title="解题脚本"></a>解题脚本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">b = [</span><br><span class="line">    <span class="number">0x0</span>, <span class="number">0x0</span>, <span class="number">0x0</span>, <span class="number">0x0</span>, <span class="number">0x0</span>, <span class="number">0x0</span>, <span class="number">0x0</span>, <span class="number">0x0</span>, <span class="number">0x0</span>, <span class="number">0x0</span>,</span><br><span class="line">    ...</span><br><span class="line">    <span class="number">0x0</span>, <span class="number">0x0</span>, <span class="number">0x0</span>, <span class="number">0x0</span>, <span class="number">0x0</span>, <span class="number">0x0</span>, <span class="number">0x0</span>, <span class="number">0x0</span>, <span class="number">0x0</span>, <span class="number">0x0</span></span><br><span class="line">]</span><br><span class="line">c = []</span><br><span class="line">d = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(b)):</span><br><span class="line">    <span class="keyword">if</span> b[i] != <span class="number">0</span>:</span><br><span class="line">        c.append(b[i])</span><br><span class="line">        d.append(i)</span><br><span class="line"></span><br><span class="line">a = <span class="string">&quot;even if i only have seven seconds of memory, even if i forget the world, i still love android&quot;</span></span><br><span class="line">total = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    num = <span class="number">0</span></span><br><span class="line">    frq = []</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">ord</span>(i) == c[j]:</span><br><span class="line">            num = d[j]</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> num == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;wrong&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">while</span> num != <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">if</span> num % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">            num = num // <span class="number">2</span></span><br><span class="line">            frq.append(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            num = (num - <span class="number">1</span>) // <span class="number">2</span></span><br><span class="line">            frq.append(<span class="number">1</span>)</span><br><span class="line">    frq.reverse()</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> frq:</span><br><span class="line">        total.append(t)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> total:</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;1&quot;</span>, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> i == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;0&quot;</span>, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;wrong&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>最终得到01字符串</p><h1 id="DEGUB"><a href="#DEGUB" class="headerlink" title="DEGUB"></a>DEGUB</h1><h3 id="调试过程"><a href="#调试过程" class="headerlink" title="调试过程"></a>调试过程</h3><p>当执行到除0异常时，更改eip，跳过除0异常。</p><p>由调试可发现，程序只是对Input字符串进行位置变换处理。</p><p>故，可以根据输入的字符串a变换后的结果b，去获取这个变换的过程。</p><h3 id="解题脚本-1"><a href="#解题脚本-1" class="headerlink" title="解题脚本"></a>解题脚本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;0123456789abcdefghijklmnopqrstuv&quot;</span></span><br><span class="line">b = [<span class="number">0x35</span>, <span class="number">0x67</span>, <span class="number">0x64</span>, <span class="number">0x33</span>, <span class="number">0x69</span>, <span class="number">0x75</span>, <span class="number">0x71</span>, <span class="number">0x68</span>, <span class="number">0x72</span>, <span class="number">0x6B</span>,</span><br><span class="line">     <span class="number">0x6A</span>, <span class="number">0x74</span>, <span class="number">0x30</span>, <span class="number">0x34</span>, <span class="number">0x37</span>, <span class="number">0x31</span>, <span class="number">0x38</span>, <span class="number">0x65</span>, <span class="number">0x36</span>, <span class="number">0x70</span>,</span><br><span class="line">     <span class="number">0x63</span>, <span class="number">0x6C</span>, <span class="number">0x39</span>, <span class="number">0x6E</span>, <span class="number">0x6F</span>, <span class="number">0x61</span>, <span class="number">0x6D</span>, <span class="number">0x73</span>, <span class="number">0x32</span>, <span class="number">0x62</span>,</span><br><span class="line">     <span class="number">0x76</span>, <span class="number">0x66</span>]</span><br><span class="line">c = <span class="string">&quot;fa+cmRG25L5Cst5cqO&#123;CLmy6YigZu6&#125;5&quot;</span></span><br><span class="line">d = [<span class="number">0</span>] * <span class="number">32</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">        <span class="keyword">if</span> b[i] == <span class="built_in">ord</span>(a[j]):</span><br><span class="line">            d[j] = <span class="built_in">ord</span>(c[i])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> d:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(i), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># scuctf&#123;5qyi6L+O5a2m5Lmg6YCG5ZCR&#125;</span></span><br></pre></td></tr></table></figure><h1 id="base"><a href="#base" class="headerlink" title="base"></a>base</h1><h3 id="程序逻辑"><a href="#程序逻辑" class="headerlink" title="程序逻辑"></a>程序逻辑</h3><p>类似走迷宫，dword_4D7258不能进行变换，因此走的位置在maze中不能为0。</p><p>go_way_1和go_way_2是走迷宫的方式，目标是x、y都为29</p><p><img src="/2022/11/18/SCU2022%E6%96%B0%E7%94%9F%E8%B5%9B/image-20221118162606895-16687601452271.png" alt="代码"></p><h3 id="解题脚本-2"><a href="#解题脚本-2" class="headerlink" title="解题脚本"></a>解题脚本</h3><p>使用DFS方法走迷宫</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">a = [</span><br><span class="line">    <span class="number">0x20</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    ...</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span></span><br><span class="line">]</span><br><span class="line">b = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a) // <span class="number">4</span>):</span><br><span class="line">    b.append(a[i * <span class="number">4</span>])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(b)):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">30</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>()</span><br><span class="line">    <span class="keyword">if</span> b[i] != <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;0&#x27;</span>, end=<span class="string">&quot;, &quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span>, end=<span class="string">&quot;, &quot;</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line">b[<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gomaze</span>(<span class="params">x, y, flag, maze</span>):</span><br><span class="line">    newflag = flag</span><br><span class="line">    newmaze = []</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> maze:</span><br><span class="line">        newmaze.append(t)</span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">29</span> <span class="keyword">and</span> y == <span class="number">29</span>:</span><br><span class="line">        <span class="built_in">print</span>(newflag)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="number">30</span> &gt; x + <span class="number">2</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> <span class="number">30</span> &gt; y - <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> b[x + <span class="number">2</span> + <span class="number">30</span> * (y - <span class="number">1</span>)] != <span class="number">0</span>:</span><br><span class="line">        b[x + <span class="number">2</span> + <span class="number">30</span> * (y - <span class="number">1</span>)] = <span class="number">0</span></span><br><span class="line">        gomaze(x + <span class="number">2</span>, y - <span class="number">1</span>, flag + <span class="string">&#x27;0&#x27;</span>, newmaze)</span><br><span class="line">        b[x + <span class="number">2</span> + <span class="number">30</span> * (y - <span class="number">1</span>)] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="number">30</span> &gt; x + <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> <span class="number">30</span> &gt; y - <span class="number">2</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> b[x + <span class="number">1</span> + <span class="number">30</span> * (y - <span class="number">2</span>)] != <span class="number">0</span>:</span><br><span class="line">        b[x + <span class="number">1</span> + <span class="number">30</span> * (y - <span class="number">2</span>)] = <span class="number">0</span></span><br><span class="line">        gomaze(x + <span class="number">1</span>, y - <span class="number">2</span>, flag + <span class="string">&#x27;1&#x27;</span>, newmaze)</span><br><span class="line">        b[x + <span class="number">1</span> + <span class="number">30</span> * (y - <span class="number">2</span>)] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="number">30</span> &gt; x - <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> <span class="number">30</span> &gt; y - <span class="number">2</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> b[x - <span class="number">1</span> + <span class="number">30</span> * (y - <span class="number">2</span>)] != <span class="number">0</span>:</span><br><span class="line">        b[x - <span class="number">1</span> + <span class="number">30</span> * (y - <span class="number">2</span>)] = <span class="number">0</span></span><br><span class="line">        gomaze(x - <span class="number">1</span>, y - <span class="number">2</span>, flag + <span class="string">&#x27;2&#x27;</span>, newmaze)</span><br><span class="line">        b[x - <span class="number">1</span> + <span class="number">30</span> * (y - <span class="number">2</span>)] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="number">30</span> &gt; x - <span class="number">2</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> <span class="number">30</span> &gt; y - <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> b[x - <span class="number">2</span> + <span class="number">30</span> * (y - <span class="number">1</span>)] != <span class="number">0</span>:</span><br><span class="line">        b[x - <span class="number">2</span> + <span class="number">30</span> * (y - <span class="number">1</span>)] = <span class="number">0</span></span><br><span class="line">        gomaze(x - <span class="number">2</span>, y - <span class="number">1</span>, flag + <span class="string">&#x27;3&#x27;</span>, newmaze)</span><br><span class="line">        b[x - <span class="number">2</span> + <span class="number">30</span> * (y - <span class="number">1</span>)] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="number">30</span> &gt; x + <span class="number">2</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> <span class="number">30</span> &gt; y + <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> b[x + <span class="number">2</span> + <span class="number">30</span> * (y + <span class="number">1</span>)] != <span class="number">0</span>:</span><br><span class="line">        b[x + <span class="number">2</span> + <span class="number">30</span> * (y + <span class="number">1</span>)] = <span class="number">0</span></span><br><span class="line">        gomaze(x + <span class="number">2</span>, y + <span class="number">1</span>, flag + <span class="string">&#x27;4&#x27;</span>, newmaze)</span><br><span class="line">        b[x + <span class="number">2</span> + <span class="number">30</span> * (y + <span class="number">1</span>)] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="number">30</span> &gt; x + <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> <span class="number">30</span> &gt; y + <span class="number">2</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> b[x + <span class="number">1</span> + <span class="number">30</span> * (y + <span class="number">2</span>)] != <span class="number">0</span>:</span><br><span class="line">        b[x + <span class="number">1</span> + <span class="number">30</span> * (y + <span class="number">2</span>)] = <span class="number">0</span></span><br><span class="line">        gomaze(x + <span class="number">1</span>, y + <span class="number">2</span>, flag + <span class="string">&#x27;5&#x27;</span>, newmaze)</span><br><span class="line">        b[x + <span class="number">1</span> + <span class="number">30</span> * (y + <span class="number">2</span>)] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="number">30</span> &gt; x - <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> <span class="number">30</span> &gt; y + <span class="number">2</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> b[x - <span class="number">1</span> + <span class="number">30</span> * (y + <span class="number">2</span>)] != <span class="number">0</span>:</span><br><span class="line">        b[x - <span class="number">1</span> + <span class="number">30</span> * (y + <span class="number">2</span>)] = <span class="number">0</span></span><br><span class="line">        gomaze(x - <span class="number">1</span>, y + <span class="number">2</span>, flag + <span class="string">&#x27;6&#x27;</span>, newmaze)</span><br><span class="line">        b[x - <span class="number">1</span> + <span class="number">30</span> * (y + <span class="number">2</span>)] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="number">30</span> &gt; x - <span class="number">2</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> <span class="number">30</span> &gt; y + <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> b[x - <span class="number">2</span> + <span class="number">30</span> * (y + <span class="number">1</span>)] != <span class="number">0</span>:</span><br><span class="line">        b[x - <span class="number">2</span> + <span class="number">30</span> * (y + <span class="number">1</span>)] = <span class="number">0</span></span><br><span class="line">        gomaze(x - <span class="number">2</span>, y + <span class="number">1</span>, flag + <span class="string">&#x27;7&#x27;</span>, newmaze)</span><br><span class="line">        b[x - <span class="number">2</span> + <span class="number">30</span> * (y + <span class="number">1</span>)] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gomaze(<span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;&#x27;</span>, b)</span><br></pre></td></tr></table></figure><h1 id="dp"><a href="#dp" class="headerlink" title="dp"></a>dp</h1><h3 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h3><p>使用pyinstxtractor将exe转化回py，得到的t4文件，在其文件头加入pyc文件头，然后使用uncompyle6将pyc转化为py，得到程序逻辑。</p><p>该程序需要点击一定次数后开始运行flag字符串生成，其生成逻辑如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">gogogo</span>(<span class="params">self, x</span>):</span><br><span class="line">    <span class="keyword">if</span> x &gt;= <span class="number">5</span>:</span><br><span class="line">        self.flag += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    self.gogogo(x + <span class="number">1</span>)</span><br><span class="line">    self.gogogo(x + <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_flag</span>(<span class="params">self</span>):</span><br><span class="line">    self.gogogo(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> self.flag</span><br></pre></td></tr></table></figure><p>举几个例子，可以看出是斐波拉契数列，flag是第102项，在网上直接搜索可得到。</p><h1 id="flower"><a href="#flower" class="headerlink" title="flower"></a>flower</h1><h3 id="解题过程-1"><a href="#解题过程-1" class="headerlink" title="解题过程"></a>解题过程</h3><p>动态调试程序，程序报错。</p><p><img src="/2022/11/18/SCU2022%E6%96%B0%E7%94%9F%E8%B5%9B/image-20221118165700892.png" alt="代码"></p><p>由上图发现，ida提示try，猜测是异常抛出，程序会执行下面的过程，因此更改eip直接执行下面的语句，程序开始正常运行。</p><p>程序的逻辑： </p><p>判定 input[i] ^ (i%7) &#x3D;&#x3D; someStr[i]</p><p>someStr为程序的数组。</p><h3 id="解题脚本-3"><a href="#解题脚本-3" class="headerlink" title="解题脚本"></a>解题脚本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Str = [<span class="number">0x73</span>, <span class="number">0x62</span>, <span class="number">0x77</span>, <span class="number">0x60</span>, <span class="number">0x70</span>, <span class="number">0x63</span>, <span class="number">0x7D</span>, <span class="number">0x4F</span>, <span class="number">0x74</span>, <span class="number">0x70</span>,</span><br><span class="line">       <span class="number">0x5C</span>, <span class="number">0x70</span>, <span class="number">0x60</span>, <span class="number">0x67</span>, <span class="number">0x6D</span>, <span class="number">0x5E</span>, <span class="number">0x6B</span>, <span class="number">0x70</span>, <span class="number">0x5B</span>, <span class="number">0x6C</span>,</span><br><span class="line">       <span class="number">0x68</span>, <span class="number">0x5F</span>, <span class="number">0x74</span>, <span class="number">0x70</span>, <span class="number">0x64</span>, <span class="number">0x61</span>, <span class="number">0x6B</span>, <span class="number">0x72</span>, <span class="number">0x5F</span>, <span class="number">0x6F</span>,</span><br><span class="line">       <span class="number">0x67</span>, <span class="number">0x66</span>, <span class="number">0x60</span>, <span class="number">0x5A</span>, <span class="number">0x69</span>, <span class="number">0x66</span>, <span class="number">0x5E</span>, <span class="number">0x70</span>, <span class="number">0x66</span>, <span class="number">0x72</span>,</span><br><span class="line">       <span class="number">0x60</span>, <span class="number">0x74</span>, <span class="number">0x73</span>, <span class="number">0x64</span>, <span class="number">0x5D</span>, <span class="number">0x73</span>, <span class="number">0x68</span>, <span class="number">0x64</span>, <span class="number">0x7F</span>, <span class="number">0x65</span>,</span><br><span class="line">       <span class="number">0x73</span>, <span class="number">0x71</span>, <span class="number">0x7E</span>]</span><br><span class="line">myinput = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(Str)):</span><br><span class="line">    myinput.append(Str[i] ^ (i % <span class="number">7</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> myinput:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(i), end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="go"><a href="#go" class="headerlink" title="go"></a>go</h1><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>看程序的main_main、main_main_func1、main_main_func2、main_main_func3、main_main_func4、main_main_func5函数</p><p>后面五个func函数是分别处理访问url的参数的不同所执行的。</p><p>其中func2函数中包含scuctf字段，猜测其为提交flag，并且检测flag的地方。</p><p>不断调试该程序可以发现变换flag的过程，通过动态调试可以发现flag的转换只是位置上的转换，因此，可以根据输入的字符串a变换后的结果b，去获取这个变换的过程</p><p><img src="/2022/11/18/SCU2022%E6%96%B0%E7%94%9F%E8%B5%9B/image-20221118170503198.png" alt="代码"></p><h3 id="解题脚本-4"><a href="#解题脚本-4" class="headerlink" title="解题脚本"></a>解题脚本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">change = [<span class="number">0x30</span>, <span class="number">0x35</span>, <span class="number">0x61</span>, <span class="number">0x66</span>, <span class="number">0x6B</span>, <span class="number">0x70</span>, <span class="number">0x75</span>, <span class="number">0x31</span>, <span class="number">0x36</span>, <span class="number">0x62</span>,</span><br><span class="line">          <span class="number">0x67</span>, <span class="number">0x6C</span>, <span class="number">0x71</span>, <span class="number">0x76</span>, <span class="number">0x32</span>, <span class="number">0x37</span>, <span class="number">0x63</span>, <span class="number">0x68</span>, <span class="number">0x6D</span>, <span class="number">0x72</span>,</span><br><span class="line">          <span class="number">0x33</span>, <span class="number">0x38</span>, <span class="number">0x64</span>, <span class="number">0x69</span>, <span class="number">0x6E</span>, <span class="number">0x73</span>, <span class="number">0x34</span>, <span class="number">0x39</span>, <span class="number">0x65</span>, <span class="number">0x6A</span>,</span><br><span class="line">          <span class="number">0x6F</span>, <span class="number">0x74</span>]</span><br><span class="line">ch = <span class="string">&quot;0123456789abcdefghijklmnopqrstuv&quot;</span></span><br><span class="line">re = <span class="string">&quot;5r+cR6AoCc503=i45q/oR6Zyoq5LairI&quot;</span></span><br><span class="line">flag = [<span class="number">0</span>] * <span class="number">32</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">ord</span>(ch[i]) == change[j]:</span><br><span class="line">            flag[i] = <span class="built_in">ord</span>(re[j])</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> flag:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(i), end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="logic"><a href="#logic" class="headerlink" title="logic"></a>logic</h1><h3 id="解题过程-2"><a href="#解题过程-2" class="headerlink" title="解题过程"></a>解题过程</h3><p>查询setjmp、longjmp函数理清程序流程，一共有三个函数。</p><p>第一个函数逻辑为：检查输入字符串每两位组合，前一个组合组成的数小于后一个组合组成的数；</p><p>第二个函数逻辑为：根据输入字符串对一个数组进行操作；</p><p>第三个函数逻辑为：其逻辑相当于检查被操作数组的每一个值。</p><p>由于被操作数组的结果正的相加为101，为输入字符串的一半，而负的相加为96，可以推断出每个组合的第一个数其对应数组的地方只加不减，而第二个数其对应数组的地方只减不加，且倒数五个组合的第二个数必须为Z。</p><h3 id="解题脚本-5"><a href="#解题脚本-5" class="headerlink" title="解题脚本"></a>解题脚本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">changenum</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="number">0</span> &lt;= num &lt;= <span class="number">9</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">chr</span>(num + <span class="number">48</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="number">10</span> &lt;= num &lt;= <span class="number">35</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">chr</span>(num + <span class="number">87</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="number">36</span> &lt;= num &lt;= <span class="number">62</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">chr</span>(num + <span class="number">29</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">changestr</span>(<span class="params">ch</span>):</span><br><span class="line">    num = <span class="built_in">ord</span>(ch)</span><br><span class="line">    <span class="keyword">if</span> <span class="number">48</span> &lt;= num &lt;= <span class="number">57</span>:</span><br><span class="line">        <span class="keyword">return</span> num - <span class="number">48</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="number">97</span> &lt;= num &lt;= <span class="number">122</span>:</span><br><span class="line">        <span class="keyword">return</span> num - <span class="number">87</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="number">65</span> &lt;= num &lt;= <span class="number">90</span>:</span><br><span class="line">        <span class="keyword">return</span> num - <span class="number">29</span></span><br><span class="line">a = [<span class="number">0x1</span>..<span class="number">.0</span>x5]</span><br><span class="line">frequencyOfNum = [<span class="number">0</span>] * <span class="number">62</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">62</span>):</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">        frequencyOfNum[i] = a[i]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        frequencyOfNum[i] = a[i] - a[i - <span class="number">1</span>]</span><br><span class="line">    <span class="built_in">print</span>(frequencyOfNum[i], end=<span class="string">&quot;, &quot;</span>)</span><br><span class="line">result = [-<span class="number">1</span>] * <span class="number">202</span></span><br><span class="line">index1 = <span class="number">0</span></span><br><span class="line">index2 = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">62</span>):</span><br><span class="line">    <span class="keyword">if</span> frequencyOfNum[i] &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(frequencyOfNum[i]):</span><br><span class="line">            result[index1 * <span class="number">2</span>] = i</span><br><span class="line">            index1 += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> frequencyOfNum[i] &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(-frequencyOfNum[i]):</span><br><span class="line">            result[index2 * <span class="number">2</span> + <span class="number">1</span>] = i - <span class="number">1</span></span><br><span class="line">            index2 += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    result[index2 * <span class="number">2</span> + <span class="number">1</span>] = <span class="number">61</span></span><br><span class="line">    index2 += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>, result)</span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> result:</span><br><span class="line">    flag += changenum(i)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h1 id="pyc"><a href="#pyc" class="headerlink" title="pyc"></a>pyc</h1><p>将pyc转换为py，可以看出类似矩阵计算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">sss = <span class="string">&quot;99 ... 121674&quot;</span> // 条件等式</span><br><span class="line">ss = sss.split(<span class="string">&quot; and &quot;</span>)</span><br><span class="line">num = []</span><br><span class="line">r = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ss:</span><br><span class="line">    s = i.split(<span class="string">&quot; &quot;</span>)</span><br><span class="line">    x = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">25</span>):</span><br><span class="line">        x.append(<span class="built_in">int</span>(s[i * <span class="number">4</span>]))</span><br><span class="line">    num.append(x)</span><br><span class="line">    r.append(<span class="built_in">int</span>(s[<span class="number">100</span>]))</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">b = np.array(num)</span><br><span class="line">a = np.array(r)</span><br><span class="line">flag = np.linalg.solve(b, a)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> flag:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="built_in">round</span>(i)), end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="xxx"><a href="#xxx" class="headerlink" title="xxx"></a>xxx</h1><p>程序一开始为检查函数解密出来，运行完解密函数，就可以知道检查函数了，</p><p>故使用动态调试，然后看汇编代码知道检查函数的流程，大概是(input + 4) ^ 0x28，然后进行比较。</p><h3 id="解题脚本-6"><a href="#解题脚本-6" class="headerlink" title="解题脚本"></a>解题脚本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">b = [<span class="number">0x7E</span> ... <span class="number">0x00</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(b) // <span class="number">4</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>((b[i * <span class="number">4</span>] ^ <span class="number">0x28</span>) - <span class="number">4</span>), end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="VM"><a href="#VM" class="headerlink" title="VM"></a>VM</h1><h3 id="解题过程-3"><a href="#解题过程-3" class="headerlink" title="解题过程"></a>解题过程</h3><p>case0对应add，case1对应sub，case2对应xor，case3对应cmp，case456对应各类jmp，case7对应获取input，case8对应赋值input，case9对应获取具体操作。</p><p>三个数组分别为input、stack、operation，index被放在了input[0x32]</p><p>然后就是动态调试看程序的逻辑：</p><ul><li>input[i] &#x3D; input[i] ^ input[i+1]</li><li>input[i+1] &#x3D; （input[i] - i) + input[i+1]</li><li>进行结果比较</li></ul><h3 id="解题脚本-7"><a href="#解题脚本-7" class="headerlink" title="解题脚本"></a>解题脚本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">d = [<span class="number">0x3d</span>, <span class="number">0x56</span>, <span class="number">0x80</span>, <span class="number">0xb3</span>, <span class="number">0xc9</span>, <span class="number">0xf0</span>,</span><br><span class="line">     <span class="number">0x128</span>, <span class="number">0x15f</span>, <span class="number">0x180</span>, <span class="number">0x196</span>, <span class="number">0x1a7</span>, <span class="number">0x1a2</span>,</span><br><span class="line">     <span class="number">0x197</span>, <span class="number">0x19e</span>, <span class="number">0x19d</span>, <span class="number">0x1c1</span>, <span class="number">0x1e3</span>, <span class="number">0x1de</span>,</span><br><span class="line">     <span class="number">0x1ce</span>, <span class="number">0x1c6</span>, <span class="number">0x1b3</span>, <span class="number">0x1a5</span>, <span class="number">0x19a</span>, <span class="number">0x1e8</span>]</span><br><span class="line">c = [<span class="number">0</span>] * <span class="number">25</span></span><br><span class="line">d.reverse()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">23</span>):</span><br><span class="line">    c[i] = d[i] - d[i + <span class="number">1</span>] + (<span class="number">24</span> - i - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">23</span>):</span><br><span class="line">    c[i + <span class="number">1</span>] = c[i] ^ c[i + <span class="number">1</span>]</span><br><span class="line">c.reverse()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> c:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(i), end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="unity"><a href="#unity" class="headerlink" title="unity"></a>unity</h1><p>dnspy打开Assembly-CSharp.dll，找到其方法、函数等，发现其中有个GameManger，应该是管理游戏的类，再在其中发现Update方法，应该是判定游戏是否可以继续以及画面更新的方法。</p><p><img src="/2022/11/18/SCU2022%E6%96%B0%E7%94%9F%E8%B5%9B/clip_image002.png"></p><p>在其中发现了Gameover变量，猜测是判定游戏是否可以继续的值，将赋值为true的地方更改为false，打开游戏，我不死了。</p><p><img src="/2022/11/18/SCU2022%E6%96%B0%E7%94%9F%E8%B5%9B/clip_image003.png" alt="代码"></p>]]></content>
      
      
      <categories>
          
          <category> Reverse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Reverse </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TEA加密与解密</title>
      <link href="/2022/10/07/TEA%E5%8A%A0%E5%AF%86%E4%B8%8E%E8%A7%A3%E5%AF%86/"/>
      <url>/2022/10/07/TEA%E5%8A%A0%E5%AF%86%E4%B8%8E%E8%A7%A3%E5%AF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="TEA加密解密流程"><a href="#TEA加密解密流程" class="headerlink" title="TEA加密解密流程"></a>TEA加密解密流程</h1><p>参考代码：(源自：<a href="https://ctf-wiki.org/reverse/identify-encode-encryption/introduction/">常见加密算法和编码识别 - CTF Wiki (ctf-wiki.org)</a>)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">encrypt</span> <span class="params">(<span class="type">uint32_t</span>* v, <span class="type">uint32_t</span>* k)</span> &#123;</span><br><span class="line">    <span class="type">uint32_t</span> v0=v[<span class="number">0</span>], v1=v[<span class="number">1</span>], sum=<span class="number">0</span>, i;           <span class="comment">/* set up */</span></span><br><span class="line">    <span class="type">uint32_t</span> delta=<span class="number">0x9e3779b9</span>;                     <span class="comment">/* a key schedule constant */</span></span><br><span class="line">    <span class="type">uint32_t</span> k0=k[<span class="number">0</span>], k1=k[<span class="number">1</span>], k2=k[<span class="number">2</span>], k3=k[<span class="number">3</span>];   <span class="comment">/* cache key */</span></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;                       <span class="comment">/* basic cycle start */</span></span><br><span class="line">        sum += delta;</span><br><span class="line">        v0 += ((v1&lt;&lt;<span class="number">4</span>) + k0) ^ (v1 + sum) ^ ((v1&gt;&gt;<span class="number">5</span>) + k1);</span><br><span class="line">        v1 += ((v0&lt;&lt;<span class="number">4</span>) + k2) ^ (v0 + sum) ^ ((v0&gt;&gt;<span class="number">5</span>) + k3);  </span><br><span class="line">    &#125;                                              <span class="comment">/* end cycle */</span></span><br><span class="line">    v[<span class="number">0</span>]=v0; v[<span class="number">1</span>]=v1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">decrypt</span> <span class="params">(<span class="type">uint32_t</span>* v, <span class="type">uint32_t</span>* k)</span> &#123;</span><br><span class="line">    <span class="type">uint32_t</span> v0=v[<span class="number">0</span>], v1=v[<span class="number">1</span>], sum=<span class="number">0xC6EF3720</span>, i;  <span class="comment">/* set up */</span></span><br><span class="line">    <span class="type">uint32_t</span> delta=<span class="number">0x9e3779b9</span>;                     <span class="comment">/* a key schedule constant */</span></span><br><span class="line">    <span class="type">uint32_t</span> k0=k[<span class="number">0</span>], k1=k[<span class="number">1</span>], k2=k[<span class="number">2</span>], k3=k[<span class="number">3</span>];   <span class="comment">/* cache key */</span></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">32</span>; i++) &#123;                         <span class="comment">/* basic cycle start */</span></span><br><span class="line">        v1 -= ((v0&lt;&lt;<span class="number">4</span>) + k2) ^ (v0 + sum) ^ ((v0&gt;&gt;<span class="number">5</span>) + k3);</span><br><span class="line">        v0 -= ((v1&lt;&lt;<span class="number">4</span>) + k0) ^ (v1 + sum) ^ ((v1&gt;&gt;<span class="number">5</span>) + k1);</span><br><span class="line">        sum -= delta;                                   </span><br><span class="line">    &#125;                                              <span class="comment">/* end cycle */</span></span><br><span class="line">    v[<span class="number">0</span>]=v0; v[<span class="number">1</span>]=v1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>在其他的TEA加密解密流程中，部分过程或许有偏差，但整体上还是大差不差的。</li><li>注意使用的变量是32位的unsigned int类型变量。</li></ul><h3 id="具体示例"><a href="#具体示例" class="headerlink" title="具体示例"></a>具体示例</h3><p>在此TEA加密流程中，v5、v6并不完全按照示例进行，但只要按照其反思路来做就可以了。</p><p><img src="/2022/10/07/TEA%E5%8A%A0%E5%AF%86%E4%B8%8E%E8%A7%A3%E5%AF%86/image-20221007171855238.png" alt="TEA加密"></p><p>解密脚本</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">decrypt</span><span class="params">(<span class="type">int</span> *res, <span class="type">int</span> *key)</span>&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> v6=res[<span class="number">0</span>];</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> v5=res[<span class="number">1</span>];</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> sum = <span class="number">0xC6EF3720</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> delta = <span class="number">0x61C88647</span>;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">0x1F</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">  v5 -= (((v6 &gt;&gt; <span class="number">5</span>) ^ (<span class="number">16</span> * v6)) + v6) ^ (key[(sum&gt;&gt;<span class="number">11</span>)&amp;<span class="number">3</span>] + sum);</span><br><span class="line">    sum += <span class="number">0x61C88647</span>;</span><br><span class="line">    v6 -= (((v5 &gt;&gt; <span class="number">5</span>) ^ (<span class="number">16</span> * v5)) + v5) ^ (key[sum&amp;<span class="number">3</span>] + sum);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;结果：%x,%x\n&quot;</span>,v6,v5);</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">encrypt</span><span class="params">(<span class="type">int</span> *res, <span class="type">int</span> *key)</span>&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> v6=res[<span class="number">0</span>];</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> v5=res[<span class="number">1</span>];</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> delta = <span class="number">0x61C88647</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> i;</span><br><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">0x1F</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">  v6 += (((v5 &gt;&gt; <span class="number">5</span>) ^ (<span class="number">16</span> * v5)) + v5) ^ (key[sum&amp;<span class="number">3</span>] + sum);</span><br><span class="line">  sum -= <span class="number">0x61C88647</span>;</span><br><span class="line">v5 += (((v6 &gt;&gt; <span class="number">5</span>) ^ (<span class="number">16</span> * v6)) + v6) ^ (key[(sum&gt;&gt;<span class="number">11</span>)&amp;<span class="number">3</span>] + sum);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;结果：%X,%X\n&quot;</span>,v6,v5);</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">int</span> res[<span class="number">6</span>]=&#123;</span><br><span class="line"><span class="number">0xC11EE75A</span>, <span class="number">0xA4AD0973</span>,</span><br><span class="line"><span class="number">0xF61C9018</span>, <span class="number">0x32E37BCD</span>,</span><br><span class="line"><span class="number">0x2DCC1F26</span>, <span class="number">0x344380CC</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> key[<span class="number">4</span>]=&#123;</span><br><span class="line"><span class="number">0x010203</span>, <span class="number">0x04050607</span>, <span class="number">0x08090A0B</span>, <span class="number">0x0C0D0E0F</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">decrypt(&amp;res[i*<span class="number">2</span>],key);</span><br><span class="line">&#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后所得到的结果要注意是小端存储。</p>]]></content>
      
      
      <categories>
          
          <category> Reverse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杰瑞的影分身——bugku</title>
      <link href="/2022/10/05/%E6%9D%B0%E7%91%9E%E7%9A%84%E5%BD%B1%E5%88%86%E8%BA%AB%E2%80%94%E2%80%94bugku/"/>
      <url>/2022/10/05/%E6%9D%B0%E7%91%9E%E7%9A%84%E5%BD%B1%E5%88%86%E8%BA%AB%E2%80%94%E2%80%94bugku/</url>
      
        <content type="html"><![CDATA[<h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>简单浏览下程序思路，可以发现程序的输入，但程序的结果比较过程则没有发现。</p><p><img src="/2022/10/05/%E6%9D%B0%E7%91%9E%E7%9A%84%E5%BD%B1%E5%88%86%E8%BA%AB%E2%80%94%E2%80%94bugku/image-20221005181311087.png" alt="main"></p><p><img src="/2022/10/05/%E6%9D%B0%E7%91%9E%E7%9A%84%E5%BD%B1%E5%88%86%E8%BA%AB%E2%80%94%E2%80%94bugku/image-20221005181336032.png" alt="sub_401670"></p><p><img src="/2022/10/05/%E6%9D%B0%E7%91%9E%E7%9A%84%E5%BD%B1%E5%88%86%E8%BA%AB%E2%80%94%E2%80%94bugku/image-20221005181419209.png" alt="sub_402770"></p><p>通过网上搜索，在sub_402770的函数中Block部分应该也是一个函数，我猜测具体过程是由前一句sub_401C40函数生成的，因此直接在这下断点，直接动态调试。</p><p>程序的比较过程还是比较明显的，但还是调试了我半天，具体过程就不贴图了。</p><h3 id="第一个过程"><a href="#第一个过程" class="headerlink" title="第一个过程"></a>第一个过程</h3><p>对input[i]进行异或4，然后当 i % 3 &#x3D;&#x3D; 1时，还将input[i]与一串字符串第（3 * i）位异或（但根据该字符串来进行解题时，出现的结果不太对，因此我直接记录进行异或的字符，直接异或了）</p><h3 id="第二个过程"><a href="#第二个过程" class="headerlink" title="第二个过程"></a>第二个过程</h3><p>对sub_4017B0函数生成的字符串进行处理。</p><p><img src="/2022/10/05/%E6%9D%B0%E7%91%9E%E7%9A%84%E5%BD%B1%E5%88%86%E8%BA%AB%E2%80%94%E2%80%94bugku/image-20221005182710135.png" alt="sub_4017B0"></p><p>由于程序的进行，处理后的字符串可以直接读取，因此不用管过程，直接得到结果。</p><p><code>str1 = &quot;e4bdtRV02&quot;</code></p><p>后面的字符被第十位的 0 截断了，因此只有9位了。</p><h3 id="第三个过程"><a href="#第三个过程" class="headerlink" title="第三个过程"></a>第三个过程</h3><p>将变化后的input[i]与sub_401BD0（i）所得到的返回值 + 2 进行异或。</p><p><img src="/2022/10/05/%E6%9D%B0%E7%91%9E%E7%9A%84%E5%BD%B1%E5%88%86%E8%BA%AB%E2%80%94%E2%80%94bugku/image-20221005183346887.png" alt="sub——401BD0"></p><p>同时如果input的前九位与str1的前九位相加。</p><p><img src="/2022/10/05/%E6%9D%B0%E7%91%9E%E7%9A%84%E5%BD%B1%E5%88%86%E8%BA%AB%E2%80%94%E2%80%94bugku/image-20221005183623391.png" alt="调试得到的第三个过程"></p><h1 id="解题脚本"><a href="#解题脚本" class="headerlink" title="解题脚本"></a>解题脚本</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">getnum</span>(<span class="params">a1</span>):</span><br><span class="line">    <span class="keyword">if</span> a1 == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">12</span></span><br><span class="line">    <span class="keyword">elif</span> a1 == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">11</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">str1 = <span class="string">&quot;e4bdtRV02&quot;</span></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&quot;flag&#123;where is tom&#125;flag&#123;My cheese&#125;flag&#123;i miss tom&#125;&quot;</span></span><br><span class="line">str2 = <span class="string">&quot;gsleg&quot;</span></span><br><span class="line">strrrr = [<span class="number">0xD3</span>, <span class="number">0x38</span>, <span class="number">0xD1</span>, <span class="number">0xD3</span>, <span class="number">0x7B</span>, <span class="number">0xAD</span>, <span class="number">0xB3</span>, <span class="number">0x66</span>, <span class="number">0x71</span>, <span class="number">0x3A</span>,</span><br><span class="line">          <span class="number">0x59</span>, <span class="number">0x5F</span>, <span class="number">0x5F</span>, <span class="number">0x2D</span>, <span class="number">0x73</span>]</span><br><span class="line">flag = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">15</span>):</span><br><span class="line">    <span class="keyword">if</span> i &lt; <span class="number">9</span>:</span><br><span class="line">        flag.append((strrrr[i] - <span class="built_in">ord</span>(str1[i])) ^ getnum(i % <span class="number">3</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flag.append((strrrr[i] ^ getnum(i % <span class="number">3</span>)))</span><br><span class="line">t = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">15</span>):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">3</span> == <span class="number">1</span>:</span><br><span class="line">        flag[i] ^= <span class="built_in">ord</span>(str2[t])</span><br><span class="line">        t += <span class="number">1</span></span><br><span class="line">    flag[i] ^= <span class="number">4</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> flag:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(i), end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Reverse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Reverse </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bingo——bugku</title>
      <link href="/2022/10/04/Bingo%E2%80%94%E2%80%94bugku/"/>
      <url>/2022/10/04/Bingo%E2%80%94%E2%80%94bugku/</url>
      
        <content type="html"><![CDATA[<h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>思路主要参考网上writeup，一步步做出来的。</p><p>png中隐藏着exe文件</p><p><img src="/2022/10/04/Bingo%E2%80%94%E2%80%94bugku/1.png" alt="1"></p><p>MZ文件头，即（4D5A9000…)，从这开始到最后的字节都提取出来，为一个exe文件。此时的exe文件因为缺少PE头无法被ida识别，因此加一个PE头 50 45 00 00</p><p><img src="/2022/10/04/Bingo%E2%80%94%E2%80%94bugku/2.png" alt="2"></p><p>也可以通过010editor在模板中修改</p><p><img src="/2022/10/04/Bingo%E2%80%94%E2%80%94bugku/3.png" alt="3"></p><p>用ida打开该exe文件</p><p><img src="/2022/10/04/Bingo%E2%80%94%E2%80%94bugku/4.png" alt="4"></p><p>判断这是一个解密过程，即 为部分字节数据进行异或解密，用脚本进行解密。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&quot;C:\Users\hahbiubiubiu\Downloads\file\bingo.exe&quot;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:    </span><br><span class="line">    data = f.read() </span><br><span class="line">data = <span class="built_in">list</span>(data) </span><br><span class="line">text_segment_size = <span class="number">0x3E000</span> - <span class="number">0x1000</span> </span><br><span class="line"><span class="comment"># 0x3E000是大小 </span></span><br><span class="line"><span class="comment"># 0x1000是偏移 </span></span><br><span class="line">key = <span class="number">0x22</span>  </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x1000</span>, <span class="number">0x1000</span> + text_segment_size):</span><br><span class="line">    data[i] ^= key  </span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&quot;C:\Users\hahbiubiubiu\Downloads\file\bing0_xor.exe&quot;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f: </span><br><span class="line">    f.write(<span class="built_in">bytes</span>(data))</span><br></pre></td></tr></table></figure><p>执行脚本后得到新的exe文件，ida打开它</p><p><img src="/2022/10/04/Bingo%E2%80%94%E2%80%94bugku/5.png" alt="5"></p><p>除了前面的异或，它跳到了0x408BE0的位置</p><p><img src="/2022/10/04/Bingo%E2%80%94%E2%80%94bugku/6.png" alt="6"></p><p> Edit-&gt;Segments-&gt;Rebase Progarm…-&gt;修改value为0</p><p><img src="/2022/10/04/Bingo%E2%80%94%E2%80%94bugku/7.png" alt="7"></p><p><img src="/2022/10/04/Bingo%E2%80%94%E2%80%94bugku/8.png" alt="8"></p><p>该函数地址修改为0x8BE0</p><p><img src="/2022/10/04/Bingo%E2%80%94%E2%80%94bugku/9.png" alt="9"></p><p>在010editor中修改程序入口点为0x8BE0</p><p><img src="/2022/10/04/Bingo%E2%80%94%E2%80%94bugku/10.png" alt="10"></p><p>再次用ida打开exe文件发现程序多了两个main函数，main_0函数就是程序主逻辑</p><p><img src="/2022/10/04/Bingo%E2%80%94%E2%80%94bugku/11.png" alt="11"></p><p><img src="/2022/10/04/Bingo%E2%80%94%E2%80%94bugku/12.png" alt="12"></p><p>_strrev是对字符串进行倒转的函数，根据逻辑，写出脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;zaciWjV!Xm[_XSqeThmegndq&quot;</span> </span><br><span class="line">b = <span class="number">29</span> flag = <span class="string">&quot;&quot;</span> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">    t = math.sqrt(<span class="built_in">pow</span>(<span class="built_in">ord</span>(a[<span class="built_in">int</span>(i/<span class="number">2</span>)]), <span class="number">2.0</span>) + <span class="built_in">pow</span>(b, <span class="number">2.0</span>)) + <span class="number">0.5</span>    </span><br><span class="line">    k = <span class="built_in">int</span>(t)    </span><br><span class="line">    b += <span class="number">1</span>    </span><br><span class="line">    flag += <span class="built_in">chr</span>(k)    </span><br><span class="line">    a = a[::-<span class="number">1</span>] <span class="built_in">print</span>(flag[::-<span class="number">1</span>]) </span><br><span class="line"><span class="comment"># flag&#123;woc_6p_tql_moshifu&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Reverse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Reverse </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>babyLoginPlus——bugku</title>
      <link href="/2022/10/03/babyLoginPlus-bugku/"/>
      <url>/2022/10/03/babyLoginPlus-bugku/</url>
      
        <content type="html"><![CDATA[<h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>该题主要是参照其他大佬writeup的思路，即找到输入，下断点，根据最后所得到的比较等式来一步步调试得到的。</p><h3 id="VM"><a href="#VM" class="headerlink" title="VM"></a>VM</h3><p>该函数应该是使用vm函数的地方</p><p><img src="/2022/10/03/babyLoginPlus-bugku/image-20221003131441527.png" alt="入口"></p><p>因此在这个地方下了断点之后，一步步开始调试，看看程序的执行流程</p><p>首先，程序的执行到这个地方，会不断重复执行，然后根据调用的函数来获取输入、进行比较、执行输出。</p><p>在前几次的执行中，包含了获取输入的函数，得到我们的输入。</p><h3 id="比较过程"><a href="#比较过程" class="headerlink" title="比较过程"></a>比较过程</h3><p>获取输入后，程序开始执行比较，其中我也不太清楚部分操作的流程，可能是获取数据或者解析数据什么的，因此省略了。</p><p>获取input[i]的字符更新为input[i]-9。</p><p><code>sub dex,ecx</code></p><p><img src="/2022/10/03/babyLoginPlus-bugku/image-20221003115001724.png" alt="input[i]-9"></p><p>获取操作数 0x26。</p><p><img src="/2022/10/03/babyLoginPlus-bugku/image-20221003115346614.png"></p><p>将input[i]与上一个函数获取的0x26异或，即input[i] &#x3D; input[i] ^ 0x26。</p><p><code>xor edx,ecx</code></p><p><img src="/2022/10/03/babyLoginPlus-bugku/image-20221003115613045.png" alt="异或0x26"></p><p>获取程序之前生成的Welcome字符串的第i个字符。</p><p><img src="/2022/10/03/babyLoginPlus-bugku/image-20221003120605295.png" alt="获取key"></p><p>将获取Welcome字符串的字符和之前变化后的input[i]进行异或。</p><p><code>xor edx,ecx</code></p><p><img src="/2022/10/03/babyLoginPlus-bugku/image-20221003120903814.png" alt="异或key"></p><p>执行add [eax], esi, 将上一步异或得到的的字符加上6。</p><p><code>add [eax], esi</code></p><p><img src="/2022/10/03/babyLoginPlus-bugku/image-20221003121506365.png" alt="变化"></p><p>获取最后结果比较所需的数组。</p><p><img src="/2022/10/03/babyLoginPlus-bugku/image-20221003121637821.png"></p><p><img src="/2022/10/03/babyLoginPlus-bugku/image-20221003121735062.png"></p><p><img src="/2022/10/03/babyLoginPlus-bugku/image-20221003130820114.png" alt="结果数组"></p><p>进行结果比较。</p><p><code>cmp edi,ecx</code></p><p><img src="/2022/10/03/babyLoginPlus-bugku/image-20221003122048630.png" alt="结果比较"></p><h1 id="解题脚本"><a href="#解题脚本" class="headerlink" title="解题脚本"></a>解题脚本</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">result = [<span class="number">0x32</span>, <span class="number">0x26</span>, <span class="number">0x18</span>, <span class="number">0x21</span>, <span class="number">0x41</span>, <span class="number">0x23</span>, <span class="number">0x2A</span>, <span class="number">0x57</span>, <span class="number">0x44</span>, <span class="number">0x29</span>, <span class="number">0x35</span>, <span class="number">0x12</span>, <span class="number">0x20</span>, <span class="number">0x17</span>, <span class="number">0x45</span>, <span class="number">0x1C</span>,</span><br><span class="line">       <span class="number">0x68</span>, <span class="number">0x2D</span>, <span class="number">0x7A</span>, <span class="number">0x79</span>, <span class="number">0x47</span>, <span class="number">0x7F</span>, <span class="number">0x44</span>, <span class="number">0x09</span>, <span class="number">0x1E</span>, <span class="number">0x75</span>, <span class="number">0x41</span>, <span class="number">0x2A</span>, <span class="number">0x19</span>, <span class="number">0x34</span>, <span class="number">0x76</span>, <span class="number">0x47</span>,</span><br><span class="line">       <span class="number">0x14</span>, <span class="number">0x50</span>, <span class="number">0x52</span>, <span class="number">0x76</span>, <span class="number">0x58</span>]</span><br><span class="line">key = [<span class="number">0x57</span>, <span class="number">0x65</span>, <span class="number">0x6C</span>, <span class="number">0x63</span>, <span class="number">0x6F</span>, <span class="number">0x6D</span>, <span class="number">0x65</span>, <span class="number">0x5F</span>, <span class="number">0x74</span>, <span class="number">0x6F</span>, <span class="number">0x5F</span>, <span class="number">0x73</span>, <span class="number">0x64</span>, <span class="number">0x6E</span>, <span class="number">0x69</span>, <span class="number">0x73</span>,</span><br><span class="line">       <span class="number">0x63</span>, <span class="number">0x5F</span>, <span class="number">0x32</span>, <span class="number">0x30</span>, <span class="number">0x31</span>, <span class="number">0x38</span>, <span class="number">0x5F</span>, <span class="number">0x42</span>, <span class="number">0x79</span>, <span class="number">0x2E</span>, <span class="number">0x5A</span>, <span class="number">0x65</span>, <span class="number">0x72</span>, <span class="number">0x6F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">       <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>]</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(result)):</span><br><span class="line">    flag += <span class="built_in">chr</span>(((result[i]-<span class="number">0x6</span>) ^ <span class="number">0x26</span> ^ key[i])+<span class="number">9</span>)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#flag&#123;_p1us_babyL0gin_pPpPpPpPp_p1us_&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Reverse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Reverse </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汤姆的苹果——bugku</title>
      <link href="/2022/09/27/%E6%B1%A4%E5%A7%86%E7%9A%84%E8%8B%B9%E6%9E%9C%E2%80%94%E2%80%94bugku/"/>
      <url>/2022/09/27/%E6%B1%A4%E5%A7%86%E7%9A%84%E8%8B%B9%E6%9E%9C%E2%80%94%E2%80%94bugku/</url>
      
        <content type="html"><![CDATA[<h1 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h1><p>首先，看<strong>MainActivity</strong>，猜测b中<strong>handleMessage</strong>是判断最终条件，<strong>onClick</strong>是检验flag方法</p><p><img src="/2022/09/27/%E6%B1%A4%E5%A7%86%E7%9A%84%E8%8B%B9%E6%9E%9C%E2%80%94%E2%80%94bugku/1664414144444.png" alt="MainActivity"></p><p>然后查看引用输入字符串obj的a类中，<strong>doInBackground</strong>应该是对输入字符串进行解密</p><p><img src="/2022/09/27/%E6%B1%A4%E5%A7%86%E7%9A%84%E8%8B%B9%E6%9E%9C%E2%80%94%E2%80%94bugku/1664414485829.png" alt="类a"></p><p>查看<strong>doInBackground</strong>引用的b类</p><p><img src="/2022/09/27/%E6%B1%A4%E5%A7%86%E7%9A%84%E8%8B%B9%E6%9E%9C%E2%80%94%E2%80%94bugku/1664414746576.png" alt="类b"></p><p>可以看出这是对字符串的一个异或</p><p>再去看a类中的<strong>onPostExcute</strong>方法，以及除了a、b类以外的c类，猜测这是一起为最后为检测结果进行判定的方法</p><p><img src="/2022/09/27/%E6%B1%A4%E5%A7%86%E7%9A%84%E8%8B%B9%E6%9E%9C%E2%80%94%E2%80%94bugku/1664414837113.png" alt="目录"></p><p>c类，可以看出这是一个比较结果的方法</p><p><img src="/2022/09/27/%E6%B1%A4%E5%A7%86%E7%9A%84%E8%8B%B9%E6%9E%9C%E2%80%94%E2%80%94bugku/1664414874587.png" alt="类c"></p><h1 id="程序逻辑"><a href="#程序逻辑" class="headerlink" title="程序逻辑"></a>程序逻辑</h1><p>输入flag–&gt;进入a类不断进入b类进行循环–&gt;进入c类进行结果比较</p><h1 id="解题脚本"><a href="#解题脚本" class="headerlink" title="解题脚本"></a>解题脚本</h1><p>由于按照程序原本的逻辑，我写出的脚本无法生成flag，且网上暂时没有该题的writeup，我只好使用另一种方法。</p><p>程序的逻辑是将字符串不断地进行异或，最后的结果其实相当于进行一次异或，而这一次异或的数字是未知，因此可以写一个循环去爆破它。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">final = [<span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;&#125;&#x27;</span>, <span class="string">&#x27;&#123;&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;v&#x27;</span>, <span class="string">&#x27;&#125;&#x27;</span>, <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;$&#x27;</span>, <span class="string">&#x27;%&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;v&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;v&#x27;</span>,</span><br><span class="line">         <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;a&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    num = [<span class="number">0</span>] * <span class="number">24</span></span><br><span class="line">    f = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> q <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(final)):</span><br><span class="line">        num[q] = (<span class="built_in">ord</span>(final[q]) ^ i)</span><br><span class="line">        <span class="keyword">if</span> num[q] &gt;= <span class="number">128</span>:</span><br><span class="line">            f = <span class="number">1</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> num[q] &lt;= <span class="number">31</span>:</span><br><span class="line">            f = <span class="number">1</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> f == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;the i is: &quot;</span>, i)</span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> num:</span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">chr</span>(t), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line"><span class="comment"># the i is:  27</span></span><br><span class="line"><span class="comment"># akf`|mfntoa?&gt;543564mlmoz</span></span><br><span class="line"><span class="comment"># the i is:  28</span></span><br><span class="line"><span class="comment"># flag&#123;jaishf89234213jkjh&#125;</span></span><br><span class="line"><span class="comment"># the i is:  29</span></span><br><span class="line"><span class="comment"># gm`fzk`hrig98325302kjki|</span></span><br><span class="line"><span class="comment"># the i is:  30</span></span><br><span class="line"><span class="comment"># dnceyhckqjd:;016031hihj</span></span><br><span class="line"><span class="comment"># the i is:  31</span></span><br><span class="line"><span class="comment"># eobdxibjpke;:107120ihik~</span></span><br></pre></td></tr></table></figure><p><strong>flag{jaishf89234213jkjh}</strong></p>]]></content>
      
      
      <categories>
          
          <category> Reverse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Reverse </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
