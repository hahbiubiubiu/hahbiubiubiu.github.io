<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SCU2022新生赛</title>
      <link href="/2022/11/18/SCU2022%E6%96%B0%E7%94%9F%E8%B5%9B/"/>
      <url>/2022/11/18/SCU2022%E6%96%B0%E7%94%9F%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<h1 id="SCU2022新生赛"><a href="#SCU2022新生赛" class="headerlink" title="SCU2022新生赛"></a>SCU2022新生赛</h1><h2 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h2><p><img src="/2022/11/18/SCU2022%E6%96%B0%E7%94%9F%E8%B5%9B/image-20221118153813903.png" alt="签到"></p><h1 id="Tower-of-Hanoi"><a href="#Tower-of-Hanoi" class="headerlink" title="Tower_of_Hanoi"></a>Tower_of_Hanoi</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> x[<span class="number">35</span>]=&#123;</span><br><span class="line"><span class="number">0x1BF21</span>, <span class="number">0x1BF31</span>, <span class="number">0x1BF27</span>, <span class="number">0x1BF31</span>, <span class="number">0x1BF26</span>, <span class="number">0x1BF34</span>, <span class="number">0x1BF29</span>,</span><br><span class="line"> <span class="number">0x1BF20</span>, <span class="number">0x1BF37</span>, <span class="number">0x1BF24</span>, <span class="number">0x1BF37</span>, <span class="number">0x1BF20</span>, <span class="number">0x1BF21</span>, <span class="number">0x1BF37</span>,</span><br><span class="line"> <span class="number">0x1BF0D</span>, <span class="number">0x1BF3B</span>, <span class="number">0x1BF21</span>, <span class="number">0x1BF0D</span>, <span class="number">0x1BF24</span>, <span class="number">0x1BF37</span>, <span class="number">0x1BF20</span>,</span><br><span class="line"> <span class="number">0x1BF2B</span>, <span class="number">0x1BF0D</span>, <span class="number">0x1BF3B</span>, <span class="number">0x1BF3C</span>, <span class="number">0x1BF26</span>, <span class="number">0x1BF37</span>, <span class="number">0x1BF20</span>,</span><br><span class="line"> <span class="number">0x1BF37</span>, <span class="number">0x1BF21</span>, <span class="number">0x1BF26</span>, <span class="number">0x1BF3B</span>, <span class="number">0x1BF3C</span>, <span class="number">0x1BF35</span>, <span class="number">0x1BF2F</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">35</span>;i++)&#123;</span><br><span class="line"><span class="built_in">putchar</span>(x[i]^<span class="number">0x1bf52</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="ez-Android"><a href="#ez-Android" class="headerlink" title="ez_Android"></a>ez_Android</h1><h3 id="主体逻辑"><a href="#主体逻辑" class="headerlink" title="主体逻辑"></a>主体逻辑</h3><p><img src="/2022/11/18/SCU2022%E6%96%B0%E7%94%9F%E8%B5%9B/image-20221118154221715.png" alt="代码"></p><p>即要获取一串0与1组成的字符串，使用check函数检查。</p><h3 id="check函数"><a href="#check函数" class="headerlink" title="check函数"></a>check函数</h3><p>将apk解压从lib文件夹中找到so文件，check函数就在里面。</p><p><img src="/2022/11/18/SCU2022%E6%96%B0%E7%94%9F%E8%B5%9B/image-20221118154650130.png" alt="代码"></p><p>根据点击得到的10序列变化基数1，从而得到数组f的下标，再从而得到某特定的值，该值应该对应 likeAndroid字符串的对应位的ASCII值</p><h3 id="解题脚本"><a href="#解题脚本" class="headerlink" title="解题脚本"></a>解题脚本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">b = [</span><br><span class="line">    <span class="number">0x0</span>, <span class="number">0x0</span>, <span class="number">0x0</span>, <span class="number">0x0</span>, <span class="number">0x0</span>, <span class="number">0x0</span>, <span class="number">0x0</span>, <span class="number">0x0</span>, <span class="number">0x0</span>, <span class="number">0x0</span>,</span><br><span class="line">    ...</span><br><span class="line">    <span class="number">0x0</span>, <span class="number">0x0</span>, <span class="number">0x0</span>, <span class="number">0x0</span>, <span class="number">0x0</span>, <span class="number">0x0</span>, <span class="number">0x0</span>, <span class="number">0x0</span>, <span class="number">0x0</span>, <span class="number">0x0</span></span><br><span class="line">]</span><br><span class="line">c = []</span><br><span class="line">d = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(b)):</span><br><span class="line">    <span class="keyword">if</span> b[i] != <span class="number">0</span>:</span><br><span class="line">        c.append(b[i])</span><br><span class="line">        d.append(i)</span><br><span class="line"></span><br><span class="line">a = <span class="string">&quot;even if i only have seven seconds of memory, even if i forget the world, i still love android&quot;</span></span><br><span class="line">total = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    num = <span class="number">0</span></span><br><span class="line">    frq = []</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">ord</span>(i) == c[j]:</span><br><span class="line">            num = d[j]</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> num == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;wrong&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">while</span> num != <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">if</span> num % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">            num = num // <span class="number">2</span></span><br><span class="line">            frq.append(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            num = (num - <span class="number">1</span>) // <span class="number">2</span></span><br><span class="line">            frq.append(<span class="number">1</span>)</span><br><span class="line">    frq.reverse()</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> frq:</span><br><span class="line">        total.append(t)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> total:</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;1&quot;</span>, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> i == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;0&quot;</span>, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;wrong&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>最终得到01字符串</p><h1 id="DEGUB"><a href="#DEGUB" class="headerlink" title="DEGUB"></a>DEGUB</h1><h3 id="调试过程"><a href="#调试过程" class="headerlink" title="调试过程"></a>调试过程</h3><p>当执行到除0异常时，更改eip，跳过除0异常。</p><p>由调试可发现，程序只是对Input字符串进行位置变换处理。</p><p>故，可以根据输入的字符串a变换后的结果b，去获取这个变换的过程。</p><h3 id="解题脚本-1"><a href="#解题脚本-1" class="headerlink" title="解题脚本"></a>解题脚本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;0123456789abcdefghijklmnopqrstuv&quot;</span></span><br><span class="line">b = [<span class="number">0x35</span>, <span class="number">0x67</span>, <span class="number">0x64</span>, <span class="number">0x33</span>, <span class="number">0x69</span>, <span class="number">0x75</span>, <span class="number">0x71</span>, <span class="number">0x68</span>, <span class="number">0x72</span>, <span class="number">0x6B</span>,</span><br><span class="line">     <span class="number">0x6A</span>, <span class="number">0x74</span>, <span class="number">0x30</span>, <span class="number">0x34</span>, <span class="number">0x37</span>, <span class="number">0x31</span>, <span class="number">0x38</span>, <span class="number">0x65</span>, <span class="number">0x36</span>, <span class="number">0x70</span>,</span><br><span class="line">     <span class="number">0x63</span>, <span class="number">0x6C</span>, <span class="number">0x39</span>, <span class="number">0x6E</span>, <span class="number">0x6F</span>, <span class="number">0x61</span>, <span class="number">0x6D</span>, <span class="number">0x73</span>, <span class="number">0x32</span>, <span class="number">0x62</span>,</span><br><span class="line">     <span class="number">0x76</span>, <span class="number">0x66</span>]</span><br><span class="line">c = <span class="string">&quot;fa+cmRG25L5Cst5cqO&#123;CLmy6YigZu6&#125;5&quot;</span></span><br><span class="line">d = [<span class="number">0</span>] * <span class="number">32</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">        <span class="keyword">if</span> b[i] == <span class="built_in">ord</span>(a[j]):</span><br><span class="line">            d[j] = <span class="built_in">ord</span>(c[i])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> d:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(i), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># scuctf&#123;5qyi6L+O5a2m5Lmg6YCG5ZCR&#125;</span></span><br></pre></td></tr></table></figure><h1 id="base"><a href="#base" class="headerlink" title="base"></a>base</h1><h3 id="程序逻辑"><a href="#程序逻辑" class="headerlink" title="程序逻辑"></a>程序逻辑</h3><p>类似走迷宫，dword_4D7258不能进行变换，因此走的位置在maze中不能为0。</p><p>go_way_1和go_way_2是走迷宫的方式，目标是x、y都为29</p><p><img src="/2022/11/18/SCU2022%E6%96%B0%E7%94%9F%E8%B5%9B/image-20221118162606895-16687601452271.png" alt="代码"></p><h3 id="解题脚本-2"><a href="#解题脚本-2" class="headerlink" title="解题脚本"></a>解题脚本</h3><p>使用DFS方法走迷宫</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">a = [</span><br><span class="line">    <span class="number">0x20</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    ...</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span></span><br><span class="line">]</span><br><span class="line">b = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a) // <span class="number">4</span>):</span><br><span class="line">    b.append(a[i * <span class="number">4</span>])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(b)):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">30</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>()</span><br><span class="line">    <span class="keyword">if</span> b[i] != <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;0&#x27;</span>, end=<span class="string">&quot;, &quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span>, end=<span class="string">&quot;, &quot;</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line">b[<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gomaze</span>(<span class="params">x, y, flag, maze</span>):</span><br><span class="line">    newflag = flag</span><br><span class="line">    newmaze = []</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> maze:</span><br><span class="line">        newmaze.append(t)</span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">29</span> <span class="keyword">and</span> y == <span class="number">29</span>:</span><br><span class="line">        <span class="built_in">print</span>(newflag)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="number">30</span> &gt; x + <span class="number">2</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> <span class="number">30</span> &gt; y - <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> b[x + <span class="number">2</span> + <span class="number">30</span> * (y - <span class="number">1</span>)] != <span class="number">0</span>:</span><br><span class="line">        b[x + <span class="number">2</span> + <span class="number">30</span> * (y - <span class="number">1</span>)] = <span class="number">0</span></span><br><span class="line">        gomaze(x + <span class="number">2</span>, y - <span class="number">1</span>, flag + <span class="string">&#x27;0&#x27;</span>, newmaze)</span><br><span class="line">        b[x + <span class="number">2</span> + <span class="number">30</span> * (y - <span class="number">1</span>)] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="number">30</span> &gt; x + <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> <span class="number">30</span> &gt; y - <span class="number">2</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> b[x + <span class="number">1</span> + <span class="number">30</span> * (y - <span class="number">2</span>)] != <span class="number">0</span>:</span><br><span class="line">        b[x + <span class="number">1</span> + <span class="number">30</span> * (y - <span class="number">2</span>)] = <span class="number">0</span></span><br><span class="line">        gomaze(x + <span class="number">1</span>, y - <span class="number">2</span>, flag + <span class="string">&#x27;1&#x27;</span>, newmaze)</span><br><span class="line">        b[x + <span class="number">1</span> + <span class="number">30</span> * (y - <span class="number">2</span>)] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="number">30</span> &gt; x - <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> <span class="number">30</span> &gt; y - <span class="number">2</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> b[x - <span class="number">1</span> + <span class="number">30</span> * (y - <span class="number">2</span>)] != <span class="number">0</span>:</span><br><span class="line">        b[x - <span class="number">1</span> + <span class="number">30</span> * (y - <span class="number">2</span>)] = <span class="number">0</span></span><br><span class="line">        gomaze(x - <span class="number">1</span>, y - <span class="number">2</span>, flag + <span class="string">&#x27;2&#x27;</span>, newmaze)</span><br><span class="line">        b[x - <span class="number">1</span> + <span class="number">30</span> * (y - <span class="number">2</span>)] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="number">30</span> &gt; x - <span class="number">2</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> <span class="number">30</span> &gt; y - <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> b[x - <span class="number">2</span> + <span class="number">30</span> * (y - <span class="number">1</span>)] != <span class="number">0</span>:</span><br><span class="line">        b[x - <span class="number">2</span> + <span class="number">30</span> * (y - <span class="number">1</span>)] = <span class="number">0</span></span><br><span class="line">        gomaze(x - <span class="number">2</span>, y - <span class="number">1</span>, flag + <span class="string">&#x27;3&#x27;</span>, newmaze)</span><br><span class="line">        b[x - <span class="number">2</span> + <span class="number">30</span> * (y - <span class="number">1</span>)] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="number">30</span> &gt; x + <span class="number">2</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> <span class="number">30</span> &gt; y + <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> b[x + <span class="number">2</span> + <span class="number">30</span> * (y + <span class="number">1</span>)] != <span class="number">0</span>:</span><br><span class="line">        b[x + <span class="number">2</span> + <span class="number">30</span> * (y + <span class="number">1</span>)] = <span class="number">0</span></span><br><span class="line">        gomaze(x + <span class="number">2</span>, y + <span class="number">1</span>, flag + <span class="string">&#x27;4&#x27;</span>, newmaze)</span><br><span class="line">        b[x + <span class="number">2</span> + <span class="number">30</span> * (y + <span class="number">1</span>)] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="number">30</span> &gt; x + <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> <span class="number">30</span> &gt; y + <span class="number">2</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> b[x + <span class="number">1</span> + <span class="number">30</span> * (y + <span class="number">2</span>)] != <span class="number">0</span>:</span><br><span class="line">        b[x + <span class="number">1</span> + <span class="number">30</span> * (y + <span class="number">2</span>)] = <span class="number">0</span></span><br><span class="line">        gomaze(x + <span class="number">1</span>, y + <span class="number">2</span>, flag + <span class="string">&#x27;5&#x27;</span>, newmaze)</span><br><span class="line">        b[x + <span class="number">1</span> + <span class="number">30</span> * (y + <span class="number">2</span>)] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="number">30</span> &gt; x - <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> <span class="number">30</span> &gt; y + <span class="number">2</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> b[x - <span class="number">1</span> + <span class="number">30</span> * (y + <span class="number">2</span>)] != <span class="number">0</span>:</span><br><span class="line">        b[x - <span class="number">1</span> + <span class="number">30</span> * (y + <span class="number">2</span>)] = <span class="number">0</span></span><br><span class="line">        gomaze(x - <span class="number">1</span>, y + <span class="number">2</span>, flag + <span class="string">&#x27;6&#x27;</span>, newmaze)</span><br><span class="line">        b[x - <span class="number">1</span> + <span class="number">30</span> * (y + <span class="number">2</span>)] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="number">30</span> &gt; x - <span class="number">2</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> <span class="number">30</span> &gt; y + <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> b[x - <span class="number">2</span> + <span class="number">30</span> * (y + <span class="number">1</span>)] != <span class="number">0</span>:</span><br><span class="line">        b[x - <span class="number">2</span> + <span class="number">30</span> * (y + <span class="number">1</span>)] = <span class="number">0</span></span><br><span class="line">        gomaze(x - <span class="number">2</span>, y + <span class="number">1</span>, flag + <span class="string">&#x27;7&#x27;</span>, newmaze)</span><br><span class="line">        b[x - <span class="number">2</span> + <span class="number">30</span> * (y + <span class="number">1</span>)] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gomaze(<span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;&#x27;</span>, b)</span><br></pre></td></tr></table></figure><h1 id="dp"><a href="#dp" class="headerlink" title="dp"></a>dp</h1><h3 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h3><p>使用pyinstxtractor将exe转化回py，得到的t4文件，在其文件头加入pyc文件头，然后使用uncompyle6将pyc转化为py，得到程序逻辑。</p><p>该程序需要点击一定次数后开始运行flag字符串生成，其生成逻辑如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">gogogo</span>(<span class="params">self, x</span>):</span><br><span class="line">    <span class="keyword">if</span> x &gt;= <span class="number">5</span>:</span><br><span class="line">        self.flag += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    self.gogogo(x + <span class="number">1</span>)</span><br><span class="line">    self.gogogo(x + <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_flag</span>(<span class="params">self</span>):</span><br><span class="line">    self.gogogo(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> self.flag</span><br></pre></td></tr></table></figure><p>举几个例子，可以看出是斐波拉契数列，flag是第102项，在网上直接搜索可得到。</p><h1 id="flower"><a href="#flower" class="headerlink" title="flower"></a>flower</h1><h3 id="解题过程-1"><a href="#解题过程-1" class="headerlink" title="解题过程"></a>解题过程</h3><p>动态调试程序，程序报错。</p><p><img src="/2022/11/18/SCU2022%E6%96%B0%E7%94%9F%E8%B5%9B/image-20221118165700892.png" alt="代码"></p><p>由上图发现，ida提示try，猜测是异常抛出，程序会执行下面的过程，因此更改eip直接执行下面的语句，程序开始正常运行。</p><p>程序的逻辑： </p><p>判定 input[i] ^ (i%7) &#x3D;&#x3D; someStr[i]</p><p>someStr为程序的数组。</p><h3 id="解题脚本-3"><a href="#解题脚本-3" class="headerlink" title="解题脚本"></a>解题脚本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Str = [<span class="number">0x73</span>, <span class="number">0x62</span>, <span class="number">0x77</span>, <span class="number">0x60</span>, <span class="number">0x70</span>, <span class="number">0x63</span>, <span class="number">0x7D</span>, <span class="number">0x4F</span>, <span class="number">0x74</span>, <span class="number">0x70</span>,</span><br><span class="line">       <span class="number">0x5C</span>, <span class="number">0x70</span>, <span class="number">0x60</span>, <span class="number">0x67</span>, <span class="number">0x6D</span>, <span class="number">0x5E</span>, <span class="number">0x6B</span>, <span class="number">0x70</span>, <span class="number">0x5B</span>, <span class="number">0x6C</span>,</span><br><span class="line">       <span class="number">0x68</span>, <span class="number">0x5F</span>, <span class="number">0x74</span>, <span class="number">0x70</span>, <span class="number">0x64</span>, <span class="number">0x61</span>, <span class="number">0x6B</span>, <span class="number">0x72</span>, <span class="number">0x5F</span>, <span class="number">0x6F</span>,</span><br><span class="line">       <span class="number">0x67</span>, <span class="number">0x66</span>, <span class="number">0x60</span>, <span class="number">0x5A</span>, <span class="number">0x69</span>, <span class="number">0x66</span>, <span class="number">0x5E</span>, <span class="number">0x70</span>, <span class="number">0x66</span>, <span class="number">0x72</span>,</span><br><span class="line">       <span class="number">0x60</span>, <span class="number">0x74</span>, <span class="number">0x73</span>, <span class="number">0x64</span>, <span class="number">0x5D</span>, <span class="number">0x73</span>, <span class="number">0x68</span>, <span class="number">0x64</span>, <span class="number">0x7F</span>, <span class="number">0x65</span>,</span><br><span class="line">       <span class="number">0x73</span>, <span class="number">0x71</span>, <span class="number">0x7E</span>]</span><br><span class="line">myinput = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(Str)):</span><br><span class="line">    myinput.append(Str[i] ^ (i % <span class="number">7</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> myinput:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(i), end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="go"><a href="#go" class="headerlink" title="go"></a>go</h1><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>看程序的main_main、main_main_func1、main_main_func2、main_main_func3、main_main_func4、main_main_func5函数</p><p>后面五个func函数是分别处理访问url的参数的不同所执行的。</p><p>其中func2函数中包含scuctf字段，猜测其为提交flag，并且检测flag的地方。</p><p>不断调试该程序可以发现变换flag的过程，通过动态调试可以发现flag的转换只是位置上的转换，因此，可以根据输入的字符串a变换后的结果b，去获取这个变换的过程</p><p><img src="/2022/11/18/SCU2022%E6%96%B0%E7%94%9F%E8%B5%9B/image-20221118170503198.png" alt="代码"></p><h3 id="解题脚本-4"><a href="#解题脚本-4" class="headerlink" title="解题脚本"></a>解题脚本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">change = [<span class="number">0x30</span>, <span class="number">0x35</span>, <span class="number">0x61</span>, <span class="number">0x66</span>, <span class="number">0x6B</span>, <span class="number">0x70</span>, <span class="number">0x75</span>, <span class="number">0x31</span>, <span class="number">0x36</span>, <span class="number">0x62</span>,</span><br><span class="line">          <span class="number">0x67</span>, <span class="number">0x6C</span>, <span class="number">0x71</span>, <span class="number">0x76</span>, <span class="number">0x32</span>, <span class="number">0x37</span>, <span class="number">0x63</span>, <span class="number">0x68</span>, <span class="number">0x6D</span>, <span class="number">0x72</span>,</span><br><span class="line">          <span class="number">0x33</span>, <span class="number">0x38</span>, <span class="number">0x64</span>, <span class="number">0x69</span>, <span class="number">0x6E</span>, <span class="number">0x73</span>, <span class="number">0x34</span>, <span class="number">0x39</span>, <span class="number">0x65</span>, <span class="number">0x6A</span>,</span><br><span class="line">          <span class="number">0x6F</span>, <span class="number">0x74</span>]</span><br><span class="line">ch = <span class="string">&quot;0123456789abcdefghijklmnopqrstuv&quot;</span></span><br><span class="line">re = <span class="string">&quot;5r+cR6AoCc503=i45q/oR6Zyoq5LairI&quot;</span></span><br><span class="line">flag = [<span class="number">0</span>] * <span class="number">32</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">ord</span>(ch[i]) == change[j]:</span><br><span class="line">            flag[i] = <span class="built_in">ord</span>(re[j])</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> flag:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(i), end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="logic"><a href="#logic" class="headerlink" title="logic"></a>logic</h1><h3 id="解题过程-2"><a href="#解题过程-2" class="headerlink" title="解题过程"></a>解题过程</h3><p>查询setjmp、longjmp函数理清程序流程，一共有三个函数。</p><p>第一个函数逻辑为：检查输入字符串每两位组合，前一个组合组成的数小于后一个组合组成的数；</p><p>第二个函数逻辑为：根据输入字符串对一个数组进行操作；</p><p>第三个函数逻辑为：其逻辑相当于检查被操作数组的每一个值。</p><p>由于被操作数组的结果正的相加为101，为输入字符串的一半，而负的相加为96，可以推断出每个组合的第一个数其对应数组的地方只加不减，而第二个数其对应数组的地方只减不加，且倒数五个组合的第二个数必须为Z。</p><h3 id="解题脚本-5"><a href="#解题脚本-5" class="headerlink" title="解题脚本"></a>解题脚本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">changenum</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="number">0</span> &lt;= num &lt;= <span class="number">9</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">chr</span>(num + <span class="number">48</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="number">10</span> &lt;= num &lt;= <span class="number">35</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">chr</span>(num + <span class="number">87</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="number">36</span> &lt;= num &lt;= <span class="number">62</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">chr</span>(num + <span class="number">29</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">changestr</span>(<span class="params">ch</span>):</span><br><span class="line">    num = <span class="built_in">ord</span>(ch)</span><br><span class="line">    <span class="keyword">if</span> <span class="number">48</span> &lt;= num &lt;= <span class="number">57</span>:</span><br><span class="line">        <span class="keyword">return</span> num - <span class="number">48</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="number">97</span> &lt;= num &lt;= <span class="number">122</span>:</span><br><span class="line">        <span class="keyword">return</span> num - <span class="number">87</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="number">65</span> &lt;= num &lt;= <span class="number">90</span>:</span><br><span class="line">        <span class="keyword">return</span> num - <span class="number">29</span></span><br><span class="line">a = [<span class="number">0x1</span>..<span class="number">.0</span>x5]</span><br><span class="line">frequencyOfNum = [<span class="number">0</span>] * <span class="number">62</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">62</span>):</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">        frequencyOfNum[i] = a[i]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        frequencyOfNum[i] = a[i] - a[i - <span class="number">1</span>]</span><br><span class="line">    <span class="built_in">print</span>(frequencyOfNum[i], end=<span class="string">&quot;, &quot;</span>)</span><br><span class="line">result = [-<span class="number">1</span>] * <span class="number">202</span></span><br><span class="line">index1 = <span class="number">0</span></span><br><span class="line">index2 = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">62</span>):</span><br><span class="line">    <span class="keyword">if</span> frequencyOfNum[i] &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(frequencyOfNum[i]):</span><br><span class="line">            result[index1 * <span class="number">2</span>] = i</span><br><span class="line">            index1 += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> frequencyOfNum[i] &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(-frequencyOfNum[i]):</span><br><span class="line">            result[index2 * <span class="number">2</span> + <span class="number">1</span>] = i - <span class="number">1</span></span><br><span class="line">            index2 += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    result[index2 * <span class="number">2</span> + <span class="number">1</span>] = <span class="number">61</span></span><br><span class="line">    index2 += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>, result)</span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> result:</span><br><span class="line">    flag += changenum(i)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h1 id="pyc"><a href="#pyc" class="headerlink" title="pyc"></a>pyc</h1><p>将pyc转换为py，可以看出类似矩阵计算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">sss = <span class="string">&quot;99 ... 121674&quot;</span> // 条件等式</span><br><span class="line">ss = sss.split(<span class="string">&quot; and &quot;</span>)</span><br><span class="line">num = []</span><br><span class="line">r = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ss:</span><br><span class="line">    s = i.split(<span class="string">&quot; &quot;</span>)</span><br><span class="line">    x = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">25</span>):</span><br><span class="line">        x.append(<span class="built_in">int</span>(s[i * <span class="number">4</span>]))</span><br><span class="line">    num.append(x)</span><br><span class="line">    r.append(<span class="built_in">int</span>(s[<span class="number">100</span>]))</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">b = np.array(num)</span><br><span class="line">a = np.array(r)</span><br><span class="line">flag = np.linalg.solve(b, a)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> flag:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="built_in">round</span>(i)), end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="xxx"><a href="#xxx" class="headerlink" title="xxx"></a>xxx</h1><p>程序一开始为检查函数解密出来，运行完解密函数，就可以知道检查函数了，</p><p>故使用动态调试，然后看汇编代码知道检查函数的流程，大概是(input + 4) ^ 0x28，然后进行比较。</p><h3 id="解题脚本-6"><a href="#解题脚本-6" class="headerlink" title="解题脚本"></a>解题脚本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">b = [<span class="number">0x7E</span> ... <span class="number">0x00</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(b) // <span class="number">4</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>((b[i * <span class="number">4</span>] ^ <span class="number">0x28</span>) - <span class="number">4</span>), end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="VM"><a href="#VM" class="headerlink" title="VM"></a>VM</h1><h3 id="解题过程-3"><a href="#解题过程-3" class="headerlink" title="解题过程"></a>解题过程</h3><p>case0对应add，case1对应sub，case2对应xor，case3对应cmp，case456对应各类jmp，case7对应获取input，case8对应赋值input，case9对应获取具体操作。</p><p>三个数组分别为input、stack、operation，index被放在了input[0x32]</p><p>然后就是动态调试看程序的逻辑：</p><ul><li>input[i] &#x3D; input[i] ^ input[i+1]</li><li>input[i+1] &#x3D; （input[i] - i) + input[i+1]</li><li>进行结果比较</li></ul><h3 id="解题脚本-7"><a href="#解题脚本-7" class="headerlink" title="解题脚本"></a>解题脚本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">d = [<span class="number">0x3d</span>, <span class="number">0x56</span>, <span class="number">0x80</span>, <span class="number">0xb3</span>, <span class="number">0xc9</span>, <span class="number">0xf0</span>,</span><br><span class="line">     <span class="number">0x128</span>, <span class="number">0x15f</span>, <span class="number">0x180</span>, <span class="number">0x196</span>, <span class="number">0x1a7</span>, <span class="number">0x1a2</span>,</span><br><span class="line">     <span class="number">0x197</span>, <span class="number">0x19e</span>, <span class="number">0x19d</span>, <span class="number">0x1c1</span>, <span class="number">0x1e3</span>, <span class="number">0x1de</span>,</span><br><span class="line">     <span class="number">0x1ce</span>, <span class="number">0x1c6</span>, <span class="number">0x1b3</span>, <span class="number">0x1a5</span>, <span class="number">0x19a</span>, <span class="number">0x1e8</span>]</span><br><span class="line">c = [<span class="number">0</span>] * <span class="number">25</span></span><br><span class="line">d.reverse()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">23</span>):</span><br><span class="line">    c[i] = d[i] - d[i + <span class="number">1</span>] + (<span class="number">24</span> - i - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">23</span>):</span><br><span class="line">    c[i + <span class="number">1</span>] = c[i] ^ c[i + <span class="number">1</span>]</span><br><span class="line">c.reverse()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> c:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(i), end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="unity"><a href="#unity" class="headerlink" title="unity"></a>unity</h1><p>dnspy打开Assembly-CSharp.dll，找到其方法、函数等，发现其中有个GameManger，应该是管理游戏的类，再在其中发现Update方法，应该是判定游戏是否可以继续以及画面更新的方法。</p><p><img src="/2022/11/18/SCU2022%E6%96%B0%E7%94%9F%E8%B5%9B/clip_image002.png"></p><p>在其中发现了Gameover变量，猜测是判定游戏是否可以继续的值，将赋值为true的地方更改为false，打开游戏，我不死了。</p><p><img src="/2022/11/18/SCU2022%E6%96%B0%E7%94%9F%E8%B5%9B/clip_image003.png" alt="代码"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>TEA加密与解密</title>
      <link href="/2022/10/07/TEA%E5%8A%A0%E5%AF%86%E4%B8%8E%E8%A7%A3%E5%AF%86/"/>
      <url>/2022/10/07/TEA%E5%8A%A0%E5%AF%86%E4%B8%8E%E8%A7%A3%E5%AF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="TEA加密解密流程"><a href="#TEA加密解密流程" class="headerlink" title="TEA加密解密流程"></a>TEA加密解密流程</h1><p>参考代码：(源自：<a href="https://ctf-wiki.org/reverse/identify-encode-encryption/introduction/">常见加密算法和编码识别 - CTF Wiki (ctf-wiki.org)</a>)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">encrypt</span> <span class="params">(<span class="type">uint32_t</span>* v, <span class="type">uint32_t</span>* k)</span> &#123;</span><br><span class="line">    <span class="type">uint32_t</span> v0=v[<span class="number">0</span>], v1=v[<span class="number">1</span>], sum=<span class="number">0</span>, i;           <span class="comment">/* set up */</span></span><br><span class="line">    <span class="type">uint32_t</span> delta=<span class="number">0x9e3779b9</span>;                     <span class="comment">/* a key schedule constant */</span></span><br><span class="line">    <span class="type">uint32_t</span> k0=k[<span class="number">0</span>], k1=k[<span class="number">1</span>], k2=k[<span class="number">2</span>], k3=k[<span class="number">3</span>];   <span class="comment">/* cache key */</span></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;                       <span class="comment">/* basic cycle start */</span></span><br><span class="line">        sum += delta;</span><br><span class="line">        v0 += ((v1&lt;&lt;<span class="number">4</span>) + k0) ^ (v1 + sum) ^ ((v1&gt;&gt;<span class="number">5</span>) + k1);</span><br><span class="line">        v1 += ((v0&lt;&lt;<span class="number">4</span>) + k2) ^ (v0 + sum) ^ ((v0&gt;&gt;<span class="number">5</span>) + k3);  </span><br><span class="line">    &#125;                                              <span class="comment">/* end cycle */</span></span><br><span class="line">    v[<span class="number">0</span>]=v0; v[<span class="number">1</span>]=v1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">decrypt</span> <span class="params">(<span class="type">uint32_t</span>* v, <span class="type">uint32_t</span>* k)</span> &#123;</span><br><span class="line">    <span class="type">uint32_t</span> v0=v[<span class="number">0</span>], v1=v[<span class="number">1</span>], sum=<span class="number">0xC6EF3720</span>, i;  <span class="comment">/* set up */</span></span><br><span class="line">    <span class="type">uint32_t</span> delta=<span class="number">0x9e3779b9</span>;                     <span class="comment">/* a key schedule constant */</span></span><br><span class="line">    <span class="type">uint32_t</span> k0=k[<span class="number">0</span>], k1=k[<span class="number">1</span>], k2=k[<span class="number">2</span>], k3=k[<span class="number">3</span>];   <span class="comment">/* cache key */</span></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">32</span>; i++) &#123;                         <span class="comment">/* basic cycle start */</span></span><br><span class="line">        v1 -= ((v0&lt;&lt;<span class="number">4</span>) + k2) ^ (v0 + sum) ^ ((v0&gt;&gt;<span class="number">5</span>) + k3);</span><br><span class="line">        v0 -= ((v1&lt;&lt;<span class="number">4</span>) + k0) ^ (v1 + sum) ^ ((v1&gt;&gt;<span class="number">5</span>) + k1);</span><br><span class="line">        sum -= delta;                                   </span><br><span class="line">    &#125;                                              <span class="comment">/* end cycle */</span></span><br><span class="line">    v[<span class="number">0</span>]=v0; v[<span class="number">1</span>]=v1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>在其他的TEA加密解密流程中，部分过程或许有偏差，但整体上还是大差不差的。</li><li>注意使用的变量是32位的unsigned int类型变量。</li></ul><h3 id="具体示例"><a href="#具体示例" class="headerlink" title="具体示例"></a>具体示例</h3><p>在此TEA加密流程中，v5、v6并不完全按照示例进行，但只要按照其反思路来做就可以了。</p><p><img src="/2022/10/07/TEA%E5%8A%A0%E5%AF%86%E4%B8%8E%E8%A7%A3%E5%AF%86/image-20221007171855238.png" alt="TEA加密"></p><p>解密脚本</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">decrypt</span><span class="params">(<span class="type">int</span> *res, <span class="type">int</span> *key)</span>&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> v6=res[<span class="number">0</span>];</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> v5=res[<span class="number">1</span>];</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> sum = <span class="number">0xC6EF3720</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> delta = <span class="number">0x61C88647</span>;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">0x1F</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">  v5 -= (((v6 &gt;&gt; <span class="number">5</span>) ^ (<span class="number">16</span> * v6)) + v6) ^ (key[(sum&gt;&gt;<span class="number">11</span>)&amp;<span class="number">3</span>] + sum);</span><br><span class="line">    sum += <span class="number">0x61C88647</span>;</span><br><span class="line">    v6 -= (((v5 &gt;&gt; <span class="number">5</span>) ^ (<span class="number">16</span> * v5)) + v5) ^ (key[sum&amp;<span class="number">3</span>] + sum);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;结果：%x,%x\n&quot;</span>,v6,v5);</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">encrypt</span><span class="params">(<span class="type">int</span> *res, <span class="type">int</span> *key)</span>&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> v6=res[<span class="number">0</span>];</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> v5=res[<span class="number">1</span>];</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> delta = <span class="number">0x61C88647</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> i;</span><br><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">0x1F</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">  v6 += (((v5 &gt;&gt; <span class="number">5</span>) ^ (<span class="number">16</span> * v5)) + v5) ^ (key[sum&amp;<span class="number">3</span>] + sum);</span><br><span class="line">  sum -= <span class="number">0x61C88647</span>;</span><br><span class="line">v5 += (((v6 &gt;&gt; <span class="number">5</span>) ^ (<span class="number">16</span> * v6)) + v6) ^ (key[(sum&gt;&gt;<span class="number">11</span>)&amp;<span class="number">3</span>] + sum);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;结果：%X,%X\n&quot;</span>,v6,v5);</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">int</span> res[<span class="number">6</span>]=&#123;</span><br><span class="line"><span class="number">0xC11EE75A</span>, <span class="number">0xA4AD0973</span>,</span><br><span class="line"><span class="number">0xF61C9018</span>, <span class="number">0x32E37BCD</span>,</span><br><span class="line"><span class="number">0x2DCC1F26</span>, <span class="number">0x344380CC</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> key[<span class="number">4</span>]=&#123;</span><br><span class="line"><span class="number">0x010203</span>, <span class="number">0x04050607</span>, <span class="number">0x08090A0B</span>, <span class="number">0x0C0D0E0F</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">decrypt(&amp;res[i*<span class="number">2</span>],key);</span><br><span class="line">&#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后所得到的结果要注意是小端存储。</p>]]></content>
      
      
      <categories>
          
          <category> Reverse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杰瑞的影分身——bugku</title>
      <link href="/2022/10/05/%E6%9D%B0%E7%91%9E%E7%9A%84%E5%BD%B1%E5%88%86%E8%BA%AB%E2%80%94%E2%80%94bugku/"/>
      <url>/2022/10/05/%E6%9D%B0%E7%91%9E%E7%9A%84%E5%BD%B1%E5%88%86%E8%BA%AB%E2%80%94%E2%80%94bugku/</url>
      
        <content type="html"><![CDATA[<h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>简单浏览下程序思路，可以发现程序的输入，但程序的结果比较过程则没有发现。</p><p><img src="/2022/10/05/%E6%9D%B0%E7%91%9E%E7%9A%84%E5%BD%B1%E5%88%86%E8%BA%AB%E2%80%94%E2%80%94bugku/image-20221005181311087.png" alt="main"></p><p><img src="/2022/10/05/%E6%9D%B0%E7%91%9E%E7%9A%84%E5%BD%B1%E5%88%86%E8%BA%AB%E2%80%94%E2%80%94bugku/image-20221005181336032.png" alt="sub_401670"></p><p><img src="/2022/10/05/%E6%9D%B0%E7%91%9E%E7%9A%84%E5%BD%B1%E5%88%86%E8%BA%AB%E2%80%94%E2%80%94bugku/image-20221005181419209.png" alt="sub_402770"></p><p>通过网上搜索，在sub_402770的函数中Block部分应该也是一个函数，我猜测具体过程是由前一句sub_401C40函数生成的，因此直接在这下断点，直接动态调试。</p><p>程序的比较过程还是比较明显的，但还是调试了我半天，具体过程就不贴图了。</p><h3 id="第一个过程"><a href="#第一个过程" class="headerlink" title="第一个过程"></a>第一个过程</h3><p>对input[i]进行异或4，然后当 i % 3 &#x3D;&#x3D; 1时，还将input[i]与一串字符串第（3 * i）位异或（但根据该字符串来进行解题时，出现的结果不太对，因此我直接记录进行异或的字符，直接异或了）</p><h3 id="第二个过程"><a href="#第二个过程" class="headerlink" title="第二个过程"></a>第二个过程</h3><p>对sub_4017B0函数生成的字符串进行处理。</p><p><img src="/2022/10/05/%E6%9D%B0%E7%91%9E%E7%9A%84%E5%BD%B1%E5%88%86%E8%BA%AB%E2%80%94%E2%80%94bugku/image-20221005182710135.png" alt="sub_4017B0"></p><p>由于程序的进行，处理后的字符串可以直接读取，因此不用管过程，直接得到结果。</p><p><code>str1 = &quot;e4bdtRV02&quot;</code></p><p>后面的字符被第十位的 0 截断了，因此只有9位了。</p><h3 id="第三个过程"><a href="#第三个过程" class="headerlink" title="第三个过程"></a>第三个过程</h3><p>将变化后的input[i]与sub_401BD0（i）所得到的返回值 + 2 进行异或。</p><p><img src="/2022/10/05/%E6%9D%B0%E7%91%9E%E7%9A%84%E5%BD%B1%E5%88%86%E8%BA%AB%E2%80%94%E2%80%94bugku/image-20221005183346887.png" alt="sub——401BD0"></p><p>同时如果input的前九位与str1的前九位相加。</p><p><img src="/2022/10/05/%E6%9D%B0%E7%91%9E%E7%9A%84%E5%BD%B1%E5%88%86%E8%BA%AB%E2%80%94%E2%80%94bugku/image-20221005183623391.png" alt="调试得到的第三个过程"></p><h1 id="解题脚本"><a href="#解题脚本" class="headerlink" title="解题脚本"></a>解题脚本</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">getnum</span>(<span class="params">a1</span>):</span><br><span class="line">    <span class="keyword">if</span> a1 == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">12</span></span><br><span class="line">    <span class="keyword">elif</span> a1 == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">11</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">str1 = <span class="string">&quot;e4bdtRV02&quot;</span></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&quot;flag&#123;where is tom&#125;flag&#123;My cheese&#125;flag&#123;i miss tom&#125;&quot;</span></span><br><span class="line">str2 = <span class="string">&quot;gsleg&quot;</span></span><br><span class="line">strrrr = [<span class="number">0xD3</span>, <span class="number">0x38</span>, <span class="number">0xD1</span>, <span class="number">0xD3</span>, <span class="number">0x7B</span>, <span class="number">0xAD</span>, <span class="number">0xB3</span>, <span class="number">0x66</span>, <span class="number">0x71</span>, <span class="number">0x3A</span>,</span><br><span class="line">          <span class="number">0x59</span>, <span class="number">0x5F</span>, <span class="number">0x5F</span>, <span class="number">0x2D</span>, <span class="number">0x73</span>]</span><br><span class="line">flag = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">15</span>):</span><br><span class="line">    <span class="keyword">if</span> i &lt; <span class="number">9</span>:</span><br><span class="line">        flag.append((strrrr[i] - <span class="built_in">ord</span>(str1[i])) ^ getnum(i % <span class="number">3</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flag.append((strrrr[i] ^ getnum(i % <span class="number">3</span>)))</span><br><span class="line">t = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">15</span>):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">3</span> == <span class="number">1</span>:</span><br><span class="line">        flag[i] ^= <span class="built_in">ord</span>(str2[t])</span><br><span class="line">        t += <span class="number">1</span></span><br><span class="line">    flag[i] ^= <span class="number">4</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> flag:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(i), end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Reverse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Reverse </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bingo——bugku</title>
      <link href="/2022/10/04/Bingo%E2%80%94%E2%80%94bugku/"/>
      <url>/2022/10/04/Bingo%E2%80%94%E2%80%94bugku/</url>
      
        <content type="html"><![CDATA[<h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>思路主要参考网上writeup，一步步做出来的。</p><p>png中隐藏着exe文件</p><p><img src="/2022/10/04/Bingo%E2%80%94%E2%80%94bugku/1.png" alt="1"></p><p>MZ文件头，即（4D5A9000…)，从这开始到最后的字节都提取出来，为一个exe文件。此时的exe文件因为缺少PE头无法被ida识别，因此加一个PE头 50 45 00 00</p><p><img src="/2022/10/04/Bingo%E2%80%94%E2%80%94bugku/2.png" alt="2"></p><p>也可以通过010editor在模板中修改</p><p><img src="/2022/10/04/Bingo%E2%80%94%E2%80%94bugku/3.png" alt="3"></p><p>用ida打开该exe文件</p><p><img src="/2022/10/04/Bingo%E2%80%94%E2%80%94bugku/4.png" alt="4"></p><p>判断这是一个解密过程，即 为部分字节数据进行异或解密，用脚本进行解密。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&quot;C:\Users\hahbiubiubiu\Downloads\file\bingo.exe&quot;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:    </span><br><span class="line">    data = f.read() </span><br><span class="line">data = <span class="built_in">list</span>(data) </span><br><span class="line">text_segment_size = <span class="number">0x3E000</span> - <span class="number">0x1000</span> </span><br><span class="line"><span class="comment"># 0x3E000是大小 </span></span><br><span class="line"><span class="comment"># 0x1000是偏移 </span></span><br><span class="line">key = <span class="number">0x22</span>  </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x1000</span>, <span class="number">0x1000</span> + text_segment_size):</span><br><span class="line">    data[i] ^= key  </span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&quot;C:\Users\hahbiubiubiu\Downloads\file\bing0_xor.exe&quot;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f: </span><br><span class="line">    f.write(<span class="built_in">bytes</span>(data))</span><br></pre></td></tr></table></figure><p>执行脚本后得到新的exe文件，ida打开它</p><p><img src="/2022/10/04/Bingo%E2%80%94%E2%80%94bugku/5.png" alt="5"></p><p>除了前面的异或，它跳到了0x408BE0的位置</p><p><img src="/2022/10/04/Bingo%E2%80%94%E2%80%94bugku/6.png" alt="6"></p><p> Edit-&gt;Segments-&gt;Rebase Progarm…-&gt;修改value为0</p><p><img src="/2022/10/04/Bingo%E2%80%94%E2%80%94bugku/7.png" alt="7"></p><p><img src="/2022/10/04/Bingo%E2%80%94%E2%80%94bugku/8.png" alt="8"></p><p>该函数地址修改为0x8BE0</p><p><img src="/2022/10/04/Bingo%E2%80%94%E2%80%94bugku/9.png" alt="9"></p><p>在010editor中修改程序入口点为0x8BE0</p><p><img src="/2022/10/04/Bingo%E2%80%94%E2%80%94bugku/10.png" alt="10"></p><p>再次用ida打开exe文件发现程序多了两个main函数，main_0函数就是程序主逻辑</p><p><img src="/2022/10/04/Bingo%E2%80%94%E2%80%94bugku/11.png" alt="11"></p><p><img src="/2022/10/04/Bingo%E2%80%94%E2%80%94bugku/12.png" alt="12"></p><p>_strrev是对字符串进行倒转的函数，根据逻辑，写出脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;zaciWjV!Xm[_XSqeThmegndq&quot;</span> </span><br><span class="line">b = <span class="number">29</span> flag = <span class="string">&quot;&quot;</span> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">    t = math.sqrt(<span class="built_in">pow</span>(<span class="built_in">ord</span>(a[<span class="built_in">int</span>(i/<span class="number">2</span>)]), <span class="number">2.0</span>) + <span class="built_in">pow</span>(b, <span class="number">2.0</span>)) + <span class="number">0.5</span>    </span><br><span class="line">    k = <span class="built_in">int</span>(t)    </span><br><span class="line">    b += <span class="number">1</span>    </span><br><span class="line">    flag += <span class="built_in">chr</span>(k)    </span><br><span class="line">    a = a[::-<span class="number">1</span>] <span class="built_in">print</span>(flag[::-<span class="number">1</span>]) </span><br><span class="line"><span class="comment"># flag&#123;woc_6p_tql_moshifu&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Reverse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Reverse </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>babyLoginPlus——bugku</title>
      <link href="/2022/10/03/babyLoginPlus-bugku/"/>
      <url>/2022/10/03/babyLoginPlus-bugku/</url>
      
        <content type="html"><![CDATA[<h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>该题主要是参照其他大佬writeup的思路，即找到输入，下断点，根据最后所得到的比较等式来一步步调试得到的。</p><h3 id="VM"><a href="#VM" class="headerlink" title="VM"></a>VM</h3><p>该函数应该是使用vm函数的地方</p><p><img src="/2022/10/03/babyLoginPlus-bugku/image-20221003131441527.png" alt="入口"></p><p>因此在这个地方下了断点之后，一步步开始调试，看看程序的执行流程</p><p>首先，程序的执行到这个地方，会不断重复执行，然后根据调用的函数来获取输入、进行比较、执行输出。</p><p>在前几次的执行中，包含了获取输入的函数，得到我们的输入。</p><h3 id="比较过程"><a href="#比较过程" class="headerlink" title="比较过程"></a>比较过程</h3><p>获取输入后，程序开始执行比较，其中我也不太清楚部分操作的流程，可能是获取数据或者解析数据什么的，因此省略了。</p><p>获取input[i]的字符更新为input[i]-9。</p><p><code>sub dex,ecx</code></p><p><img src="/2022/10/03/babyLoginPlus-bugku/image-20221003115001724.png" alt="input[i]-9"></p><p>获取操作数 0x26。</p><p><img src="/2022/10/03/babyLoginPlus-bugku/image-20221003115346614.png"></p><p>将input[i]与上一个函数获取的0x26异或，即input[i] &#x3D; input[i] ^ 0x26。</p><p><code>xor edx,ecx</code></p><p><img src="/2022/10/03/babyLoginPlus-bugku/image-20221003115613045.png" alt="异或0x26"></p><p>获取程序之前生成的Welcome字符串的第i个字符。</p><p><img src="/2022/10/03/babyLoginPlus-bugku/image-20221003120605295.png" alt="获取key"></p><p>将获取Welcome字符串的字符和之前变化后的input[i]进行异或。</p><p><code>xor edx,ecx</code></p><p><img src="/2022/10/03/babyLoginPlus-bugku/image-20221003120903814.png" alt="异或key"></p><p>执行add [eax], esi, 将上一步异或得到的的字符加上6。</p><p><code>add [eax], esi</code></p><p><img src="/2022/10/03/babyLoginPlus-bugku/image-20221003121506365.png" alt="变化"></p><p>获取最后结果比较所需的数组。</p><p><img src="/2022/10/03/babyLoginPlus-bugku/image-20221003121637821.png"></p><p><img src="/2022/10/03/babyLoginPlus-bugku/image-20221003121735062.png"></p><p><img src="/2022/10/03/babyLoginPlus-bugku/image-20221003130820114.png" alt="结果数组"></p><p>进行结果比较。</p><p><code>cmp edi,ecx</code></p><p><img src="/2022/10/03/babyLoginPlus-bugku/image-20221003122048630.png" alt="结果比较"></p><h1 id="解题脚本"><a href="#解题脚本" class="headerlink" title="解题脚本"></a>解题脚本</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">result = [<span class="number">0x32</span>, <span class="number">0x26</span>, <span class="number">0x18</span>, <span class="number">0x21</span>, <span class="number">0x41</span>, <span class="number">0x23</span>, <span class="number">0x2A</span>, <span class="number">0x57</span>, <span class="number">0x44</span>, <span class="number">0x29</span>, <span class="number">0x35</span>, <span class="number">0x12</span>, <span class="number">0x20</span>, <span class="number">0x17</span>, <span class="number">0x45</span>, <span class="number">0x1C</span>,</span><br><span class="line">       <span class="number">0x68</span>, <span class="number">0x2D</span>, <span class="number">0x7A</span>, <span class="number">0x79</span>, <span class="number">0x47</span>, <span class="number">0x7F</span>, <span class="number">0x44</span>, <span class="number">0x09</span>, <span class="number">0x1E</span>, <span class="number">0x75</span>, <span class="number">0x41</span>, <span class="number">0x2A</span>, <span class="number">0x19</span>, <span class="number">0x34</span>, <span class="number">0x76</span>, <span class="number">0x47</span>,</span><br><span class="line">       <span class="number">0x14</span>, <span class="number">0x50</span>, <span class="number">0x52</span>, <span class="number">0x76</span>, <span class="number">0x58</span>]</span><br><span class="line">key = [<span class="number">0x57</span>, <span class="number">0x65</span>, <span class="number">0x6C</span>, <span class="number">0x63</span>, <span class="number">0x6F</span>, <span class="number">0x6D</span>, <span class="number">0x65</span>, <span class="number">0x5F</span>, <span class="number">0x74</span>, <span class="number">0x6F</span>, <span class="number">0x5F</span>, <span class="number">0x73</span>, <span class="number">0x64</span>, <span class="number">0x6E</span>, <span class="number">0x69</span>, <span class="number">0x73</span>,</span><br><span class="line">       <span class="number">0x63</span>, <span class="number">0x5F</span>, <span class="number">0x32</span>, <span class="number">0x30</span>, <span class="number">0x31</span>, <span class="number">0x38</span>, <span class="number">0x5F</span>, <span class="number">0x42</span>, <span class="number">0x79</span>, <span class="number">0x2E</span>, <span class="number">0x5A</span>, <span class="number">0x65</span>, <span class="number">0x72</span>, <span class="number">0x6F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">       <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>]</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(result)):</span><br><span class="line">    flag += <span class="built_in">chr</span>(((result[i]-<span class="number">0x6</span>) ^ <span class="number">0x26</span> ^ key[i])+<span class="number">9</span>)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#flag&#123;_p1us_babyL0gin_pPpPpPpPp_p1us_&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Reverse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Reverse </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汤姆的苹果——bugku</title>
      <link href="/2022/09/27/%E6%B1%A4%E5%A7%86%E7%9A%84%E8%8B%B9%E6%9E%9C%E2%80%94%E2%80%94bugku/"/>
      <url>/2022/09/27/%E6%B1%A4%E5%A7%86%E7%9A%84%E8%8B%B9%E6%9E%9C%E2%80%94%E2%80%94bugku/</url>
      
        <content type="html"><![CDATA[<h1 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h1><p>首先，看<strong>MainActivity</strong>，猜测b中<strong>handleMessage</strong>是判断最终条件，<strong>onClick</strong>是检验flag方法</p><p><img src="/2022/09/27/%E6%B1%A4%E5%A7%86%E7%9A%84%E8%8B%B9%E6%9E%9C%E2%80%94%E2%80%94bugku/1664414144444.png" alt="MainActivity"></p><p>然后查看引用输入字符串obj的a类中，<strong>doInBackground</strong>应该是对输入字符串进行解密</p><p><img src="/2022/09/27/%E6%B1%A4%E5%A7%86%E7%9A%84%E8%8B%B9%E6%9E%9C%E2%80%94%E2%80%94bugku/1664414485829.png" alt="类a"></p><p>查看<strong>doInBackground</strong>引用的b类</p><p><img src="/2022/09/27/%E6%B1%A4%E5%A7%86%E7%9A%84%E8%8B%B9%E6%9E%9C%E2%80%94%E2%80%94bugku/1664414746576.png" alt="类b"></p><p>可以看出这是对字符串的一个异或</p><p>再去看a类中的<strong>onPostExcute</strong>方法，以及除了a、b类以外的c类，猜测这是一起为最后为检测结果进行判定的方法</p><p><img src="/2022/09/27/%E6%B1%A4%E5%A7%86%E7%9A%84%E8%8B%B9%E6%9E%9C%E2%80%94%E2%80%94bugku/1664414837113.png" alt="目录"></p><p>c类，可以看出这是一个比较结果的方法</p><p><img src="/2022/09/27/%E6%B1%A4%E5%A7%86%E7%9A%84%E8%8B%B9%E6%9E%9C%E2%80%94%E2%80%94bugku/1664414874587.png" alt="类c"></p><h1 id="程序逻辑"><a href="#程序逻辑" class="headerlink" title="程序逻辑"></a>程序逻辑</h1><p>输入flag–&gt;进入a类不断进入b类进行循环–&gt;进入c类进行结果比较</p><h1 id="解题脚本"><a href="#解题脚本" class="headerlink" title="解题脚本"></a>解题脚本</h1><p>由于按照程序原本的逻辑，我写出的脚本无法生成flag，且网上暂时没有该题的writeup，我只好使用另一种方法。</p><p>程序的逻辑是将字符串不断地进行异或，最后的结果其实相当于进行一次异或，而这一次异或的数字是未知，因此可以写一个循环去爆破它。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">final = [<span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;&#125;&#x27;</span>, <span class="string">&#x27;&#123;&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;v&#x27;</span>, <span class="string">&#x27;&#125;&#x27;</span>, <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;$&#x27;</span>, <span class="string">&#x27;%&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;v&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;v&#x27;</span>,</span><br><span class="line">         <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;a&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    num = [<span class="number">0</span>] * <span class="number">24</span></span><br><span class="line">    f = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> q <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(final)):</span><br><span class="line">        num[q] = (<span class="built_in">ord</span>(final[q]) ^ i)</span><br><span class="line">        <span class="keyword">if</span> num[q] &gt;= <span class="number">128</span>:</span><br><span class="line">            f = <span class="number">1</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> num[q] &lt;= <span class="number">31</span>:</span><br><span class="line">            f = <span class="number">1</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> f == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;the i is: &quot;</span>, i)</span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> num:</span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">chr</span>(t), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line"><span class="comment"># the i is:  27</span></span><br><span class="line"><span class="comment"># akf`|mfntoa?&gt;543564mlmoz</span></span><br><span class="line"><span class="comment"># the i is:  28</span></span><br><span class="line"><span class="comment"># flag&#123;jaishf89234213jkjh&#125;</span></span><br><span class="line"><span class="comment"># the i is:  29</span></span><br><span class="line"><span class="comment"># gm`fzk`hrig98325302kjki|</span></span><br><span class="line"><span class="comment"># the i is:  30</span></span><br><span class="line"><span class="comment"># dnceyhckqjd:;016031hihj</span></span><br><span class="line"><span class="comment"># the i is:  31</span></span><br><span class="line"><span class="comment"># eobdxibjpke;:107120ihik~</span></span><br></pre></td></tr></table></figure><p><strong>flag{jaishf89234213jkjh}</strong></p>]]></content>
      
      
      <categories>
          
          <category> Reverse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Reverse </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/09/27/hello-world/"/>
      <url>/2022/09/27/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;Hello, my name is biubiubiu&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
