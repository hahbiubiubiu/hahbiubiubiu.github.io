<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>babyLoginPlus--bugku</title>
      <link href="/2022/10/03/babyLoginPlus-bugku/"/>
      <url>/2022/10/03/babyLoginPlus-bugku/</url>
      
        <content type="html"><![CDATA[<h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>该题主要是参照其他大佬writeup的思路，即找到输入，下断点，根据最后所得到的比较等式来一步步调试得到的。</p><h3 id="VM"><a href="#VM" class="headerlink" title="VM"></a>VM</h3><p>该函数应该是使用vm函数的地方</p><p><img src="/2022/10/03/babyLoginPlus-bugku/image-20221003131441527.png" alt="入口"></p><p>因此在这个地方下了断点之后，一步步开始调试，看看程序的执行流程</p><p>首先，程序的执行到这个地方，会不断重复执行，然后根据调用的函数来获取输入、进行比较、执行输出。</p><p>在前几次的执行中，包含了获取输入的函数，得到我们的输入。</p><h3 id="比较过程"><a href="#比较过程" class="headerlink" title="比较过程"></a>比较过程</h3><p>获取输入后，程序开始执行比较，其中我也不太清楚部分操作的流程，可能是获取数据或者解析数据什么的，因此省略了。</p><p>获取input[i]的字符更新为input[i]-9。</p><p><code>sub dex,ecx</code></p><p><img src="/2022/10/03/babyLoginPlus-bugku/image-20221003115001724.png" alt="input[i]-9"></p><p>获取操作数 0x26。</p><p><img src="/./image-20221003115346614.png"></p><p>将input[i]与上一个函数获取的0x26异或，即input[i] &#x3D; input[i] ^ 0x26。</p><p><code>xor edx,ecx</code></p><p><img src="/2022/10/03/babyLoginPlus-bugku/image-20221003115613045.png" alt="异或0x26"></p><p>获取程序之前生成的Welcome字符串的第i个字符。</p><p><img src="/2022/10/03/babyLoginPlus-bugku/image-20221003120605295.png" alt="获取key"></p><p>将获取Welcome字符串的字符和之前变化后的input[i]进行异或。</p><p><code>xor edx,ecx</code></p><p><img src="/2022/10/03/babyLoginPlus-bugku/image-20221003120903814.png" alt="异或key"></p><p>执行add [eax], esi, 将上一步异或得到的的字符加上6。</p><p><code>add [eax], esi</code></p><p><img src="/,/image-20221003121506365.png" alt="变化"></p><p>获取最后结果比较所需的数组。</p><p><img src="/2022/10/03/babyLoginPlus-bugku/image-20221003121637821.png"></p><p><img src="/2022/10/03/babyLoginPlus-bugku/image-20221003121735062.png"></p><p><img src="/%EF%BC%8C/image-20221003130820114.png" alt="结果数组"></p><p>进行结果比较。</p><p><code>cmp edi,ecx</code></p><p><img src="/2022/10/03/babyLoginPlus-bugku/image-20221003122048630.png" alt="结果比较"></p><h1 id="解题脚本"><a href="#解题脚本" class="headerlink" title="解题脚本"></a>解题脚本</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">result = [<span class="number">0x32</span>, <span class="number">0x26</span>, <span class="number">0x18</span>, <span class="number">0x21</span>, <span class="number">0x41</span>, <span class="number">0x23</span>, <span class="number">0x2A</span>, <span class="number">0x57</span>, <span class="number">0x44</span>, <span class="number">0x29</span>, <span class="number">0x35</span>, <span class="number">0x12</span>, <span class="number">0x20</span>, <span class="number">0x17</span>, <span class="number">0x45</span>, <span class="number">0x1C</span>,</span><br><span class="line">       <span class="number">0x68</span>, <span class="number">0x2D</span>, <span class="number">0x7A</span>, <span class="number">0x79</span>, <span class="number">0x47</span>, <span class="number">0x7F</span>, <span class="number">0x44</span>, <span class="number">0x09</span>, <span class="number">0x1E</span>, <span class="number">0x75</span>, <span class="number">0x41</span>, <span class="number">0x2A</span>, <span class="number">0x19</span>, <span class="number">0x34</span>, <span class="number">0x76</span>, <span class="number">0x47</span>,</span><br><span class="line">       <span class="number">0x14</span>, <span class="number">0x50</span>, <span class="number">0x52</span>, <span class="number">0x76</span>, <span class="number">0x58</span>]</span><br><span class="line">key = [<span class="number">0x57</span>, <span class="number">0x65</span>, <span class="number">0x6C</span>, <span class="number">0x63</span>, <span class="number">0x6F</span>, <span class="number">0x6D</span>, <span class="number">0x65</span>, <span class="number">0x5F</span>, <span class="number">0x74</span>, <span class="number">0x6F</span>, <span class="number">0x5F</span>, <span class="number">0x73</span>, <span class="number">0x64</span>, <span class="number">0x6E</span>, <span class="number">0x69</span>, <span class="number">0x73</span>,</span><br><span class="line">       <span class="number">0x63</span>, <span class="number">0x5F</span>, <span class="number">0x32</span>, <span class="number">0x30</span>, <span class="number">0x31</span>, <span class="number">0x38</span>, <span class="number">0x5F</span>, <span class="number">0x42</span>, <span class="number">0x79</span>, <span class="number">0x2E</span>, <span class="number">0x5A</span>, <span class="number">0x65</span>, <span class="number">0x72</span>, <span class="number">0x6F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">       <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>]</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(result)):</span><br><span class="line">    flag += <span class="built_in">chr</span>(((result[i]-<span class="number">0x6</span>) ^ <span class="number">0x26</span> ^ key[i])+<span class="number">9</span>)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#flag&#123;_p1us_babyL0gin_pPpPpPpPp_p1us_&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>汤姆的苹果——bugku</title>
      <link href="/2022/09/29/%E6%B1%A4%E5%A7%86%E7%9A%84%E8%8B%B9%E6%9E%9C%E2%80%94%E2%80%94bugku/"/>
      <url>/2022/09/29/%E6%B1%A4%E5%A7%86%E7%9A%84%E8%8B%B9%E6%9E%9C%E2%80%94%E2%80%94bugku/</url>
      
        <content type="html"><![CDATA[<h1 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h1><p>首先，看<strong>MainActivity</strong>，猜测b中<strong>handleMessage</strong>是判断最终条件，<strong>onClick</strong>是检验flag方法</p><p><img src="/2022/09/29/%E6%B1%A4%E5%A7%86%E7%9A%84%E8%8B%B9%E6%9E%9C%E2%80%94%E2%80%94bugku/1664414144444.png" alt="MainActivity"></p><p>然后查看引用输入字符串obj的a类中，<strong>doInBackground</strong>应该是对输入字符串进行解密</p><p><img src="/2022/09/29/%E6%B1%A4%E5%A7%86%E7%9A%84%E8%8B%B9%E6%9E%9C%E2%80%94%E2%80%94bugku/1664414485829.png" alt="类a"></p><p>查看<strong>doInBackground</strong>引用的b类</p><p><img src="/2022/09/29/%E6%B1%A4%E5%A7%86%E7%9A%84%E8%8B%B9%E6%9E%9C%E2%80%94%E2%80%94bugku/1664414746576.png" alt="类b"></p><p>可以看出这是对字符串的一个异或</p><p>再去看a类中的<strong>onPostExcute</strong>方法，以及除了a、b类以外的c类，猜测这是一起为最后为检测结果进行判定的方法</p><p><img src="/2022/09/29/%E6%B1%A4%E5%A7%86%E7%9A%84%E8%8B%B9%E6%9E%9C%E2%80%94%E2%80%94bugku/1664414837113.png" alt="目录"></p><p>c类，可以看出这是一个比较结果的方法</p><p><img src="/2022/09/29/%E6%B1%A4%E5%A7%86%E7%9A%84%E8%8B%B9%E6%9E%9C%E2%80%94%E2%80%94bugku/1664414874587.png" alt="类c"></p><h1 id="程序逻辑"><a href="#程序逻辑" class="headerlink" title="程序逻辑"></a>程序逻辑</h1><p>输入flag–&gt;进入a类不断进入b类进行循环–&gt;进入c类进行结果比较</p><h1 id="解题脚本"><a href="#解题脚本" class="headerlink" title="解题脚本"></a>解题脚本</h1><p>由于按照程序原本的逻辑，我写出的脚本无法生成flag，且网上暂时没有该题的writeup，我只好使用另一种方法。</p><p>程序的逻辑是将字符串不断地进行异或，最后的结果其实相当于进行一次异或，而这一次异或的数字是未知，因此可以写一个循环去爆破它。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">final = [<span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;&#125;&#x27;</span>, <span class="string">&#x27;&#123;&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;v&#x27;</span>, <span class="string">&#x27;&#125;&#x27;</span>, <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;$&#x27;</span>, <span class="string">&#x27;%&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;v&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;v&#x27;</span>,</span><br><span class="line">         <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;a&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    num = [<span class="number">0</span>] * <span class="number">24</span></span><br><span class="line">    f = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> q <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(final)):</span><br><span class="line">        num[q] = (<span class="built_in">ord</span>(final[q]) ^ i)</span><br><span class="line">        <span class="keyword">if</span> num[q] &gt;= <span class="number">128</span>:</span><br><span class="line">            f = <span class="number">1</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> num[q] &lt;= <span class="number">31</span>:</span><br><span class="line">            f = <span class="number">1</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> f == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;the i is: &quot;</span>, i)</span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> num:</span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">chr</span>(t), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line"><span class="comment"># the i is:  27</span></span><br><span class="line"><span class="comment"># akf`|mfntoa?&gt;543564mlmoz</span></span><br><span class="line"><span class="comment"># the i is:  28</span></span><br><span class="line"><span class="comment"># flag&#123;jaishf89234213jkjh&#125;</span></span><br><span class="line"><span class="comment"># the i is:  29</span></span><br><span class="line"><span class="comment"># gm`fzk`hrig98325302kjki|</span></span><br><span class="line"><span class="comment"># the i is:  30</span></span><br><span class="line"><span class="comment"># dnceyhckqjd:;016031hihj</span></span><br><span class="line"><span class="comment"># the i is:  31</span></span><br><span class="line"><span class="comment"># eobdxibjpke;:107120ihik~</span></span><br></pre></td></tr></table></figure><p><strong>flag{jaishf89234213jkjh}</strong></p>]]></content>
      
      
      <categories>
          
          <category> Reverse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Reverse </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/09/27/hello-world/"/>
      <url>/2022/09/27/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;Hello, my name is biubiubiu&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
